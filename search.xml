<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>API接口文档管理工具：Swagger</title>
    <url>/2021/11/15/API%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%EF%BC%9ASwagger/</url>
    <content><![CDATA[<p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。</p>
<p>分组开发工具，可以设置不同的组（Docket.groupname），每个组负责开发不同的功能模块。</p>
<p>前端可视化后端API接口（实时更新），可以对controller进行测试。</p>
<ul>
<li>号称世界上最流行的API框架；</li>
<li>RestFul API文档在线自动生成工具=》API文档域API自动更新。</li>
<li>直接运行，可以在线测试API接口。</li>
<li>支持多种语言。</li>
</ul>
<h1>在项目中使用Swagger</h1>
<p>需要springbox；</p>
<ul>
<li>swagger2</li>
<li>ui</li>
</ul>
<h1>在SpringBoot中集成swagger</h1>
<h3 id="新建项目">新建项目</h3>
<h2 id="导入依赖">导入依赖</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="编写hello工程。">编写hello工程。</h2>
<h2 id="集成swagger-》config">集成swagger==》config</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span>         <span class="comment">//开启swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="访问网址">访问网址</h2>
<p><a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211018110821946.png" alt="image-20211018110821946"></p>
<h1>配置swagger</h1>
<h2 id="swagger的bean实例Docket：">swagger的bean实例Docket：</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span>         <span class="comment">//开启swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//配置swagger的Docket bean实例。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置swagger信息=apiInfo</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact(<span class="string">&quot;李文凯&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;li17669498364@163.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(<span class="string">&quot;李文凯的swaggerAPI文档&quot;</span>,</span><br><span class="line">                <span class="string">&quot;加油，冲刺&quot;</span>,</span><br><span class="line">                <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;urn:tos&quot;</span>,</span><br><span class="line">                contact,</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> ArrayList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211018112506760.png" alt="image-20211018112506760"></p>
<h2 id="Swagger配置扫描接口">Swagger配置扫描接口</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).</span><br><span class="line">            apiInfo(apiInfo())</span><br><span class="line">            .select()</span><br><span class="line">            <span class="comment">//配置要扫描接口的方式</span></span><br><span class="line">            <span class="comment">//basePackage：指定要扫描的包。</span></span><br><span class="line">            <span class="comment">//any()：扫描全部</span></span><br><span class="line">            <span class="comment">//none（）：不扫描</span></span><br><span class="line">            <span class="comment">//withClassAnnotation：扫描雷伤的注解，参数是一个注解的反射对象。</span></span><br><span class="line">            <span class="comment">//withMethodAnnotation：扫描方法上的注解</span></span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.kai.controller&quot;</span>))</span><br><span class="line">            <span class="comment">//paths（）。过滤什么路径</span></span><br><span class="line">            .paths(PathSelectors.ant(<span class="string">&quot;/kai/**&quot;</span>))</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211018151937769.png" alt="image-20211018151937769"></p>
<h2 id="配置自动启动config">配置自动启动config</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).</span><br><span class="line">                apiInfo(apiInfo())</span><br><span class="line">                <span class="comment">//swagger是否启动，如果为false，则swagger不能再浏览器中访问。</span></span><br><span class="line">                .enable(<span class="keyword">false</span>)</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211018152317499.png" alt="image-20211018152317499"></p>
<p>需求：在生产环境有使用swagger自动启动，在运行环境中不使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span>         <span class="comment">//开启swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//配置swagger的Docket bean实例。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置要显示的swagger环境。</span></span><br><span class="line">        Profiles profiles = Profiles.of(<span class="string">&quot;dev&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="comment">//通过environment.acceptsProfiles判断是否处在自己设定的环境中。</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).</span><br><span class="line">                apiInfo(apiInfo())</span><br><span class="line">                <span class="comment">//swagger是否启动，如果为false，则swagger不能再浏览器中访问。</span></span><br><span class="line">                .enable(flag)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//配置要扫描接口的方式</span></span><br><span class="line">                <span class="comment">//basePackage：指定要扫描的包。</span></span><br><span class="line">                <span class="comment">//any()：扫描全部</span></span><br><span class="line">                <span class="comment">//none（）：不扫描</span></span><br><span class="line">                <span class="comment">//withClassAnnotation：扫描雷伤的注解，参数是一个注解的反射对象。</span></span><br><span class="line">                <span class="comment">//withMethodAnnotation：扫描方法上的注解</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.kai.controller&quot;</span>))</span><br><span class="line">                <span class="comment">//paths（）。过滤什么路径</span></span><br><span class="line"><span class="comment">//                .paths(PathSelectors.ant(&quot;/kai/**&quot;))</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置API文档分组">配置API文档分组</h2>
<p>配置一个组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).</span><br><span class="line">        apiInfo(apiInfo())</span><br><span class="line">        .groupName(<span class="string">&quot;Liwenkai&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>配置多个组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多个docket分组</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实体类配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModel(&quot;用户实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;年龄&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiOperation(&quot;用户控制类&quot;)</span>     <span class="comment">//API 接口注释，放在方法上</span></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;/hello&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只要调用的controller中存在user对象，他就会被扫描扫swagger中。</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211018161610774.png" alt="image-20211018161610774"></p>
<h1>swagger的作用</h1>
<p>模拟前端往后端传递数据的过程。可以从前端中测试后端中的API。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211018170441331.png" alt="image-20211018170441331"></p>
<p>当出现错误时，可以在这个swagger UI界面中显示出来。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211018170629978.png" alt="image-20211018170629978"></p>
<h1>总结</h1>
<ol>
<li>通过swagger给一些比较难理解的属性和接口，增加注释信息。</li>
<li>接口文档可以实时更新。</li>
<li>可以在线测试。</li>
</ol>
<p>==<strong>注意点，在正式发布时，需要关闭swagger，处于安全考虑，并且节省内存。</strong>==</p>
]]></content>
      <categories>
        <category>前后端交互</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Ambari</title>
    <url>/2021/12/04/Ambari/</url>
    <content><![CDATA[<p>Ambari是hadoop分布式集群配置管理工具；从Ambari 的作用来说，就是<strong>创建、管理、监视 Hadoop 的集群</strong>，但是这里的 Hadoop 是广义，指的是 Hadoop 整个生态圈(例如 Hive数据仓库，Hbase数据库，Sqoop，Zookeeper 等)，而并不仅是特指 Hadoop。用一句话来说，Ambari 就是为了让 Hadoop 以及相关的大数据软件更容易使用的一个工具。</p>
<span id="more"></span>
<h1>Ambari的作用</h1>
<ul>
<li>
<p>提供Hadoop集群</p>
<ul>
<li>Ambari提供了跨任意数量的主机安装Hadoop服务的分步向导</li>
<li>Ambari处理群集的Hadoop服务配置</li>
</ul>
</li>
<li>
<p>管理Hadoop集群</p>
<ul>
<li>集中管理，用于在整个集群中启动、停止和重新配置Hadoop集群</li>
</ul>
</li>
<li>
<p>监控Hadoop集群</p>
<ul>
<li>收集Hadoop的运行指标</li>
<li>提供了一个仪表盘，监控Hadoop集群的运行情况</li>
<li>故障预警</li>
</ul>
</li>
</ul>
<p><strong>Ambari使应用程序开发人员和系统集成商能够</strong></p>
<ul>
<li>使用Ambari REST API轻松将Hadoop配置，管理和监控功能集成到自己的应用程序中。</li>
</ul>
<h1>Ambari的组件</h1>
<p>Ambari的主要组成有三部分：</p>
<ul>
<li><strong>Ambari-Server</strong>：将集群的状态通过web UI 或RESTAPI的形式呈献给用户，并且通过这两种方式将用户指令下发到集群中，从而实现用户与Hadoop集群的交互。<strong>hadoop集群节点上一般没有server。</strong>（不知道为啥）</li>
<li><strong>Ambari-Agent</strong>：负责对集群内主机状态的采集以及执行Server发来的指令，并且将执行结果发送给<strong>Server</strong>。</li>
<li><strong>Ambari-Metrics</strong>：负责监控集群状态的功能组件。会搜集一下两种数据指标：
<ul>
<li>个节点“系统级”的指标</li>
<li>Hadoop各组件的指标</li>
</ul>
</li>
</ul>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/v2-fa754b5349e1948bba38d124854af6e0_b.jpg" alt="img"></p>
<p><strong>心跳机制：</strong></p>
<p>Ambari-Server与Ambari-Agent之间的交互是通过<strong>agent定期发送post请求</strong>，上报Ambari-agent所在主机的状态；Ambari-Server<strong>接收到Agent发送来的状态之后，给Ambari-Agent返回需要在此主机上执行的指令</strong>。这样一次完整的指令就像是一次心跳一样 ，通过心跳完成主从交互的机制就是心跳机制。</p>
<p><strong>用户和数据集群中间的交互：</strong></p>
<p>1）在server安装、配置完成并启动后；</p>
<p>2）用户通过浏览器访问server，在地址栏输入的url是由ambari-web（以后简称web）模块响应请求，web端又调用ambari-server 的REST api获取数据显示在浏览器页面上。</p>
<p>3）当用户想要通过浏览器操作集群（stop、start某些组件）时，由web端向ambari-server发送post或put请求，ambari-server 接收到请求后通过心跳机制，向ambari-agent(以后简称agent)发送指令，最后由agent执行shell或python脚本来完成。</p>
<p><strong>显示在浏览器上的数据来源：</strong></p>
<p>主要分为以下两种类型：</p>
<ul>
<li>集群内各服务的实时状态信息，这类数据是由AMS模块实时采集上报给Ambari-Metrics-Collector，再由Ambari-Server调用的Ambari-Metries-controller的REST API显示在页面上。这部分数据没有落地到ambari-server 的数据库中，在每次web端调用ambari-server的数据时，ambari-server都会调用ambari-metrics-collector获取数据，进行适当的加工处理后直接返回给web端 显示在浏览器页面上。</li>
<li>由ambari-server缓存在内存，持久化到数据库的数据，这类数据<strong>比如主机列表、服务列表、服务的配置信息等</strong>。这些数据是由agent采集通过心跳发送给ambari-server后，ambari-server更新自身的数据状态。当web端调用ambari-server的rest api获取这些数据时，ambari-server将web端请求的数据直接返回给web显示在浏览器页面。</li>
</ul>
<h1>Ambari用户权限</h1>
<p>1.服务级别权限</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211204111153463.png" alt="image-20211204111153463"></p>
<p>2.主机级权限</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211204111259671.png" alt="image-20211204111259671"></p>
<p>3.集群级权限</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211204111333306.png" alt="image-20211204111333306"></p>
<p>4.Ambari级权限</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211204111403313.png" alt="image-20211204111403313"></p>
]]></content>
      <categories>
        <category>云计算</category>
      </categories>
      <tags>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>CloudBreak</title>
    <url>/2021/12/03/CloudBreak/</url>
    <content><![CDATA[<p>Cloudbreak 允许<strong>在云平台（私有云、公有云都可）上创建、管理和监控 HDP 和 HDF 集群</strong>。</p>
<span id="more"></span>
<h1>CloudBreak</h1>
<h1>1.核心概念简介</h1>
<p>Cloudbreak 允许<strong>在云平台上创建、管理和监控 HDP 和 HDF 集群</strong>：</p>
<ul>
<li>在公共云和私有云（AWS、Azure、谷歌云、OpenStack）上动态部署、配置和管理集群。</li>
<li>随着集群工作负载的变化，使用自动扩展无缝管理弹性需求。</li>
<li>通过启用 Kerberos 保护您的集群。</li>
</ul>
<p>Cloudbreak支持通过Cloudbreak web UI、Cloudbreak CLI和Cloudbreak REST API创建集群。集群可以在公共云基础设施平台Microsoft Azure、Amazon Web Services (AWS)和谷歌云平台(GCP)上发布，也可以在私有云基础设施平台上发布</p>
<h2 id="1-1Ambari">1.1Ambari</h2>
<p>Apache Ambari是一种基于Web的工具，支持Apache Hadoop集群的供应、管理和监控。</p>
<p>Apache Ambari 支持HDFS、MapReduce、Hive、Pig、Hbase、Zookeepr、Sqoop和Hcatalog等的集中管理。</p>
<h2 id="1-2-Clusters-数据集群">1.2 Clusters (数据集群)</h2>
<p><em>数据库集群</em>，就是利用至少两台或者多台数据库服务器，构成一个虚拟单一数据库逻辑映像，像单数据库系统那样，向客户端提供透明的数据服务。</p>
<h2 id="1-3-blueprints（蓝图）">1.3 blueprints（蓝图）</h2>
<ul>
<li>blueprints是集群的声明性定义。</li>
<li>允许定义堆栈、组件布局和配置的集群实例。</li>
<li>启动集群时将 JSON 中的主机组映射到一组实例，并在相应的节点上安装指定的服务和组件。</li>
</ul>
<p><strong>Ambari 蓝图是集群的声明性定义</strong>。蓝图<strong>允许您指定堆栈、组件布局和配置以通过 Ambari REST API 实现集群实例</strong>，而无需使用 Ambari 集群安装向导。</p>
<p>Ambari 蓝图以 <strong>JSON 格式</strong>指定。将蓝图提供给 Cloudbreak 后，<strong>启动集群时将 JSON 中的主机组映射到一组实例，并在相应的节点上安装指定的服务和组件</strong>。</p>
<p>Cloudbreak 包含一些默认蓝图，并允许您上传自己的蓝图。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/cb_arch-blue.png" alt="img"></p>
<h2 id="1-4-Credential（凭证）">1.4 Credential（凭证）</h2>
<p>启动 Cloudbreak 后，必须为要在其上配置集群的每个云提供商创建一个 Cloudbreak 凭证。只有在完成该步骤后，您才能开始创建集群。</p>
<p>Cloudbreak 凭证<strong>允许 Cloudbreak 向云提供商进行身份验证并代表您创建资源</strong>。身份验证过程因云提供商而异，但通常通过向 Cloudbreak 分配特定 IAM 角色来完成，这允许 Cloudbreak 在您的云提供商帐户中执行某些操作。</p>
<h2 id="1-5Data-lake（数据湖）">1.5Data lake（数据湖）</h2>
<p>为当前和未来的临时工作负载提供一致的可用安全策略定义。所有与schema (Hive)、security policy (Ranger)、audit (Ranger)相关的信息都存储在外部位置(外部数据库、云存储)。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/cb_datalake-diag01.png" alt="img"></p>
<p>创建数据湖实例后，可以选择将其附加到一个或多个临时集群。这允许您跨多个工作负载集群应用身份验证、授权和审计。</p>
<ul>
<li>工作负载集群（Workload clusters）</li>
</ul>
<p>连接到数据湖以运行工作负载的集群。这是通过JDBC运行Hive等工作负载的地方。</p>
<p>数据湖的组成：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/cb_datalake-diag02.png" alt="img"></p>
<ul>
<li>Schema：实现技术
<ul>
<li>Apache Hive。数据仓库，提供Hive模式(表、视图等)。</li>
<li>如果有两个或多个工作负载访问相同的Hive数据，则需要在这些工作负载之间共享模式。</li>
</ul>
</li>
<li>Policy：安全政策
<ul>
<li>Apache Ranger</li>
<li>定义围绕Hive模式的安全策略。如果有两个或多个用户访问相同的数据，则需要始终可用并实施安全策略。</li>
</ul>
</li>
<li>Audit：
<ul>
<li>Apache Range</li>
<li>审计用户访问并捕获工作负载的数据访问活动。</li>
</ul>
</li>
<li>Directory
<ul>
<li>LDAP/AD</li>
<li>为用户提供身份验证源，并定义用于授权的组。</li>
</ul>
</li>
<li>GateWay：
<ul>
<li>Apache Knox</li>
<li>支持单个工作负载端点，可以使用SSL保护该端点，并启用身份验证以访问资源。</li>
</ul>
</li>
</ul>
<h2 id="1-6Dynamic-blueprints（动态蓝湖）">1.6Dynamic blueprints（动态蓝湖）</h2>
<p>在蓝图之外管理外部资源，简化了蓝图。</p>
<p>生产集群配置通常包括某些配置参数，例如与外部数据库（用于 Hive、Ranger 等）和 LDAP/AD 相关的配置参数，迫使用户创建相同蓝图的 1+ 版本来处理这些外部系统的不同组件配置。</p>
<p>动态蓝图提供了在蓝图之外管理外部源（例如 RDBMS 和 LDAP/AD）的能力，因为它们仅使用蓝图作为模板，而 Cloudbreak 将实际配置注入到您的蓝图中。这简化了外部源（RDBMS 和 LDAP/AD）集群配置的重用，并简化了蓝图本身。</p>
<h2 id="1-7-外部资源">1.7 外部资源</h2>
<p>Cloudbreak <strong>允许定义独立于集群创建的外部源</strong>——因此它们的生命周期不受任何集群的生命周期的限制——并且可以与多个集群重用：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/cb_external-source.png" alt="img"></p>
<p>可以在 Cloudbreak 中注册的外部源包括：</p>
<ul>
<li>身份验证配置（LDAP/AD）</li>
<li>数据库配置</li>
<li>图片目录</li>
<li>代理配置</li>
</ul>
<p>注册外部源后，您可以将其重用于多个集群。</p>
<h2 id="1-8-Recipes">1.8 Recipes</h2>
<p>Cloudbreak 允许您上传自定义脚本，称为“Recipes”。Recipes是在特定时间在选定节点组的所有节点上运行的脚本。您可以将配方用于安装其他软件或执行高级集群配置等任务。</p>
<p>执行时间为：</p>
<ul>
<li>Ambari 服务器启动前</li>
<li>Ambari 服务器启动后</li>
<li>集群安装后</li>
<li>集群终止前</li>
</ul>
<p>可以通过 UI 或 CLI将recipes上传到cloudbreak中，创建集群时，可以创建多个recipes，他们将在特定时间，特定主机组上执行。</p>
]]></content>
      <categories>
        <category>云计算</category>
      </categories>
      <tags>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>Ambari自定义服务</title>
    <url>/2021/12/30/Ambari%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>Ambari自定义服务。将我们需要的服务通过Ambari配置到镜像中，根据此镜像创建的实例中就会自动配置我们需要的服务。</p>
<span id="more"></span>
<h1>Ambari自定义服务</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#自定义服务的路径：</span><br><span class="line">/var/lib/ambari-server/resources/stacks/HDP/3.1/services</span><br></pre></td></tr></table></figure>
<p>以REDIS为例：</p>
<p><strong>metainfo.xml</strong>： 一个服务文件描述了服务，服务的组件和管理脚本，核心配置文件。服务的组件可以是 MASTER、 SLAVE 或 CLIENT 类别。<category> 告诉 Ambari 应该使用哪些默认命令来管理和监视组件</p>
<p><strong>configurate</strong>：里面放置一个或多个 xml 文件，用于将该服务的配置信息展示在前端页面，也可以在ambari 页面上对服务的一些配置做更改，如下图所示：</p>
<p><strong>package</strong>：package 目录：里面包含 scripts 文件夹，该目录下存放着 python 文件，用于对服务的安装、配置、启动、停止等操作。自定义服务 python 脚本依赖的模块是 resource_management 。该模块分布在不同的目录下，但内容是一致的。</p>
<p><strong>quicklinks.json</strong> ：用于生成快速链接，实现 url 的跳转。可支持多个 url 展示。</p>
<p><strong>role_command_order.json</strong> 文件：决定各个服务组件之间的启动顺序。</p>
<p><strong>alert.json</strong>：描述 ambari 对服务的 告警 设置。告警类型有 WEB、Port、Metric、Aggregate 和 Script 。</p>
<img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211224101849765.png" alt="image-20211224101849765" style="zoom:150%;" />
<h1>创建和添加服务</h1>
<p>1.在 Ambari 服务器上，浏览到 <code>/var/lib/ambari-server/resources/stacks/HDP/3.1/services</code> 目录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/lib/ambari-server/resources/stacks/HDP/3.1/services</span><br></pre></td></tr></table></figure>
<p>2.创建一个名为的目录 ，该目录 将包含<strong>SAMPLESRV</strong>的服务定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /var/lib/ambari-server/resources/stacks/HDP/2.0.6/services/SAMPLESRV</span><br><span class="line">cd /var/lib/ambari-server/resources/stacks/HDP/2.0.6/services/SAMPLESRV</span><br></pre></td></tr></table></figure>
<p>3.浏览到新创建的 <code>SAMPLESRV</code> 目录，创建一个<code>metainfo.xml</code> 描述新服务的 文件。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">metainfo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">schemaVersion</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">schemaVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">services</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>SAMPLESRV<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">displayName</span>&gt;</span>New Sample Service<span class="tag">&lt;/<span class="name">displayName</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">comment</span>&gt;</span>A New Sample Service<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">components</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">component</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>SAMPLESRV_MASTER<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">displayName</span>&gt;</span>Sample Srv Master<span class="tag">&lt;/<span class="name">displayName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">category</span>&gt;</span>MASTER<span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cardinality</span>&gt;</span>1<span class="tag">&lt;/<span class="name">cardinality</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">commandScript</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">script</span>&gt;</span>scripts/master.py<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">scriptType</span>&gt;</span>PYTHON<span class="tag">&lt;/<span class="name">scriptType</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">timeout</span>&gt;</span>600<span class="tag">&lt;/<span class="name">timeout</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">commandScript</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">component</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>SAMPLESRV_SLAVE<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">displayName</span>&gt;</span>Sample Srv Slave<span class="tag">&lt;/<span class="name">displayName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">category</span>&gt;</span>SLAVE<span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cardinality</span>&gt;</span>1+<span class="tag">&lt;/<span class="name">cardinality</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">commandScript</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">script</span>&gt;</span>scripts/slave.py<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">scriptType</span>&gt;</span>PYTHON<span class="tag">&lt;/<span class="name">scriptType</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">timeout</span>&gt;</span>600<span class="tag">&lt;/<span class="name">timeout</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">commandScript</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">component</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>SAMPLESRV_CLIENT<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">displayName</span>&gt;</span>Sample Srv Client<span class="tag">&lt;/<span class="name">displayName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">category</span>&gt;</span>CLIENT<span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cardinality</span>&gt;</span>1+<span class="tag">&lt;/<span class="name">cardinality</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">commandScript</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">script</span>&gt;</span>scripts/sample_client.py<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">scriptType</span>&gt;</span>PYTHON<span class="tag">&lt;/<span class="name">scriptType</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">timeout</span>&gt;</span>600<span class="tag">&lt;/<span class="name">timeout</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">commandScript</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">            <span class="tag">&lt;/<span class="name">components</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">osSpecifics</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">osSpecific</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">osFamily</span>&gt;</span>any<span class="tag">&lt;/<span class="name">osFamily</span>&gt;</span>  <span class="comment">&lt;!-- <span class="doctag">note:</span> use osType rather than osFamily for Ambari 1.5.0 and 1.5.1 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">osSpecific</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">osSpecifics</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">services</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">metainfo</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>SAMPLESRV</li>
</ol>
<p>它包含：</p>
<ul>
<li>一个 <strong>MASTER</strong> 组件“ <strong>SAMPLESRV_MASTER</strong> ”</li>
<li>一个 <strong>SLAVE</strong> 组件“ <strong>SAMPLESRV_SLAVE</strong> ”</li>
<li>一个 <strong>CLIENT</strong> 组件“ <strong>SAMPLESRV_CLIENT</strong> ”</li>
</ul>
<p>5.接下来，让我们创建该命令脚本。为/var/lib/ambari-server/resources/stacks/HDP/2.0.6/services/SAMPLESRV/package/scripts我们在服务元信息中指定的命令脚本创建一个目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /var/lib/ambari-server/resources/stacks/HDP/2.0.6/services/SAMPLESRV/package/scripts</span><br><span class="line">cd /var/lib/ambari-server/resources/stacks/HDP/2.0.6/services/SAMPLESRV/package/scripts</span><br></pre></td></tr></table></figure>
<p>6.浏览到脚本目录并创建 <code>.py</code> 命令脚本文件。</p>
<p>例如 <code>master.py</code> 文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> resource_management <span class="keyword">import</span> *</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span>(<span class="params">Script</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">install</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Install the Sample Srv Master&#x27;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">stop</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Stop the Sample Srv Master&#x27;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Start the Sample Srv Master&#x27;</span>;</span><br><span class="line">     </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">status</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Status of the Sample Srv Master&#x27;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">configure</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Configure the Sample Srv Master&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  Master().execute()</span><br></pre></td></tr></table></figure>
<p><a href="http://slave.py">slave.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> resource_management <span class="keyword">import</span> *</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Slave</span>(<span class="params">Script</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">install</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Install the Sample Srv Slave&#x27;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">stop</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Stop the Sample Srv Slave&#x27;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Start the Sample Srv Slave&#x27;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">status</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Status of the Sample Srv Slave&#x27;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">configure</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Configure the Sample Srv Slave&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  Slave().execute()</span><br></pre></td></tr></table></figure>
<p><a href="http://client.py">client.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> resource_management <span class="keyword">import</span> *</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleClient</span>(<span class="params">Script</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">install</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Install the Sample Srv Client&#x27;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">configure</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Configure the Sample Srv Client&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  SampleClient().execute()</span><br></pre></td></tr></table></figure>
<p>7.现在，重新启动 Ambari 服务器，以便将此新服务定义分发到集群中的所有代理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ambari-server restart</span><br></pre></td></tr></table></figure>
<h1>自定义KAFKA服务</h1>
<h2 id="1-创建目录">1.创建目录</h2>
<p>到目标目录下/var/lib/ambari-server/resources/stacks/HDP/3.1/services。创建KAFKA文件夹</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mkdir /var/lib/ambari-server/resources/stacks/HDP/2.0.6/services/KAFKA</span><br><span class="line">cd /var/lib/ambari-server/resources/stacks/HDP/2.0.6/services/KAFKA</span><br></pre></td></tr></table></figure>
<h2 id="2-Metainfo-xml">2.Metainfo.xml</h2>
<p>创建Metainfo.xml文件，描述服务，服务的组件和管理脚本，核心配置文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment">   contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment">   this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment">   The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment">   (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment">   the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">   distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">   See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">   limitations under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">metainfo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">schemaVersion</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">schemaVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">services</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--kafka 的配置信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>KAFKA<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">displayName</span>&gt;</span>Kafka<span class="tag">&lt;/<span class="name">displayName</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">comment</span>&gt;</span>A high-throughput distributed messaging system<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">components</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">component</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--kafka组件配置信息，Broker是kafka的实例，每台服务器上都有一台或者多态服务器--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>KAFKA_BROKER<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">displayName</span>&gt;</span>Kafka Broker<span class="tag">&lt;/<span class="name">displayName</span>&gt;</span></span><br><span class="line">					<span class="comment">&lt;!--种类是master--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">category</span>&gt;</span>MASTER<span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cardinality</span>&gt;</span>1+<span class="tag">&lt;/<span class="name">cardinality</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">versionAdvertised</span>&gt;</span>true<span class="tag">&lt;/<span class="name">versionAdvertised</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">rollingRestartSupported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">rollingRestartSupported</span>&gt;</span></span><br><span class="line">					<span class="comment">&lt;!--ZOOKEEPER依赖--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">name</span>&gt;</span>ZOOKEEPER/ZOOKEEPER_SERVER<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>cluster<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">auto-deploy</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">auto-deploy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">					<span class="comment">&lt;!--命令脚本，所在的位置是scripts/kafka_broker.py--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">commandScript</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">script</span>&gt;</span>scripts/kafka_broker.py<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">scriptType</span>&gt;</span>PYTHON<span class="tag">&lt;/<span class="name">scriptType</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">timeout</span>&gt;</span>1200<span class="tag">&lt;/<span class="name">timeout</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">commandScript</span>&gt;</span></span><br><span class="line">					<span class="comment">&lt;!--监控，日志？--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">logs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">log</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">logId</span>&gt;</span>kafka_server<span class="tag">&lt;/<span class="name">logId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">primary</span>&gt;</span>true<span class="tag">&lt;/<span class="name">primary</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">log</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">log</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">logId</span>&gt;</span>kafka_controller<span class="tag">&lt;/<span class="name">logId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">log</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">log</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">logId</span>&gt;</span>kafka_request<span class="tag">&lt;/<span class="name">logId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">log</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">log</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">logId</span>&gt;</span>kafka_logcleaner<span class="tag">&lt;/<span class="name">logId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">log</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">log</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">logId</span>&gt;</span>kafka_statechange<span class="tag">&lt;/<span class="name">logId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">log</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">logs</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">component</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>KAFKA_MANAGER<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">displayName</span>&gt;</span>Kafka Manager<span class="tag">&lt;/<span class="name">displayName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">category</span>&gt;</span>MASTER<span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cardinality</span>&gt;</span>1<span class="tag">&lt;/<span class="name">cardinality</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">versionAdvertised</span>&gt;</span>true<span class="tag">&lt;/<span class="name">versionAdvertised</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">rollingRestartSupported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">rollingRestartSupported</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">name</span>&gt;</span>ZOOKEEPER/ZOOKEEPER_SERVER<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>cluster<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">auto-deploy</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">auto-deploy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">commandScript</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">script</span>&gt;</span>scripts/kafka_manager.py<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">scriptType</span>&gt;</span>PYTHON<span class="tag">&lt;/<span class="name">scriptType</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">timeout</span>&gt;</span>1200<span class="tag">&lt;/<span class="name">timeout</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">commandScript</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">component</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;/<span class="name">components</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">commandScript</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">script</span>&gt;</span>scripts/service_check.py<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scriptType</span>&gt;</span>PYTHON<span class="tag">&lt;/<span class="name">scriptType</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">timeout</span>&gt;</span>300<span class="tag">&lt;/<span class="name">timeout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">commandScript</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">requiredServices</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">service</span>&gt;</span>ZOOKEEPER<span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">requiredServices</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--设置依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration-dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>kafka-broker<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>kafka-env<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>kafka-log4j<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>ranger-kafka-plugin-properties<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>ranger-kafka-audit<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>ranger-kafka-policymgr-ssl<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>ranger-kafka-security<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>zookeeper-env<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>zoo.cfg<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>kafka_jaas_conf<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>kafka_client_jaas_conf<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration-dependencies</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--操作系统的规格--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">osSpecifics</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">osSpecific</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">osFamily</span>&gt;</span>redhat7,amazonlinux2,redhat6,suse11,suse12<span class="tag">&lt;/<span class="name">osFamily</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">packages</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">package</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">name</span>&gt;</span>kafka_$&#123;stack_version&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">packages</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">osSpecific</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">osSpecific</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">osFamily</span>&gt;</span>debian7,debian9,ubuntu12,ubuntu14,ubuntu16,ubuntu18<span class="tag">&lt;/<span class="name">osFamily</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">packages</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">package</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">name</span>&gt;</span>kafka-$&#123;stack_version&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">packages</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">osSpecific</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">osSpecifics</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--更改后需要重启--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">restartRequiredAfterChange</span>&gt;</span>true<span class="tag">&lt;/<span class="name">restartRequiredAfterChange</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">restartRequiredAfterRackChange</span>&gt;</span>true<span class="tag">&lt;/<span class="name">restartRequiredAfterRackChange</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--主题设置--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">themes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">theme</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fileName</span>&gt;</span>directories.json<span class="tag">&lt;/<span class="name">fileName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">default</span>&gt;</span>true<span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">theme</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">themes</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--快速链接配置--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">quickLinksConfigurations</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">quickLinksConfiguration</span>&gt;</span>        </span><br><span class="line">          <span class="tag">&lt;<span class="name">fileName</span>&gt;</span>quicklinks.json<span class="tag">&lt;/<span class="name">fileName</span>&gt;</span>     </span><br><span class="line">          <span class="tag">&lt;<span class="name">default</span>&gt;</span>true<span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">quickLinksConfiguration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">quickLinksConfigurations</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">services</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">metainfo</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-package包，服务的安装、配置、启动">3.package包，服务的安装、配置、启动</h2>
<p>在KAFKA中包括了两个组件：KAFKA_BROKER和KAFKA_MANAGER。在目标目录/package/scripts下，对服务的安装、配置、启动、停止等操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/lib/ambari-server/resources/stacks/HDP/2.0.6/services/KAFKA/package/scripts</span><br></pre></td></tr></table></figure>
<p>KAFKA_BROKER配置信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KafkaBroker</span>(<span class="params">Script</span>):</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">install</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    self.install_packages(env)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">configure</span>(<span class="params">self, env, upgrade_type=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">import</span> params</span><br><span class="line">    env.set_params(params)</span><br><span class="line">    kafka(upgrade_type=upgrade_type)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">pre_upgrade_restart</span>(<span class="params">self, env, upgrade_type=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">import</span> params</span><br><span class="line">    env.set_params(params)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> params.version <span class="keyword">and</span> check_stack_feature(StackFeature.ROLLING_UPGRADE, params.version):</span><br><span class="line">      stack_select.select_packages(params.version)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This is extremely important since it should only be called if crossing the HDP 2.3.4.0 boundary.</span></span><br><span class="line">    <span class="keyword">if</span> params.version <span class="keyword">and</span> params.upgrade_direction:</span><br><span class="line">      src_version = dst_version = <span class="literal">None</span></span><br><span class="line">      <span class="keyword">if</span> params.upgrade_direction == Direction.UPGRADE:</span><br><span class="line">        src_version = upgrade_summary.get_source_version(<span class="string">&quot;KAFKA&quot;</span>, default_version =  params.version)</span><br><span class="line">        dst_version = upgrade_summary.get_target_version(<span class="string">&quot;KAFKA&quot;</span>, default_version =  params.version)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># These represent the original values during the UPGRADE direction</span></span><br><span class="line">        src_version = upgrade_summary.get_target_version(<span class="string">&quot;KAFKA&quot;</span>, default_version =  params.version)</span><br><span class="line">        dst_version = upgrade_summary.get_source_version(<span class="string">&quot;KAFKA&quot;</span>, default_version =  params.version)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> check_stack_feature(StackFeature.KAFKA_ACL_MIGRATION_SUPPORT, src_version) <span class="keyword">and</span> check_stack_feature(StackFeature.KAFKA_ACL_MIGRATION_SUPPORT, dst_version):</span><br><span class="line">        <span class="comment"># Calling the acl migration script requires the configs to be present.</span></span><br><span class="line">        self.configure(env, upgrade_type=upgrade_type)</span><br><span class="line">        upgrade.run_migration(env, upgrade_type)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self, env, upgrade_type=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">import</span> params</span><br><span class="line">    env.set_params(params)</span><br><span class="line">    self.configure(env, upgrade_type=upgrade_type)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> params.kerberos_security_enabled:</span><br><span class="line">      <span class="keyword">if</span> params.version <span class="keyword">and</span> check_stack_feature(StackFeature.KAFKA_KERBEROS, params.version):</span><br><span class="line">        kafka_kinit_cmd = <span class="built_in">format</span>(<span class="string">&quot;&#123;kinit_path_local&#125; -kt &#123;kafka_keytab_path&#125; &#123;kafka_jaas_principal&#125;;&quot;</span>)</span><br><span class="line">        Execute(kafka_kinit_cmd, user=params.kafka_user)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> params.is_supported_kafka_ranger:</span><br><span class="line">      setup_ranger_kafka() <span class="comment">#Ranger Kafka Plugin related call </span></span><br><span class="line">    daemon_cmd = <span class="built_in">format</span>(<span class="string">&#x27;source &#123;params.conf_dir&#125;/kafka-env.sh ; &#123;params.kafka_bin&#125; start&#x27;</span>)</span><br><span class="line">    no_op_test = <span class="built_in">format</span>(<span class="string">&#x27;ls &#123;params.kafka_pid_file&#125; &gt;/dev/null 2&gt;&amp;1 &amp;&amp; ps -p `cat &#123;params.kafka_pid_file&#125;` &gt;/dev/null 2&gt;&amp;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      Execute(daemon_cmd,</span><br><span class="line">              user=params.kafka_user,</span><br><span class="line">              not_if=no_op_test</span><br><span class="line">      )</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      show_logs(params.kafka_log_dir, params.kafka_user)</span><br><span class="line">      <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">stop</span>(<span class="params">self, env, upgrade_type=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">import</span> params</span><br><span class="line">    env.set_params(params)</span><br><span class="line">    <span class="comment"># Kafka package scripts change permissions on folders, so we have to</span></span><br><span class="line">    <span class="comment"># restore permissions after installing repo version bits</span></span><br><span class="line">    <span class="comment"># before attempting to stop Kafka Broker</span></span><br><span class="line">    ensure_base_directories()</span><br><span class="line">    daemon_cmd = <span class="built_in">format</span>(<span class="string">&#x27;source &#123;params.conf_dir&#125;/kafka-env.sh; &#123;params.kafka_bin&#125; stop&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      Execute(daemon_cmd,</span><br><span class="line">              user=params.kafka_user,</span><br><span class="line">      )</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      show_logs(params.kafka_log_dir, params.kafka_user)</span><br><span class="line">      <span class="keyword">raise</span></span><br><span class="line">    File(params.kafka_pid_file,</span><br><span class="line">          action = <span class="string">&quot;delete&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">disable_security</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    <span class="keyword">import</span> params</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> params.zookeeper_connect:</span><br><span class="line">      Logger.info(<span class="string">&quot;No zookeeper connection string. Skipping reverting ACL&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> params.secure_acls:</span><br><span class="line">      Logger.info(<span class="string">&quot;The zookeeper.set.acl is false. Skipping reverting ACL&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    Execute(</span><br><span class="line">      <span class="string">&quot;&#123;0&#125; --zookeeper.connect &#123;1&#125; --zookeeper.acl=unsecure&quot;</span>.<span class="built_in">format</span>(params.kafka_security_migrator, params.zookeeper_connect), \</span><br><span class="line">      user=params.kafka_user, \</span><br><span class="line">      environment=&#123; <span class="string">&#x27;JAVA_HOME&#x27;</span>: params.java64_home &#125;, \</span><br><span class="line">      logoutput=<span class="literal">True</span>, \</span><br><span class="line">      tries=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">status</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    <span class="keyword">import</span> status_params</span><br><span class="line">    env.set_params(status_params)</span><br><span class="line">    check_process_status(status_params.kafka_pid_file)</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_log_folder</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">import</span> params</span><br><span class="line">    <span class="keyword">return</span> params.kafka_log_dir</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_user</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">import</span> params</span><br><span class="line">    <span class="keyword">return</span> params.kafka_user</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_pid_files</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">import</span> status_params</span><br><span class="line">    <span class="keyword">return</span> [status_params.kafka_pid_file]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  KafkaBroker().execute()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>KAFKA_MANAGER配置信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KafkaManager</span>(<span class="params">Script</span>):</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">install</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    self.install_packages(env)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">configure</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    <span class="keyword">import</span> params</span><br><span class="line">    env.set_params(params)</span><br><span class="line">    conf_dir = <span class="string">&quot;&#123;0&#125;/conf&quot;</span>.<span class="built_in">format</span>(params.manager_dir)</span><br><span class="line">    manager_config_file = <span class="string">&quot;&#123;0&#125;/application.conf&quot;</span>.<span class="built_in">format</span>(conf_dir)</span><br><span class="line">    File(manager_config_file,</span><br><span class="line">             mode=0744,</span><br><span class="line">             owner = <span class="string">&quot;root&quot;</span>,</span><br><span class="line">             group = <span class="string">&quot;root&quot;</span>,</span><br><span class="line">             content = Template(<span class="string">&quot;application.conf.j2&quot;</span>)</span><br><span class="line">             ) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    <span class="keyword">import</span> params</span><br><span class="line">    <span class="keyword">import</span> status_params</span><br><span class="line">    env.set_params(params)</span><br><span class="line">    env.set_params(status_params)</span><br><span class="line">    self.configure(env)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(status_params.manager_pid_file):</span><br><span class="line">          File(status_params.manager_pid_file,</span><br><span class="line">                  action=<span class="string">&quot;delete&quot;</span>,</span><br><span class="line">                  owner=<span class="string">&quot;root&quot;</span>)</span><br><span class="line">    start_cmd = <span class="string">&quot;nohup &#123;0&#125;/bin/kafka-manager -Dhttp.port=&#123;1&#125; &amp;&quot;</span>.<span class="built_in">format</span>(params.manager_dir,params.manager_port)</span><br><span class="line">    Execute(start_cmd)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">stop</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    <span class="keyword">import</span> params</span><br><span class="line">    <span class="keyword">import</span> status_params</span><br><span class="line">    env.set_params(params)</span><br><span class="line">    env.set_params(status_params)</span><br><span class="line"> </span><br><span class="line">    stop_cmd = <span class="string">&quot;kill -9 `cat &#123;0&#125;`&quot;</span>.<span class="built_in">format</span>(status_params.manager_pid_file)</span><br><span class="line">    Execute(stop_cmd)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(status_params.manager_pid_file):</span><br><span class="line">        File(status_params.manager_pid_file,</span><br><span class="line">                      action=<span class="string">&quot;delete&quot;</span>,</span><br><span class="line">                      owner=<span class="string">&quot;root&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">status</span>(<span class="params">self, env</span>):</span></span><br><span class="line">    <span class="keyword">import</span> status_params</span><br><span class="line">    env.set_params(status_params)</span><br><span class="line">    check_process_status(status_params.manager_pid_file)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  KafkaManager().execute()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="4-配置文件">4.配置文件</h2>
<p>configuration包下。</p>
<p>用于将该服务的配置信息展示在前端页面。</p>
<p>依赖的配置文件放在configuration文件下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration-dependencies</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>kafka-broker<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>kafka-env<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>kafka-log4j<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>ranger-kafka-plugin-properties<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>ranger-kafka-audit<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>ranger-kafka-policymgr-ssl<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>ranger-kafka-security<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>zookeeper-env<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>zoo.cfg<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>kafka_jaas_conf<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>kafka_client_jaas_conf<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration-dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211230102024600.png" alt="image-20211230102024600"></p>
<h2 id="5-quicklinks-json">5.quicklinks.json</h2>
<p>quicklinks文件夹下。</p>
<p><strong>quicklinks.json</strong> ：用于生成快速链接，实现 url 的跳转。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;default quick links configuration&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;configuration&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;http&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;checks&quot;</span>:[</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;links&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;manager_ui&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;MANAGER UI&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;component_name&quot;</span>: <span class="string">&quot;KAFKA_MANAGER&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;requires_user_name&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;%@://%@:%@&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;port&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;http_property&quot;</span>: <span class="string">&quot;manager_port&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;http_default_port&quot;</span>: <span class="string">&quot;9000&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;https_property&quot;</span>: <span class="string">&quot;manager_port&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;https_default_port&quot;</span>: <span class="string">&quot;9000&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;regex&quot;</span>: <span class="string">&quot;^(\\d+)$&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;site&quot;</span>: <span class="string">&quot;manager_env&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-role-command-order-json">6.role_command_order.json</h2>
<p><strong>role_command_order.json</strong> 文件：决定各个服务组件之间的启动顺序。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;general_deps&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;_comment&quot;</span> : <span class="string">&quot;dependencies for KAFKA&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;KAFKA_BROKER-START&quot;</span> : [<span class="string">&quot;ZOOKEEPER_SERVER-START&quot;</span>, <span class="string">&quot;RANGER_USERSYNC-START&quot;</span>, <span class="string">&quot;NAMENODE-START&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;KAFKA_SERVICE_CHECK-SERVICE_CHECK&quot;</span>: [<span class="string">&quot;KAFKA_BROKER-START&quot;</span>,<span class="string">&quot;KAFKA_MANAGER-START&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="7-alerts-json告警设置">7.alerts.json告警设置</h2>
<p>描述 ambari 对服务的 告警 设置。告警类型有 WEB、Port、Metric、Aggregate 和 Script 。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;KAFKA&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;service&quot;</span>: [],</span><br><span class="line">    <span class="attr">&quot;KAFKA_BROKER&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;kafka_broker_process&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Kafka Broker Process&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;This host-level alert is triggered if the Kafka Broker cannot be determined to be up.&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;interval&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;HOST&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;source&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;PORT&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;&#123;&#123;kafka-broker/listeners&#125;&#125;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;default_port&quot;</span>: <span class="number">6667</span>,</span><br><span class="line">          <span class="attr">&quot;reporting&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;ok&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;TCP OK - &#123;0:.3f&#125;s response on port &#123;1&#125;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;warning&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;TCP OK - &#123;0:.3f&#125;s response on port &#123;1&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">1.5</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;critical&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;Connection failed: &#123;0&#125; to &#123;1&#125;:&#123;2&#125;&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="number">5.0</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>镜像制作</category>
      </categories>
      <tags>
        <tag>自定义服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数据库连接：JDBC</title>
    <url>/2021/10/15/Java%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%EF%BC%9AJDBC/</url>
    <content><![CDATA[<p>Java数据库连接，（Java Database Connectivity，简称JDBC）是<a href="https://baike.baidu.com/item/Java%E8%AF%AD%E8%A8%80">Java语言</a>中用来规范客户端程序如何来访问数据库的<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3/10418844">应用程序接口</a>，提供了诸如查询和更新数据库中数据的方法。JDBC也是Sun Microsystems的商标。我们通常说的JDBC是面向关系型数据库的。</p>
<span id="more"></span>
<h1>JDBC</h1>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210602153446084.png" alt="image-20210602153446084"></p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210602153529380.png" alt="image-20210602153529380"></p>
<h1>JDBC入门</h1>
<p>什么是JDBC:</p>
<ul>
<li>java数据库连接，</li>
<li>让java通过程序连接关系型数据库，</li>
<li>JDBC基于驱动程序实现与数据库的连接和操作</li>
</ul>
<p>JDBC驱动程序</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210602155933307.png" alt="image-20210602155933307"></p>
<p>JDBC提出了一个标准，相应的数据库程序提供实现。</p>
<p>优点：</p>
<ul>
<li>统一的API，提供一致的开发过程。</li>
<li>易于上手，容易上手，代码结构稳定</li>
<li>功能强大，执行效率高，可以处理海量数据。</li>
</ul>
<h1>JDBC开发流程</h1>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210602160414913.png" alt="image-20210602160414913"></p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210602173544564.png" alt="image-20210602173544564"></p>
<h1>JDBC代码实现</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.加载注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">// 2.创建数据库连接</span></span><br><span class="line">            String url = <span class="string">&quot;jdbc:mysql://localhost:3307/db_cy?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimerzone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true&quot;</span>;</span><br><span class="line">            conn = DriverManager.getConnection(url,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            <span class="comment">// 3.创建Statement对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">// 结果集</span></span><br><span class="line">            rs = stmt.executeQuery(<span class="string">&quot;select * from counterdetail&quot;</span>);</span><br><span class="line">            <span class="comment">// 4.遍历查询结果</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                Integer id = rs.getInt(<span class="number">1</span>);         <span class="comment">// JDBC中字段的索引是从1开始的，不是0</span></span><br><span class="line">                Integer ccounterid = rs.getInt(<span class="number">2</span>);</span><br><span class="line">                String cfoodname = rs.getString(<span class="number">3</span>);</span><br><span class="line">                String cnumber = rs.getString(<span class="number">4</span>);</span><br><span class="line">                Integer cprive = rs.getInt(<span class="number">5</span>);</span><br><span class="line">                System.out.println(id+<span class="string">&quot;-&quot;</span>+ccounterid+<span class="string">&quot;-&quot;</span>+cfoodname+<span class="string">&quot;-&quot;</span>+cnumber+<span class="string">&quot;-&quot;</span>+cprive);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 5.关闭连接，释放资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(stmt!=<span class="keyword">null</span>&amp;&amp;!conn.isClosed())&#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h1>JDBC的两种事务模型</h1>
<ul>
<li>
<p>自动提交事务模式：默认模式，没执行一次写操作SQL，自动提交事务。</p>
<p>conn.setAutoCommit(true)。无法保证数据一致性。</p>
</li>
<li>
<p>手动提交事务模式：</p>
</li>
</ul>
<p>显示调用commit()he rollback()</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210607210239674.png" alt="image-20210607210239674"></p>
<h1>Date日期对象处理</h1>
<p>JDBC 中获取到的日期使用java.sql.Date，其继承自java.util.Date。所以二者可以兼容</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210608105317030.png" alt="image-20210608105317030"></p>
<h1>连接池和JDBC</h1>
<p>什么是连接池？</p>
<p>数据库连接是一种关键的有限的昂贵的资源,这一点在多用户的网页应用程序中体现的尤为突出.对数据库连接的管理能显著影响到整个应用程序的伸缩性和健壮性,影响到程序的性能指标.数据库连接池正式针对这个问题提出来的.数据库连接池负责分配,管理和释放数据库连接,它允许应用程序重复使用一个现有的数据库连接,而不是重新建立一个</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20190214093729228.png" alt="img"></p>
<p>连接池产品：</p>
<p>阿里巴巴Druid连接池</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210608111547280.png" alt="image-20210608111547280"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driverClassName = com.mysql.cj.jdbc.Driver</span><br><span class="line">url = jdbc:mysql:<span class="comment">//localhost:3307/db_cy?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">username = root</span><br><span class="line">password = <span class="number">123456</span></span><br><span class="line">initialSize = <span class="number">20</span></span><br><span class="line">maxActive = <span class="number">20</span></span><br></pre></td></tr></table></figure>
<p>把initialSize和maxActive设置为相等，目的就是一开始就给系统分配好资源，避免出现重新分配资源的情况。</p>
<p>c3p0连接池：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210608151633616.png" alt="image-20210608151633616"></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>Kibana、Logstash配置设置</title>
    <url>/2022/01/14/Kibana%E3%80%81Logstash%E9%85%8D%E7%BD%AE%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1>kibana配置</h1>
<p>Kibana server 启动时从 kibana.yml 文件中读取配置属性。<br>
配置详细介绍：<a href="https://www.elastic.co/guide/cn/kibana/current/settings.html">https://www.elastic.co/guide/cn/kibana/current/settings.html</a></p>
<h2 id="地址相关的配置">地址相关的配置</h2>
<ul>
<li>server.basePath：如果启用了代理，指定 Kibana 的路径，该配置项只影响 Kibana 生成的 URLs，转发请求到 Kibana 时代理会移除基础路径值，该配置项不能以斜杠 (/)结尾。</li>
<li>pid.file：指定 Kibana 的进程 ID 文件的路径。</li>
<li>logging.dest：默认值: stdout 指定 Kibana 日志输出的文件。</li>
</ul>
<h1>Logstash配置</h1>
<p>Logstash配置实例：<a href="https://www.elastic.co/guide/en/logstash/current/configuration.html">https://www.elastic.co/guide/en/logstash/current/configuration.html</a><br>
博客：<a href="https://blog.csdn.net/zjcjava/article/details/99258682">https://blog.csdn.net/zjcjava/article/details/99258682</a></p>
<p>要配置 Logstash，您需要创建一个配置文件，该文件指定要使用的插件以及每个插件的设置。</p>
<h2 id="配置文件实例">配置文件实例</h2>
<p>xxx.conf</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    stdin &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">#过滤</span><br><span class="line">filter &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">        <span class="function"><span class="params">patterns_dir</span> =&gt;</span> [<span class="string">&quot;/home/keepgostudio/download/logstash-5.2.0/patterns&quot;</span>]</span><br><span class="line">        match =&gt; &#123;</span><br><span class="line">            <span class="string">&quot;message&quot;</span> =&gt; [<span class="string">&quot;%&#123;PARAMS_APACHELOG&#125;&quot;</span>, <span class="string">&quot;%&#123;NO_PARAMS_APACHELOG&#125;&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        remove_field =&gt; [<span class="string">&quot;host&quot;</span>, <span class="string">&quot;timestamp&quot;</span>, <span class="string">&quot;httpversion&quot;</span>, <span class="string">&quot;@version&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    kv &#123;</span><br><span class="line">        <span class="function"><span class="params">source</span> =&gt;</span> <span class="string">&quot;params&quot;</span></span><br><span class="line">        field_split =&gt; <span class="string">&quot;&amp;?&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    geoip &#123;</span><br><span class="line">        <span class="function"><span class="params">source</span> =&gt;</span> <span class="string">&quot;ip&quot;</span></span><br><span class="line">        fields =&gt; [<span class="string">&quot;country_name&quot;</span>, <span class="string">&quot;region_name&quot;</span>, <span class="string">&quot;city_name&quot;</span>, <span class="string">&quot;latitude&quot;</span>, <span class="string">&quot;longitude&quot;</span>]</span><br><span class="line">        target =&gt; <span class="string">&quot;location&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">	#logstash输出到elasticsearch</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        <span class="function"><span class="params">hosts</span> =&gt;</span> [<span class="string">&quot;192.168.1.44:9200&quot;</span>]      </span><br><span class="line">        index =&gt; <span class="string">&quot;logstash-test-%&#123;type&#125;-%&#123;host&#125;&quot;</span>        </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	#file &#123;                        #保存成文件</span><br><span class="line">    #    path =&gt; <span class="string">&quot;../data_test/%&#123;+yyyy&#125;/%&#123;+MM&#125;/%&#123;+dd&#125;/%&#123;host&#125;.log&quot;</span></span><br><span class="line">    #    codec =&gt; line &#123; <span class="function"><span class="params">format</span> =&gt;</span> <span class="string">&quot;custom format: %&#123;message&#125;&quot;</span>&#125;</span><br><span class="line">    #&#125;</span><br><span class="line">	#stdout &#123; </span><br><span class="line">	#	codec =&gt; rubydebug            # 将日志输出到当前的终端上显示</span><br><span class="line">	#&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行 logstash 并使用标志指定配置文件 -f</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/logstash -f xxx.conf</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2021/10/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>记录工作学习中遇到的Linux命令。</p>
<h1>Linux根目录</h1>
<p>Linux系统通过：<strong>cd  …</strong> 查看根目录。根目录的结构如下：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/1309603-20180414085210690-1122680628.png" alt="img"></p>
<p>分别代表的含义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、/- 根</span><br><span class="line">每一个文件和目录从根目录开始。只有root用户具有该目录下的写权限。请注意，/root是root用户的主目录，这</span><br><span class="line">与/.不一样</span><br><span class="line"></span><br><span class="line">2、/bin中 - 用户二进制文件</span><br><span class="line">包含二进制可执行文件。</span><br><span class="line">在单用户模式下，你需要使用的常见[linux](http://lib.csdn.net/base/linux)命令都位于此目录下。系统的</span><br><span class="line">所有用户使用的命令都设在这里。</span><br><span class="line">例如：ps、ls、ping、grep、cp</span><br><span class="line"></span><br><span class="line">3、/sbin目录 - 系统二进制文件</span><br><span class="line">就像/bin，/sbin同样也包含二进制可执行文件。</span><br><span class="line">但是，在这个目录下的linux命令通常由系统管理员使用，对系统进行维护。例如：iptables、reboot、fdisk、</span><br><span class="line">ifconfig、swapon命令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、/etc - 配置文件</span><br><span class="line">包含所有程序所需的配置文件。</span><br><span class="line">也包含了用于启动/停止单个程序的启动和关闭shell脚本。例如：/etc/resolv.conf、/etc/logrotate.conf</span><br><span class="line"></span><br><span class="line">5、/dev - 设备文件</span><br><span class="line">包含设备文件。</span><br><span class="line">这些包括终端设备、USB或连接到系统的任何设备。例如：/dev/tty1、/dev/usbmon0</span><br><span class="line"></span><br><span class="line">6、/proc - 进程信息</span><br><span class="line">包含系统进程的相关信息。</span><br><span class="line">这是一个虚拟的文件系统，包含有关正在运行的进程的信息。例如：/proc/&#123;pid&#125;目录中包含的与特定pid相关的信息。</span><br><span class="line">这是一个虚拟的文件系统，系统资源以文本信息形式存在。例如：/proc/uptime</span><br><span class="line"></span><br><span class="line">7、/var - 变量文件</span><br><span class="line">var代表变量文件。</span><br><span class="line">这个目录下可以找到内容可能增长的文件。</span><br><span class="line">这包括 - 系统日志文件（/var/log）;包和数据库文件（/var/lib）;电子邮件（/var/mail）;打印队列</span><br><span class="line">（/var/spool）;锁文件（/var/lock）;多次重新启动需要的临时文件（/var/tmp）;</span><br><span class="line"></span><br><span class="line">8、/tmp - 临时文件</span><br><span class="line">包含系统和用户创建的临时文件。</span><br><span class="line">当系统重新启动时，这个目录下的文件都将被删除。</span><br><span class="line"></span><br><span class="line">9、/usr - 用户程序</span><br><span class="line">包含二进制文件、库文件、文档和二级程序的源代码。</span><br><span class="line">/usr/bin中包含用户程序的二进制文件。如果你在/bin中找不到用户二进制文件，到/usr/bin目录看看。例如：</span><br><span class="line">at、awk、cc、less、scp。</span><br><span class="line">/usr/sbin中包含系统管理员的二进制文件。如果你在/sbin中找不到系统二进制文件，到/usr/sbin目录看看。例</span><br><span class="line">如：atd、cron、sshd、useradd、userdel。</span><br><span class="line">/usr/lib中包含了/usr/bin和/usr/sbin用到的库。</span><br><span class="line">/usr/local中包含了从源安装的用户程序。例如，当你从源安装Apache，它会在/usr/local/apache2中。</span><br><span class="line"></span><br><span class="line">10、/home - HOME目录</span><br><span class="line">所有用户用home目录来存储他们的个人档案。</span><br><span class="line">例如：/home/john、/home/nikita</span><br><span class="line"></span><br><span class="line">11、/boot - 引导加载程序文件</span><br><span class="line">包含引导加载程序相关的文件。</span><br><span class="line">内核的initrd、vmlinux、grub文件位于/boot下。</span><br><span class="line">例如：initrd.img-2.6.32-24-generic、vmlinuz-2.6.32-24-generic</span><br><span class="line"></span><br><span class="line">12、/lib - 系统库</span><br><span class="line">包含支持位于/bin和/sbin下的二进制文件的库文件.</span><br><span class="line">库文件名为 ld*或lib*.so.*</span><br><span class="line">例如：ld-2.11.1.so，libncurses.so.5.7</span><br><span class="line"></span><br><span class="line">13、/opt - 可选的附加应用程序</span><br><span class="line">opt代表可选的。</span><br><span class="line">包含从个别厂商的附加应用程序。</span><br><span class="line">附加应用程序应该安装在/opt/或者/opt/的子目录下。</span><br><span class="line"></span><br><span class="line">14、/mnt - 挂载目录</span><br><span class="line">临时安装目录，系统管理员可以挂载文件系统。</span><br><span class="line"></span><br><span class="line">15、/media - 可移动媒体设备</span><br><span class="line">用于挂载可移动设备的临时目录。</span><br><span class="line">举例来说，挂载CD-ROM的/media/cdrom，挂载软盘驱动器的/media/floppy;</span><br><span class="line"></span><br><span class="line">16、/srv - 服务数据</span><br><span class="line">srv代表服务。</span><br><span class="line">包含服务器特定服务相关的数据。</span><br><span class="line">例如，/srv/cvs包含cvs相关的数据。</span><br></pre></td></tr></table></figure>
<h1>Linux命令</h1>
<h2 id="字符串相关操作">字符串相关操作</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.grep         字符串查找（过滤）              例如： glance image-list | grep redis</span><br><span class="line"></span><br><span class="line">2.sed          字符串替换                          文件名 | sed &#x27;s/要被取代的字串/新的字串/g&#x27;</span><br><span class="line"></span><br><span class="line">3.awk          字符串分割                          </span><br><span class="line">每行按空格或TAB分割，输出文本中的1、4项    awk &#x27;&#123;print $1,$4&#125;&#x27; test.txt</span><br><span class="line"></span><br><span class="line">4.yum  提供查找、安装和删除软件</span><br><span class="line">yum [options] [command] [package ...]         yum  操作  命令  安装的包名</span><br><span class="line">https://www.runoob.com/linux/linux-yum.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="用户">用户</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.添加新的用户</span><br><span class="line">useradd 选项 用户名</span><br><span class="line"></span><br><span class="line">2.删除用户   -r把当前用户下的目录一起删除</span><br><span class="line">userdel -r sam</span><br><span class="line"></span><br><span class="line">3.修改用户</span><br><span class="line">usermod 选项 用户名</span><br><span class="line"></span><br><span class="line">4.修改密码</span><br><span class="line">passwd 选项 用户名</span><br><span class="line"></span><br><span class="line">5.查看test所在的用户组</span><br><span class="line">groups test</span><br><span class="line"></span><br><span class="line">6.创建用户组</span><br><span class="line">groupadd group_name</span><br><span class="line">删除</span><br><span class="line">groupdel</span><br><span class="line">修改</span><br><span class="line">groupmod</span><br><span class="line"></span><br><span class="line">7.查看用户登录日志</span><br><span class="line">last</span><br><span class="line"></span><br><span class="line">8.查看系统中的所有用户</span><br><span class="line">cat /etc/passwd</span><br><span class="line"></span><br><span class="line">9.查看系统所有的组</span><br><span class="line">cat /etc/group</span><br></pre></td></tr></table></figure>
<h2 id="系统相关操作">系统相关操作</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.查看Linux版本信息</span><br><span class="line">cat /proc/version</span><br><span class="line"></span><br><span class="line">2.cpu信息</span><br><span class="line">cat /proc/cpuinfo</span><br><span class="line"></span><br><span class="line">3.查看中断</span><br><span class="line">cat /proc/interrupts</span><br><span class="line"></span><br><span class="line">4.查看负载</span><br><span class="line">cat /proc/loadavg</span><br><span class="line"></span><br><span class="line">5.环境变量</span><br><span class="line">env</span><br><span class="line"></span><br><span class="line">6.查看系统运⾏时间、⽤户数、负载</span><br><span class="line">uptime</span><br><span class="line"></span><br><span class="line">7.查看内存容量、空闲内存量</span><br><span class="line">gerp MenTotal /proc/meninfo</span><br><span class="line">gerp MenFree /proc/meninfo</span><br><span class="line"></span><br><span class="line">8.查看进程</span><br><span class="line">top</span><br></pre></td></tr></table></figure>
<h2 id="磁盘相关">磁盘相关</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.查看磁盘使用情况</span><br><span class="line">df -h</span><br><span class="line"></span><br><span class="line">2.查看某个目录的使用情况</span><br><span class="line">du -sh /dir</span><br><span class="line"></span><br><span class="line">3.查看所有的磁盘分区</span><br><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>
<h2 id="进程管理">进程管理</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.查看所有进程</span><br><span class="line">ps -ef</span><br><span class="line"></span><br><span class="line">2.杀死进程</span><br><span class="line">kill -s name/id</span><br><span class="line"></span><br><span class="line">3.实时查看进程状态</span><br><span class="line">top</span><br></pre></td></tr></table></figure>
<h2 id="系统服务">系统服务</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.列出服务列表</span><br><span class="line">chkconfig --list</span><br><span class="line"></span><br><span class="line">2.服务相关操作</span><br><span class="line">service &lt;服务名&gt; &lt;操作&gt;</span><br><span class="line">systemctl &lt;操作&gt; &lt;服务名&gt;</span><br><span class="line"></span><br><span class="line">操作包括：</span><br><span class="line">status ： 状态</span><br><span class="line">start  ： 开启</span><br><span class="line">stop   ： 关闭</span><br><span class="line">restart： 重启</span><br><span class="line">enable ： 开启自启动</span><br><span class="line">disable： 关闭自启动</span><br></pre></td></tr></table></figure>
<h2 id="文件和目录操作">文件和目录操作</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.新建文件夹</span><br><span class="line">mkdir fileName</span><br><span class="line"></span><br><span class="line">2.删除文件名</span><br><span class="line">rm -f fileName</span><br><span class="line"></span><br><span class="line">3.目录操作</span><br><span class="line">mv         重命名、移动文件夹</span><br><span class="line"></span><br><span class="line">cp         复制文件</span><br><span class="line"></span><br><span class="line">find       查找                     find / -name file1    从根目录开始搜索文件</span><br><span class="line"></span><br><span class="line">cat        文件查看</span><br><span class="line"></span><br><span class="line">vi|vim     文件修改           i：插入模式      esc：退出到命令模式      ：wq   保存退出</span><br><span class="line"></span><br><span class="line">4.查看文件前两行</span><br><span class="line">head -2 filename       </span><br><span class="line"></span><br><span class="line">5.查看文件后两行</span><br><span class="line">tail -2 filename       </span><br><span class="line"></span><br><span class="line">6.将hello.txt⽂件中的s1替换成s2</span><br><span class="line">sed &#x27;s/s1/s2/g&#x27; hello.txt</span><br><span class="line"></span><br><span class="line">7.合并文件夹</span><br><span class="line">paste file1 file2 </span><br><span class="line"></span><br><span class="line">8.比较两个文件之间的内容</span><br><span class="line">comm -1 file1 file2      去除文件1中的所有内容</span><br><span class="line">comm -2 file1 file2      去除文件2中的所有内容</span><br><span class="line">comm -3 file1 file2      去除两个文件共有的部分</span><br></pre></td></tr></table></figure>
<h2 id="打包和压缩">打包和压缩</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.zip打包，解压</span><br><span class="line">zip  unzip</span><br><span class="line"></span><br><span class="line">2.tar</span><br><span class="line">tar -cvf xxx.tar file     创建压缩文件</span><br><span class="line">tar -xvf xxx.tar          解压</span><br></pre></td></tr></table></figure>
<p>zip的常用参数</p>
<table>
<thead>
<tr>
<th>-m</th>
<th>将文件压缩后，删除原文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>-o</td>
<td>将压缩文件内的所有文件的最新变动时间设为压缩的时间</td>
</tr>
<tr>
<td>-q</td>
<td>安静模式，在压缩的时候不显示指令执行的过程</td>
</tr>
<tr>
<td>-r</td>
<td>递归压缩，将自定目录下的所有子文件以及文件一起处理</td>
</tr>
<tr>
<td>-x</td>
<td>”文件列表“，压缩时排除文件列表中的文件</td>
</tr>
</tbody>
</table>
<h2 id="yum包管理">yum包管理</h2>
<img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211222110156561.png" style="zoom:150%;" />
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenStack</title>
    <url>/2021/12/03/OpenStack/</url>
    <content><![CDATA[<p>OpenStack是一个IaaS的解决方案。使用Python开发的；OpenStack是一个云操作系统，通过数据中心可控制大型的计算、存储、网络等资源池；OpenStack主要使用池化虚拟资源来构建和管理私有云及公共云。</p>
<span id="more"></span>
<h1>OpenStack</h1>
<p>云计算：</p>
<ul>
<li>服务提供商构造可配置的计算资源共享池，用户通过网络进行访问。</li>
</ul>
<p>IaaS：基础设施即服务。公有云，私有云和混合云</p>
<p>搭建私有云用到的的就是OpenStack</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/v2-39b400aec8ef07159f8ee043637f8f29_b.jpg" alt="img"></p>
<h1>1.简介</h1>
<p>OpenStack是一个IaaS的解决方案。使用Python开发的。</p>
<p>OpenStack是一个云操作系统，通过数据中心可控制大型的计算、存储、网络等资源池。</p>
<p>主要使用池化虚拟资源来构建和管理私有云及公共云</p>
<h1>2.架构</h1>
<h2 id="2-1-基础架构">2.1 基础架构</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/v2-8f583fec34a56f08168a51d34dc5cf3c_b.jpg" alt="img"></p>
<h2 id="2-2-组件">2.2 组件</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/v2-84526d98a2214fb9a09ff9e652cdb865_b.jpg" alt="img"></p>
<ul>
<li><strong>Nova</strong></li>
</ul>
<p><strong>Nova</strong>是整个Openstack里面最核心的组件。OpenStack云实例生命期所需的各种动作都将由Nova进行处理和支撑，它负责管理整个云的计算资源、网络、授权及测度。</p>
<ul>
<li><strong>Keystone</strong>
<ul>
<li>用户身份验证。</li>
<li>访问请求控制。</li>
<li>注册表服务：OpenStack需要注册到keystone中</li>
<li>身份验证引擎：决定用户拥有哪些权限。</li>
</ul>
</li>
</ul>
<p>Keystone为所有的OpenStack组件<strong>提供认证和访问策略服务</strong>，主要对（但不限于）Swift、Glance、Nova等进行认证与授权。</p>
<ul>
<li><strong>Horizon</strong></li>
</ul>
<p>Horizon是一个用以管理、控制OpenStack服务的<strong>Web控制面板</strong>。用户可以通过这个界面对OpenStack状态进行查看和管理。</p>
<ul>
<li><strong>Quantum</strong></li>
</ul>
<p>配置vlan，节点配置</p>
<ul>
<li><strong>Glance</strong></li>
</ul>
<p>管理虚拟机镜像，创建后端盘</p>
<ul>
<li><strong>Swift</strong></li>
</ul>
<p>对象存储相关。</p>
<ul>
<li><strong>Cinder</strong> 块存储服务模块</li>
</ul>
<p>管理所有的块存储设备，为VM服务。</p>
<ul>
<li><strong>Neutorn</strong></li>
</ul>
<p>网络服务模块</p>
<h2 id="2-3-组件之间的关系">2.3 组件之间的关系</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/1058767-20170208183135541-7440272.png" alt="img"></p>
<h2 id="2-4-访问流程">2.4 访问流程</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/1058767-20170208183642822-375913603.png" alt="img"></p>
<h1>3.OpenStack创建实例</h1>
<h3 id="3-1流程细节">3.1流程细节</h3>
<ol>
<li>通过登录界面dashboard或命令行CLI通过<code>RESTful API</code>向<code>keystone</code>获取认证信息。</li>
<li><code>keystone</code><strong>通过用户请求认证信息，并生成<code>auth-token</code>返回给对应的认证请求</strong>。</li>
</ol>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20190824160000868.png" alt="在这里插入图片描述"></p>
<ol start="3">
<li>然后携带<code>auth-token</code>通过<code>RESTful API</code>向<code>nova-api</code>发送一个<code>boot instance</code>的请求。</li>
</ol>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20190824150425310.png" alt="在这里插入图片描述"></p>
<ol start="4">
<li>
<p><code>nova-api</code>接受请求后向<code>keystone</code>发送认证请求，查看token是否为有效用户和token。</p>
</li>
<li>
<p>keystone验证token是否有效，将结果返回给<code>nova-api</code>。</p>
</li>
</ol>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20190824150749828.png" alt="在这里插入图片描述"></p>
<ol start="6">
<li>
<p>通过认证后nova-api和数据库通讯，初始化新建虚拟机的数据库记录。<br>
<img src="http://r9jy0okua.bkt.clouddn.com/img/2019082415150929.png" alt="在这里插入图片描述"></p>
</li>
<li>
<p><code>nova-api</code>调用<code>rabbitmq</code>，向<code>nova-scheduler</code>请求是否有创建虚拟机的资源(node主机)。</p>
</li>
<li>
<p><code>nova-scheduler</code>进程侦听消息队列，获取nova-api的请求。</p>
</li>
</ol>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20190824152312712.png" alt="在这里插入图片描述"></p>
<ol start="9">
<li><code>nova-scheduler</code>通过查询nova数据库中计算资源的情况，并通过调度算法计算符合虚拟机创建需要的主机。</li>
<li>对于有符合虚拟机创建的主机，<code>nova-scheduler</code>更新数据库中虚拟机对应的物理主机信息。</li>
</ol>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20190824202009508.png" alt="在这里插入图片描述"></p>
<ol start="11">
<li><code>nova-scheduler</code>通过rpc调用向<code>nova-compute</code>发送对应的创建虚拟机请求的消息。<br>
<code>nova-compute</code>会从对应的消息队列中获取创建虚拟机请求的消息。</li>
</ol>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/2019082415300566.png" alt="在这里插入图片描述"></p>
<ol start="12">
<li><code>nova-compute</code>通过rpc调用向<code>nova-conductor</code>请求获取虚拟机消息。（Flavor）<br>
<code>nova-conductor</code>从消息队队列中拿到<code>nova-compute</code>请求消息。</li>
</ol>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20190824153509883.png" alt=""></p>
<ol start="13">
<li><code>nova-conductor</code>根据消息查询虚拟机对应的信息。<br>
<code>nova-conductor</code>从数据库中获得虚拟机对应信息。</li>
</ol>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20190824153924205.png" alt="在这里插入图片描述"></p>
<ol start="14">
<li><code>nova-conductor</code>把虚拟机信息通过消息的方式发送到消息队列中。<br>
<code>nova-compute</code>从对应的消息队列中获取虚拟机信息消息。</li>
</ol>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20190824155934803.png" alt=""></p>
<ol start="15">
<li><code>nova-compute</code>请求<code>glance-api</code>获取创建虚拟机所需要镜像。</li>
</ol>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20190824161529433.png" alt="在这里插入图片描述"></p>
<ol start="16">
<li>
<p><code>glance-api</code>向<code>keystone</code>认证token是否有效，并返回验证结果。<br>
<img src="http://r9jy0okua.bkt.clouddn.com/img/20190824161516324.png" alt="在这里插入图片描述"></p>
</li>
<li>
<p>token验证通过，<code>nova-compute</code>获得虚拟机镜像信息(URL)。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20190824161927287.png" alt="在这里插入图片描述"></p>
</li>
<li>
<p><code>nova-compute</code>请求<code>neutron-server</code>获取创建虚拟机所需要的网络信息。</p>
</li>
<li>
<p><code>neutron-server</code>向keystone认证token是否有效，并返回验证结果。</p>
</li>
<li>
<p>token验证通过，<code>nova-compute</code>获得虚拟机网络信息。</p>
</li>
</ol>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20190824162349681.png" alt="在这里插入图片描述"></p>
<ol start="21">
<li><code>nova-compute</code>请求<code>cinder-api</code>获取创建虚拟机所需要的持久化存储信息。</li>
<li><code>cinder-api</code>向keystone认证token是否有效，并返回验证结果。</li>
<li>token验证通过，<code>nova-compute</code>获得虚拟机持久化存储信息。</li>
</ol>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20190824164929553.png" alt="在这里插入图片描述"></p>
<ol start="24">
<li><code>nova-compute</code>根据instance的信息调用配置的虚拟化驱动来创建虚拟机。</li>
</ol>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20190824164637115.png" alt="在这里插入图片描述"></p>
<h3 id="3-2总流程图">3.2总流程图</h3>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20190824205144386.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>云计算</category>
      </categories>
      <tags>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis主动备份</title>
    <url>/2022/01/14/Redis%E4%B8%BB%E5%8A%A8%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<p>需求：Redis主动备份到某个路径下。</p>
<ul>
<li>分别支持rdb和AOF两种模式</li>
<li>单机模式，主从模式，集群模式</li>
</ul>
<h1>数据备份</h1>
<p>AOF和RDB</p>
<p>Redis的所有数据都保存在内存中，然后不定期的通过异步方式保存到磁盘中（RDB）；也可以把每一次数据变化都写入到append only file （AOF）里面（全持久化模式）<br>
由于Redis的数据存储在内存中，如果没有配置持久化，redis重启后，数据就会丢失。如果开启了持久化，重启后数据会依然存在，Redis支持两种持久化方式</p>
<p><strong>注意</strong>：</p>
<p>同时开启AOF和RDB会使用AOF文件进行数据恢复，即使没有AOF文件，也是先创建一个空的AOF文件，然后根据空的AOF文件去备份数据。</p>
<p>持久化如果需要AOF和RDB同时执行的方案：</p>
<ol>
<li>先在配置文件中关闭AOF备份，但是要开启RDB备份。</li>
<li>将RDB文件复制到备份的路径中，同时启动redis集群。</li>
<li>在客户端的命令行中使用命令<code>config set appendonly yes</code></li>
<li>关闭redis集群，发现生成了AOF文件。</li>
<li>再次重启redis集群，此时又使用AOF文件进行备份。这样就同时使用了AOF和RDB两种备份方式。</li>
</ol>
<h2 id="RDB持久化">RDB持久化</h2>
<p>将Redis内存中的数据在指定的时间间隔内将数据集快照写入磁盘，默认的持久化方式，<br>
触发方式分为手动触发和自动触发</p>
<ol>
<li>手动触发</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">save</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>自动触发</li>
</ol>
<p>在配置文件中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">save 900 1       #900秒内如果超过1个key被修改，则发起快照保存</span><br><span class="line">save 300 10      #300秒内如果有超过10key被修改，则发起快照保存</span><br><span class="line">save 60 100000</span><br></pre></td></tr></table></figure>
<h2 id="AOF持久化">AOF持久化</h2>
<p>将Redis的操作日志以追加的方式写入文件<br>
AOF持久化以日志的形式记录服务器所处理的每一个写、删除操作，查询操作不会记录，以文本的方式记录，可以打开文件看到详细的操作记录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">appendonly yes        #开启AOF备份   </span><br></pre></td></tr></table></figure>
<ol>
<li>主动备份</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">save</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>自动备份</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">appendfsync always            #每次发生修改都会写入AOF文件</span><br><span class="line">appendfsync everysec          #每秒发生修改就下入AOF文件</span><br><span class="line">appendfsync no                #数据写入依靠操作系统来决定</span><br></pre></td></tr></table></figure>
<h1>Redis单机模式</h1>
<p>导入jedis依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jedis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>方法调研：</p>
<ol>
<li>临时修改redis的配置文件中的dir参数。</li>
<li>调用save方法数据备份到dir的地址中。</li>
<li>将dir参数修改回原来的参数。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisSave</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redisTestBackups</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String newUrl = <span class="string">&quot;F:\redis\data&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>))&#123;</span><br><span class="line">            <span class="comment">//得到旧地址</span></span><br><span class="line">            List&lt;String&gt; listDir = jedis.configGet(<span class="string">&quot;dir&quot;</span>);</span><br><span class="line">            String oldUrl = listDir.get(<span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//得到旧的appendonly配置</span></span><br><span class="line">            List&lt;String&gt; listAppendonly = jedis.configGet(<span class="string">&quot;appendonly&quot;</span>);</span><br><span class="line">            String oldAppendonly = listAppendonly.get(<span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//1.临时修改配置文件</span></span><br><span class="line">            jedis.configSet(<span class="string">&quot;dir&quot;</span>,newUrl);</span><br><span class="line">            jedis.configSet(<span class="string">&quot;appendonly&quot;</span>,<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//2.数据备份，同时备份AOF和RDB</span></span><br><span class="line">            jedis.save();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//3.将临时配置重新修改回来</span></span><br><span class="line">            jedis.configSet(<span class="string">&quot;dir&quot;</span>,oldUrl);</span><br><span class="line">            jedis.configSet(<span class="string">&quot;appendonly&quot;</span>,oldAppendonly);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (JedisException e)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="问题">问题</h2>
<p>并发问题：当一个线程把dir临时修改后，此时如果有另外一个线程访问此节点上的redis，拿到的是修改后的地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.synchronize包裹代码块</span><br></pre></td></tr></table></figure>
<h1>Redis集群模式</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1.主从复制</span><br><span class="line"></span><br><span class="line">#2.sentinel模式</span><br><span class="line"></span><br><span class="line">#3.cluster模式</span><br></pre></td></tr></table></figure>
<h2 id="主从复制">主从复制</h2>
<p>主从模式是三种模式中最简单的，在主从复制中，数据库分为两类：主数据库(master)和从数据库(slave)。</p>
<p>主从模式的优点：</p>
<ul>
<li>主数据库可以进行读写操作，当<strong>读写操作导致数据变化时会自动将数据同步给从数据库</strong></li>
<li>从数据库一般都是只读的，并且接收主数据库同步过来的数据</li>
<li>一个master可以拥有多个slave，但是一个slave只能对应一个master</li>
<li>slave挂了不影响其他slave的读和master的读和写，重新启动后会将数据从master同步过来</li>
<li>master挂了以后，不影响slave的读，但redis不再提供写服务，master重启后redis将重新对外提供写服务</li>
<li>master挂了以后，不会在slave节点中重新选一个master</li>
</ul>
<p><strong>工作机制：</strong></p>
<p>当slave启动后，主动向master发送SYNC命令。master接收到SYNC命令后在后台保存快照（RDB持久化）和缓存保存快照这段时间的命令，然后将保存的快照文件和缓存的命令发送给slave。slave接收到快照文件和命令后加载快照文件和缓存的执行命令。</p>
<p>复制初始化后，master每次接收到的写命令都会同步发送给slave，保证主从数据一致性。</p>
<h2 id="sentinel模式">sentinel模式</h2>
<p>主从模式的弊端就是不具备高可用性，当master挂掉以后，Redis将不能再对外提供写入操作，因此sentinel应运而生。</p>
<p>sentinel中文含义为哨兵，顾名思义，它的作用就是监控redis集群的运行状况。</p>
<p><strong>哨兵模式的优点：</strong></p>
<ul>
<li>
<p>sentinel模式是建立在主从模式的基础上，如果只有一个Redis节点，sentinel就没有任何意义</p>
</li>
<li>
<p>当master挂了以后，sentinel会在slave中选择一个做为master，并修改它们的配置文件，其他slave的配置文件也会被修改，比如slaveof属性会指向新的master</p>
</li>
<li>
<p>当master重新启动后，它将不再是master而是做为slave接收新的master的同步数据</p>
</li>
<li>
<p>sentinel因为也是一个进程有挂掉的可能，所以sentinel也会启动多个形成一个sentinel集群</p>
</li>
<li>
<p>多sentinel配置的时候，sentinel之间也会自动监控</p>
</li>
<li>
<p>当主从模式配置密码时，sentinel也会同步将配置信息修改到配置文件中，不需要担心</p>
</li>
<li>
<p>一个sentinel或sentinel集群可以管理多个主从Redis，多个sentinel也可以监控同一个redis</p>
</li>
<li>
<p>sentinel最好不要和Redis部署在同一台机器，不然Redis的服务器挂了以后，sentinel也挂了</p>
</li>
</ul>
<p><strong>工作机制：</strong></p>
<ol>
<li>
<p>每个sentinel以每秒钟一次的频率向它所知的master，slave以及其他sentinel实例发送一个 PING 命令</p>
</li>
<li>
<p>如果一个实例距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被sentinel标记为主观下线。</p>
</li>
<li>
<p>如果一个master被标记为主观下线，则正在监视这个master的所有sentinel要以每秒一次的频率确认master的确进入了主观下线状态</p>
</li>
<li>
<p>当有足够数量的sentinel（大于等于配置文件指定的值）在指定的时间范围内确认master的确进入了主观下线状态， 则master会被标记为客观下线</p>
</li>
<li>
<p>在一般情况下， 每个sentinel会以每 10 秒一次的频率向它已知的所有master，slave发送 INFO 命令</p>
</li>
<li>
<p>当master被sentinel标记为客观下线时，sentinel向下线的master的所有slave发送 INFO 命令的频率会从 10 秒一次改为 1 秒一次</p>
</li>
<li>
<p>若没有足够数量的sentinel同意master已经下线，master的客观下线状态就会被移除；<br>
若master重新向sentinel的 PING 命令返回有效回复，master的主观下线状态就会被移除</p>
</li>
</ol>
<p>当使用sentinel模式的时候，客户端就不要直接连接Redis，而是连接sentinel的ip和port，由sentinel来提供具体的可提供服务的Redis实现，这样当master节点挂掉以后，sentinel就会感知并将新的master节点提供给使用者。</p>
<h2 id="cluster模式">cluster模式</h2>
<p>sentinel模式基本可以满足一般生产的需求，具备高可用性。但是当数据量过大到一台服务器存放不下的情况时，主从模式或sentinel模式就不能满足需求了，这个时候需要对存储的数据进行分片，将数据存储到多个Redis实例中。cluster模式的出现就是为了解决单机Redis容量有限的问题，将Redis的数据根据一定的规则分配到多台机器。</p>
<p>cluster可以说是sentinel和主从模式的结合体，通过cluster可以实现主从和master重选功能，所以如果配置两个副本三个分片的话，就需要六个Redis实例。因为Redis的数据是根据一定规则分配到cluster的不同机器的，当数据量过大时，可以新增机器进行扩容。</p>
<p>使用集群，只需要将redis配置文件中的cluster-enable配置打开即可。每个集群中至少需要三个主数据库才能正常运行，新增节点非常方便。</p>
<p><strong>集群模式的优点</strong>：</p>
<ul>
<li>多个redis节点网络互联，数据共享</li>
<li>所有的节点都是一主一从（也可以是一主多从），其中从不提供服务，仅作为备用</li>
<li>不支持同时处理多个key（如MSET/MGET），因为redis需要把key均匀分布在各个节点上，<br>
并发量很高的情况下同时创建key-value会降低性能并导致不可预测的行为</li>
<li>支持在线增加、删除节点</li>
<li>客户端可以连接任何一个主节点进行读写</li>
</ul>
<p>redis cluster集群是<strong>去中心化</strong>的，每个节点都是平等的，连接哪个节点都可以获取和设置数据。</p>
<p>当然，平等指的是master节点，因为<strong>slave节点根本不提供服务，只是作为对应master节点的一个备份</strong>。</p>
<h3 id="集群数据迁移"><strong>集群数据迁移</strong></h3>
<p>BGREWRITEAOF命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据迁移：使用BGREWRITEAOF命令为所有 N 个 master 生成一个仅附加文件，并等待 AOF 文件完全生成。</span><br></pre></td></tr></table></figure>
<p><strong>实现方式原理</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前期准备：</span><br><span class="line"></span><br><span class="line">1. 停掉所有节点(先备后主)，然后删除所有节点下的appendonly.aof和dump.rdb文件，再动所有主节点，停掉所有节点（有密码的话，最好先不要用密码）</span><br><span class="line"></span><br><span class="line">2. 确定目标库所有节点appendonly为yes，将所有槽位分配到一个主节点</span><br><span class="line"></span><br><span class="line">3. 停掉拥有所有槽位的那个节点，等待appendonly.aof文件</span><br><span class="line"></span><br><span class="line">停业务迁移：</span><br><span class="line"></span><br><span class="line">4. 停业务，此时可以同步对所有应用修改redis配置（钉钉，管理门户，搜索引擎）</span><br><span class="line"></span><br><span class="line">5. 源库手动触发bgrewriteaof      源端(２分钟)</span><br><span class="line"></span><br><span class="line">6. 复制发送备份appendonly.aof　      源端，目标端（５分钟）</span><br><span class="line"></span><br><span class="line">7. 启动目标节点            目标端（５分钟）</span><br><span class="line"></span><br><span class="line">8. reshared槽位，启动备节点，设置密码 目标端（5分钟）</span><br><span class="line"></span><br><span class="line">恢复应用：</span><br><span class="line"></span><br><span class="line">9. 启动所有应用，并验证</span><br></pre></td></tr></table></figure>
<h3 id="集群数据迁移工具">集群数据迁移工具</h3>
<p>redis-shake</p>
<ul>
<li>数据包地址：<a href="https://github.com/alibaba/RedisShake/tree/develop/src/redis-shake">https://github.com/alibaba/RedisShake/tree/develop/src/redis-shake</a></li>
<li>中文文档：<a href="https://developer.aliyun.com/article/691794">https://developer.aliyun.com/article/691794</a></li>
</ul>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot容器探针</title>
    <url>/2022/01/05/SpringBoot%E5%AE%B9%E5%99%A8%E6%8E%A2%E9%92%88/</url>
    <content><![CDATA[<p>知识点：</p>
<ol>
<li>kubernetes的存活探针livenessProbe；</li>
<li>kubernetes的就绪探针readinessProbe；</li>
<li>实战：SpringBoot的actuator；</li>
</ol>
<h1>存活探针livenessProbe</h1>
<p>作用：kubelet 使用存活探针livenessProbe来知道什么时候要重启容器；</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20200607183703896.png" alt="在这里插入图片描述"></p>
<p><strong>存活探针的判断方法：</strong></p>
<p>kubernetes要求业务容器提供一个名为livenessProbe的地址，kubernetes会定时访问该地址，如果该地址的返回码不在200到400之间，kubernetes认为该容器不健康，会杀死该容器重建新的容器，这个地址就是存活探针；</p>
<h1>就绪探针readinessProbe</h1>
<p>作用：判断容器什么时候会对外提供服务。</p>
<p>简单的说，就绪探针正常的容器，k8s就认为是可以对外提供服务的，相应的请求也会被调度到该容器上来。</p>
<p><strong>就绪探针的判断方法：</strong></p>
<p>kubernetes要求业务容器提供一个名为readinessProbe的地址，kubernetes会定时访问该地址，如果该地址的返回码不在200到400之间，kubernetes认为该容器无法对外提供服务，不会把请求调度到该容器，这个地址就是就绪探针；</p>
<h1>探针状态信息</h1>
<p>Spring Boot<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application.application-events-and-listeners">在启动和关闭期间</a>发布<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application.application-events-and-listeners">应用程序事件</a>，探测器可以侦听此类事件并公开<code>AvailabilityState</code>信息。</p>
<p>下表显示了<code>AvailabilityState</code>HTTP 连接器在不同阶段的状态。</p>
<p>当 Spring Boot 应用程序启动时：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220105173741285.png" alt="image-20220105173741285"></p>
<p>当 Spring Boot 应用程序关闭时：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220105173849079.png" alt="image-20220105173849079"></p>
<h1>实战：SpringBoot 中的actuator探针</h1>
<h2 id="基本配置">基本配置</h2>
<p>导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>SpringBoot是通过环境变量<strong>SERVICE_HOST</strong>和<strong>SERVICE_PORT</strong>来判断k8s环境的。</p>
<p>在本地的话，需要添加k8s 的环境变量。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220105174302177.png" alt="image-20220105174302177"></p>
<p>添加配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#****************************health 健康检查***************************</span></span><br><span class="line"><span class="comment">#开放所有页面节点  默认只开启了health、info两个节点</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span> = <span class="string">*</span></span><br><span class="line"><span class="comment">#显示健康具体信息  默认不会显示详细信息</span></span><br><span class="line"><span class="meta">management.endpoint.health.show-details</span> = <span class="string">always</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#关闭所有的节点，然后单独开启某个节点</span></span><br><span class="line"><span class="comment">#management.endpoints.enabled-by-default=false</span></span><br><span class="line"><span class="comment">#management.endpoint.info.enabled=true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#停止通过JMX公开所有端点并仅公开health和info端点</span></span><br><span class="line"><span class="comment">#management.endpoints.jmx.exposure.include=health,info</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置端口缓存时间</span></span><br><span class="line"><span class="comment">#management.endpoint.beans.cache.time-to-live=10s</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置端口的访问路径</span></span><br><span class="line"><span class="meta">management.endpoints.web.base-path</span>=<span class="string">/</span></span><br><span class="line"><span class="meta">management.endpoints.web.path-mapping.health</span>=<span class="string">healthz</span></span><br></pre></td></tr></table></figure>
<p>也可以配置探针信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">readinessProbe:</span></span><br><span class="line">  <span class="attr">httpGet:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/healthz/readiness</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">livenessProbe:</span></span><br><span class="line">  <span class="attr">httpGet:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/healthz/liveness</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">130</span></span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>此时访问：<a href="http://localhost:8080/healthz%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9A%84%E5%88%B0%E6%8C%87%E9%92%88%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF%E3%80%82">http://localhost:8080/healthz，可以的到指针的详细信息。</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;UP&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;components&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;diskSpace&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;UP&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;details&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;total&quot;</span>: <span class="number">196233654272</span>,</span><br><span class="line">                <span class="attr">&quot;free&quot;</span>: <span class="number">24938758144</span>,</span><br><span class="line">                <span class="attr">&quot;threshold&quot;</span>: <span class="number">10485760</span>,</span><br><span class="line">                <span class="attr">&quot;exists&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;livenessState&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;UP&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;ping&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;UP&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;readinessState&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;UP&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;groups&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;liveness&quot;</span>,</span><br><span class="line">        <span class="string">&quot;readiness&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="读取探针状态">读取探针状态</h2>
<p>applicationAvailability自动注入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kai.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.availability.ApplicationAvailability;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/stateReader&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateReaderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationAvailability applicationAvailability;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">state</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;livenessState : &quot;</span> + applicationAvailability.getLivenessState()</span><br><span class="line">                + <span class="string">&quot;\nreadinessState : &quot;</span> + applicationAvailability.getReadinessState()</span><br><span class="line">                + <span class="string">&quot;\n&quot;</span> + <span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="监听探针变化">监听探针变化</h2>
<p>探针监听类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kai.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.availability.AvailabilityChangeEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.availability.AvailabilityState;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听系统事件的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AvailabilityListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于 spring 的事件监听机制，监听系统的消息</span></span><br><span class="line"><span class="comment">     * 当监听到 AvailabilityChangeEvent 事件会触发此方法的调用</span></span><br><span class="line"><span class="comment">     * 这里使用日志记录事件的状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStateChange</span><span class="params">(AvailabilityChangeEvent&lt;? extends AvailabilityState&gt; event)</span> </span>&#123;</span><br><span class="line">        System.out.println(event.getState());</span><br><span class="line">        log.info(event.getState().getClass().getSimpleName() + <span class="string">&quot;: &quot;</span> + event.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>探针状态修改控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kai.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.availability.AvailabilityChangeEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.availability.LivenessState;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.availability.ReadinessState;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试修改状态的 controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/state&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateChangeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将存活状态改为 BROKEN</span></span><br><span class="line"><span class="comment">     * 这会导致 k8s 杀死 pod，并根据重启策略重启 pod</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;broken&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">broken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AvailabilityChangeEvent.publish(applicationEventPublisher, <span class="keyword">this</span>, LivenessState.BROKEN);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success broken, &quot;</span> + <span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将存活状态修改为 correct</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;correct&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">correct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AvailabilityChangeEvent.publish(applicationEventPublisher, <span class="keyword">this</span>, LivenessState.CORRECT);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success correct, &quot;</span> + <span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将就绪状态修改为 ACCEPTING_TRAFFIC (接受流量)</span></span><br><span class="line"><span class="comment">     * k8s 会将外部请求转发到此 pod</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;accept&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">accept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AvailabilityChangeEvent.publish(applicationEventPublisher, <span class="keyword">this</span>, ReadinessState.ACCEPTING_TRAFFIC);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success accept, &quot;</span> + <span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将就绪状态修改为 REFUSING_TRAFFIC</span></span><br><span class="line"><span class="comment">     * k8s 通过将 service 对应的后端 endpoint 中此 pod 的ip移除来拒绝外部请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;refuse&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">refuse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AvailabilityChangeEvent.publish(applicationEventPublisher, <span class="keyword">this</span>, ReadinessState.REFUSING_TRAFFIC);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success refuse, &quot;</span> + <span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>docker:基础篇</title>
    <url>/2021/12/07/docker-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[<p>Docker是一个开元的应用<strong>容器</strong>引擎。Doker可以让开发者打包他们的应用以及依赖包导一个轻量级、可移植的容器中，然后发布到任何的Linux机器中，也可以实现虚拟化。</p>
<span id="more"></span>
<h1>基本概述</h1>
<p>Docker是一个开元的应用<strong>容器</strong>引擎。</p>
<p>Doker可以让开发者打包他们的应用以及依赖包导一个轻量级、可移植的容器中，然后发布到任何的Linux机器中，也可以实现虚拟化。</p>
<h2 id="Docker的应用场景">Docker的应用场景</h2>
<ol>
<li>Web应用的<strong>自动化打包和发布。</strong></li>
<li>自动化测试和持续继承、发布。</li>
<li>在<strong>微服务环境中调试和部署数据库及其他后台应用</strong>。</li>
<li>从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。（没看懂）</li>
</ol>
<h2 id="Docker的优点">Docker的优点</h2>
<p>Docker是一个用于开发，交付和运行应用程序的开放平台。</p>
<p>Docker可以将应用程序与基础架构分开。从而可以快速交付软件。</p>
<p>借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。</p>
<p>通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p>
<ul>
<li>快速，一致的交付您的应用程序。</li>
<li>响应式部署和扩展。</li>
<li>在同一硬件上运行更多工作负载。</li>
</ul>
<h1>Docker架构</h1>
<h2 id="镜像、容器和仓库">镜像、容器和仓库</h2>
<p>Docker包括三个基础概念：</p>
<ul>
<li>镜像：Docker镜像，相当于一个root文件系统。</li>
<li>容器：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li>
<li>仓库：仓库一看做是一个镜像管理中心，用来保存镜像。</li>
</ul>
<p>注意：</p>
<p>Docker使用客户端-服务端（c/s）架构模式，使用远程API来管理和创建爱你Docker容器。</p>
<p>Docker容器通过Docker镜像来创建。</p>
<p>Docker中镜像与容器的关系类比到面向对象中：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211207095216035.png" alt="image-20211207095216035"></p>
<h2 id="Docker架构图">Docker架构图</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211207100006642.png" alt="image-20211207100006642"></p>
<table>
<thead>
<tr>
<th style="text-align:left">概念</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Docker 镜像(Images)</td>
<td style="text-align:left">Docker 镜像是用于创建 Docker 容器的模板。</td>
</tr>
<tr>
<td style="text-align:left">Docker 容器(Container)</td>
<td style="text-align:left">容器是独立运行的一个或一组应用，是镜像运行时的实体。</td>
</tr>
<tr>
<td style="text-align:left">Docker 客户端(Client)</td>
<td style="text-align:left">Docker 客户端通过命令行或者其他工具使用 Docker SDK与 Docker 的守护进程（daemon）通信。</td>
</tr>
<tr>
<td style="text-align:left">Docker 主机(Host)</td>
<td style="text-align:left">一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。</td>
</tr>
<tr>
<td style="text-align:left">Docker Registry</td>
<td style="text-align:left">Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub提供了庞大的镜像集合供使用。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。                                                                           我们可以通过 <strong>&lt;仓库名&gt;:&lt;标签&gt;</strong> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <strong>latest</strong> 作为默认标签。</td>
</tr>
<tr>
<td style="text-align:left">Docker Machine</td>
<td style="text-align:left">Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。</td>
</tr>
</tbody>
</table>
<h1>CentOS系统安装Docker</h1>
<p>一键安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class="line"></span><br><span class="line">国内网站安装</span><br><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>
<p>安装成功之后查看Docker版本号：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211207101754640.png" alt="image-20211207101754640"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service docker start      //启动docker service</span><br></pre></td></tr></table></figure>
<h1>Docker的使用</h1>
<h2 id="hello-world">hello world</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run ubuntu:15.10 /bin/echo &quot;Hello world&quot;</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211207111735390.png" alt="image-20211207111735390"></p>
<p>参数解析：</p>
<ul>
<li><strong>docker:</strong> Docker 的二进制执行文件。</li>
<li><strong>run:</strong> 与前面的 docker 组合来运行一个容器。</li>
<li><strong>ubuntu:15.10</strong> 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。</li>
<li><strong>/bin/echo “Hello world”:</strong> 在启动的容器里执行的命令</li>
</ul>
<p>以上命令完整的意思可以解释为：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo “Hello world”，然后输出结果。</p>
<p><strong>错误一：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">报错：docker：cannot connect to the docker daemon</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211207110138856.png" alt="image-20211207110138856"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解决方法：</span><br><span class="line">sudo su                       //切换到root</span><br><span class="line"></span><br><span class="line">service docker start      //启动docker service</span><br><span class="line"></span><br><span class="line">docker images              //显示所有images</span><br><span class="line"></span><br><span class="line">docker ps //重新运行docker命令</span><br></pre></td></tr></table></figure>
<img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211207110241902.png" alt="image-20211207110241902" style="zoom:150%;" />
<p><strong>错误二：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run ubantu:15.10 /bin/echo &quot;Hello world&quot;</span><br><span class="line">报错：</span><br><span class="line">docker：Error response from daemon:pull access denied for ubantu....</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211207110354983.png" alt="image-20211207110354983"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ubuntu拼写错误：</span><br><span class="line">docker run ubuntu:15.10 /bin/echo &quot;Hello world&quot;</span><br><span class="line">成功下载，输出结果。</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211207111441289.png" alt="image-20211207111441289"></p>
<h2 id="运行交互式的容器（进入docker的容器内部）">运行交互式的容器（进入docker的容器内部）</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -i -t ubuntu:15.10 /bin/bash</span><br></pre></td></tr></table></figure>
<p>参数解析：</p>
<ul>
<li><strong>-t:</strong> 在新容器内指定一个伪终端或终端。</li>
<li><strong>-i:</strong> 允许你对容器内的标准输入 (STDIN) 进行交互。</li>
</ul>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211207112430398.png" alt="image-20211207112430398"></p>
<p>此时已经进入到Ubuntu15.10的容器中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看容器的信息：</span><br><span class="line">ls                    #目录</span><br><span class="line">cat /proc/version     #版本信息</span><br></pre></td></tr></table></figure>
<p>退出当前容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
<h2 id="启动容器">启动容器</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d ubuntu:15.10 /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211207113747944.png" alt="image-20211207113747944"></p>
<p>在这里我们没有得到“hello world 2”，而是得到了一个长的字符串。这个长字符串就是容器的ID号。对容器来说，ID号是唯一的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看正在运行的容器：</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<p>输出详情介绍：</p>
<p><strong>CONTAINER ID:</strong> 容器 ID。</p>
<p><strong>IMAGE:</strong> 使用的镜像。</p>
<p><strong>COMMAND:</strong> 启动容器时运行的命令。</p>
<p><strong>CREATED:</strong> 容器的创建时间。</p>
<p><strong>STATUS:</strong> 容器状态。</p>
<p>状态有7种：</p>
<ul>
<li>created（已创建）</li>
<li>restarting（重启中）</li>
<li>running 或 Up（运行中）</li>
<li>removing（迁移中）</li>
<li>paused（暂停）</li>
<li>exited（停止）</li>
<li>dead（死亡）</li>
</ul>
<p><strong>PORTS:</strong> 容器的端口信息和使用的连接类型（tcp\udp）。</p>
<p><strong>NAMES:</strong> 自动分配的容器名称。</p>
<p>查看容器的输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker logs 容器ID</span><br><span class="line"></span><br><span class="line">runoob@runoob:~$ docker logs 容器名</span><br></pre></td></tr></table></figure>
<p>停止容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop 容器名/ID</span><br></pre></td></tr></table></figure>
<h2 id="常用命令">常用命令</h2>
<h3 id="容器相关命令">容器相关命令</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#容器使用命令</span><br><span class="line">docker pull ubuntu                 #获取镜像</span><br><span class="line">docker run -it ubuntu /bin/bash    #启动容器  i：交互式操作    t：终端</span><br><span class="line">exit                               #退出</span><br><span class="line">docker ps -a                       #查看所有的容器</span><br><span class="line">docker start 容器名/ID              #启动容器一个已经停止的容器</span><br><span class="line">docker run -itd --name 容器名 ubuntu /bin/bash     # 后台运行容器，d：指定运行的模式</span><br><span class="line">docker stop 容器/ID                 #停止容器</span><br><span class="line">docker restart 容器名/ID</span><br><span class="line"></span><br><span class="line">#进入容器命令</span><br><span class="line">docker attach ID                #退出容器时，容器运行停止</span><br><span class="line">docker exec -it ID /bin/bash    #退出容器时，容器不会停止</span><br><span class="line"></span><br><span class="line">#导入导出容器：</span><br><span class="line">docker export 1e560fca3906 &gt; ubuntu.tar         #导出到本地 ubuntu.tar是自定义的文件名</span><br><span class="line">cat docker/ubuntu.tar | docker import - test/ubuntu:v1        #导入</span><br><span class="line">docker import http://example.com/exampleimage.tgz example/imagerepo      #通过url导入</span><br><span class="line"></span><br><span class="line">#删除容器</span><br><span class="line">docker rm -f ID             #根据ID删除一个容器</span><br><span class="line">docker container prune      #清理掉所有处于终止状态的容器</span><br></pre></td></tr></table></figure>
<h3 id="web-app相关应用">web app相关应用</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull training/webapp  # 载入镜像</span><br><span class="line">docker run -d -P training/webapp python app.py    #加载镜像， -d：后台运行，-p：将容器内部使用的网络端口映射到本主机上。</span><br><span class="line">docker ps                    # 查看Web应用容器</span><br><span class="line">docker run -d -p 5000:5000 training/webapp python app.py        # -p可以设置端口</span><br><span class="line">docker post 容器名/端口名              #查看容器的端口映射地址</span><br><span class="line">docker logs -f 端口ID                #查看日志</span><br><span class="line">docker top 容器名/ID                    #查看容器中的进程</span><br><span class="line">docker inspect 容器名/ID                #查看docker的底层信息</span><br><span class="line">docker stop 容器名/ID                   #停止web应用</span><br><span class="line">docker start 容器名/ID                  #开启web应用</span><br><span class="line">docker ps -l                           #查询最后一次创建的容器</span><br><span class="line">docker rm 容器名/ID                     #移除容器。</span><br></pre></td></tr></table></figure>
<h3 id="docker镜像">docker镜像</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images                            #查看本地镜像</span><br><span class="line">docker run -t -i ubuntu:15.10 /bin/bash  #使用Ubuntu15.10版本的镜像来运行容器，如果不指定版本的话，则默认使用最新版。</span><br><span class="line">docker pull 镜像名：版本                   #下载镜像</span><br><span class="line">docker search 镜像名                      #查找镜像</span><br><span class="line">docker run 镜像名                         #使用镜像</span><br><span class="line">docker rmi 镜像名                         #删除镜像</span><br><span class="line">docker tag ID repository名:tag名          #给镜像添加标签</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211207150407705.png" alt="image-20211207150407705"></p>
<h3 id="Docker容器连接">Docker容器连接</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建一个Python应用的容器</span><br><span class="line">注意： -P：随机端口号                -p:指定端口号</span><br><span class="line">docker run -d -P training/webapp python app.py </span><br><span class="line">docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py   # 默认绑定tcp端口</span><br><span class="line">docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py  #udp</span><br><span class="line"></span><br><span class="line">docker port 容器名 端口号                    #查看端口的绑定情况。</span><br><span class="line">docker run -d -P --name 容器名 training/webapp python app.py</span><br><span class="line">docker network create -d bridge 网络名       #创建一个新的docker网络。-d：参数指定 Docker 网络类型，有 bridge、overlay。</span><br><span class="line"></span><br><span class="line">#连接容器</span><br><span class="line">#运行一个容器并连接到 test-net 网络:</span><br><span class="line">docker run -itd --name test1 --network test-net ubuntu /bin/bash  </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在容器中安装ping指令</span><br><span class="line">1。先进入容器内：</span><br><span class="line">docker exec -it id bin/bash</span><br><span class="line">2.</span><br><span class="line">apt-get update</span><br><span class="line">3.</span><br><span class="line">apt install iputils-ping</span><br><span class="line"></span><br><span class="line">4.在test1网络中ping test2</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211207161822903.png" alt="image-20211207161822903"></p>
<p>test1 容器和 test2 容器建立了互联关系。</p>
<p>如果你有多个容器之间需要互相连接，推荐使用 Docker Compose</p>
<h3 id="Docker仓库管理">Docker仓库管理</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker login           #登录</span><br><span class="line">docker logout          #退出</span><br><span class="line">docker search ubuntu   #查找远程仓库中的镜像</span><br><span class="line">docker pull 镜像名      #从远程操控中拉取，下载到本地</span><br><span class="line"></span><br><span class="line">docker tag ubuntu:18.04 用户名/ubuntu:18.04      #推送数据</span><br><span class="line">docker image ls        #查看镜像</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Docker-Dockerfile">Docker Dockerfile</h3>
<p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">加载中。。。。。</span><br></pre></td></tr></table></figure>
<h3 id="Docker-Compose">Docker Compose</h3>
<p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p>
<p>Compose 使用的三个步骤：</p>
<ul>
<li>使用 Dockerfile 定义应用程序的环境。</li>
<li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li>
<li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li>
</ul>
<p>安装Compose</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装compose</span><br><span class="line">$ sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line">加载中。。。。。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Docker-machine">Docker machine</h3>
<p>Docker Machine 是一种可以让您在虚拟主机上安装 Docker 的工具，并可以使用 docker-machine 命令来管理主机。</p>
<p>Docker Machine 也可以集中管理所有的 docker 主机，比如快速的给 100 台服务器安装上 docker。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#下载</span><br><span class="line">base=https://github.com/docker/machine/releases/download/v0.16.0 &amp;&amp;</span><br><span class="line">  curl -L $base/docker-machine-$(uname -s)-$(uname -m) &gt;/tmp/docker-machine &amp;&amp;</span><br><span class="line">  sudo mv /tmp/docker-machine /usr/local/bin/docker-machine &amp;&amp;</span><br><span class="line">  chmod +x /usr/local/bin/docker-machine</span><br></pre></td></tr></table></figure>
<h3 id="Docker-Swarm集群管理工具">Docker Swarm集群管理工具</h3>
<p>Docker Swarm 是 Docker 的<strong>集群管理工具</strong>。它将 Docker 主机池转变为单个虚拟 Docker 主机。 Docker Swarm 提供了标准的 Docker API，所有任何已经与 Docker 守护程序通信的工具都可以使用 Swarm 轻松地扩展到多个主机。</p>
<p>支持的工具包括但不限于以下各项：</p>
<ul>
<li>Dokku</li>
<li>Docker Compose</li>
<li>Docker Machine</li>
<li>Jenkins</li>
</ul>
<p><strong>原理：</strong></p>
<p>swarm 集群由管理节点（manager）和工作节点（work node）构成。</p>
<ul>
<li><strong>swarm mananger</strong>：负责整个集群的管理工作包括集群配置、服务管理等所有跟集群有关的工作。</li>
<li><strong>work node</strong>：即图中的 available node，主要负责运行相应的服务来执行任务（task）。</li>
</ul>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/services-diagram.png" alt="img"></p>
<p>==swarm因为功能少，现在已经被k8s替代了，使用的较少==</p>
<p>k8s架构图如下：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211207175444273.png" alt="image-20211207175444273"></p>
]]></content>
      <categories>
        <category>云计算</category>
      </categories>
      <tags>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>flink-cluster.yaml中关于日志的配置</title>
    <url>/2022/01/27/flink-cluster-yaml%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%97%A5%E5%BF%97%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>需求：</p>
<ol>
<li>输出的日志名中添加日期标志。</li>
<li>获得日志列表按照时间进行排序</li>
</ol>
<h1>日志名中添加时间标志</h1>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j-console.properties</span>: <span class="string">|+</span></span><br><span class="line"><span class="comment">  # This affects logging for both user code and Flink</span></span><br><span class="line">  <span class="meta">rootLogger.level</span> = <span class="string">&#123;&#123;rootLogLevel&#125;&#125;</span></span><br><span class="line">  <span class="meta">rootLogger.appenderRef.console.ref</span> = <span class="string">ConsoleAppender</span></span><br><span class="line">  <span class="meta">rootLogger.appenderRef.rolling.ref</span> = <span class="string">RollingFileAppender</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  # Uncomment this if you want to _only_ change Flink&#x27;s logging</span></span><br><span class="line">  <span class="meta">logger.flink.name</span> = <span class="string">org.apache.flink</span></span><br><span class="line">  <span class="meta">logger.flink.level</span> = <span class="string">&#123;&#123;rootLogLevel&#125;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  # The following lines keep the log level of common libraries/connectors on</span></span><br><span class="line"><span class="comment">  # log level INFO. The root logger does not override this. You have to manually</span></span><br><span class="line"><span class="comment">  # change the log levels here.</span></span><br><span class="line">  <span class="meta">logger.akka.name</span> = <span class="string">akka</span></span><br><span class="line">  <span class="meta">logger.akka.level</span> = <span class="string">INFO</span></span><br><span class="line">  <span class="meta">logger.kafka.name</span>= <span class="string">org.apache.kafka</span></span><br><span class="line">  <span class="meta">logger.kafka.level</span> = <span class="string">INFO</span></span><br><span class="line">  <span class="meta">logger.hadoop.name</span> = <span class="string">org.apache.hadoop</span></span><br><span class="line">  <span class="meta">logger.hadoop.level</span> = <span class="string">INFO</span></span><br><span class="line">  <span class="meta">logger.zookeeper.name</span> = <span class="string">org.apache.zookeeper</span></span><br><span class="line">  <span class="meta">logger.zookeeper.level</span> = <span class="string">INFO</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  # Log all infos to the console</span></span><br><span class="line">  <span class="meta">appender.console.name</span> = <span class="string">ConsoleAppender</span></span><br><span class="line">  <span class="meta">appender.console.type</span> = <span class="string">CONSOLE</span></span><br><span class="line">  <span class="meta">appender.console.layout.type</span> = <span class="string">PatternLayout</span></span><br><span class="line">  <span class="meta">appender.console.layout.pattern</span> = <span class="string">%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; %-5p %-60c %x - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  # Log all infos in the given rolling file</span></span><br><span class="line">  <span class="meta">appender.rolling.name</span> = <span class="string">RollingFileAppender</span></span><br><span class="line">  <span class="meta">appender.rolling.type</span> = <span class="string">RollingFile</span></span><br><span class="line">  <span class="meta">appender.rolling.append</span> = <span class="string">true</span></span><br><span class="line">  <span class="meta">appender.rolling.fileName</span> = <span class="string">$&#123;sys:log.file&#125;</span></span><br><span class="line">  <span class="meta">appender.rolling.filePattern</span> = <span class="string">$&#123;sys:log.file&#125;.%i </span></span><br><span class="line">  <span class="meta">appender.rolling.layout.type</span> = <span class="string">PatternLayout</span></span><br><span class="line">  <span class="meta">appender.rolling.layout.pattern</span> = <span class="string">%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; %-5p %-60c %x - %m%n</span></span><br><span class="line">  <span class="meta">appender.rolling.policies.type</span> = <span class="string">Policies</span></span><br><span class="line">  <span class="meta">appender.rolling.policies.size.type</span> = <span class="string">SizeBasedTriggeringPolicy</span></span><br><span class="line">  <span class="meta">appender.rolling.policies.size.size</span>=<span class="string">100MB</span></span><br><span class="line">  <span class="meta">appender.rolling.strategy.type</span> = <span class="string">DefaultRolloverStrategy</span></span><br><span class="line">  <span class="meta">appender.rolling.strategy.max</span> = <span class="string">10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  # Suppress the irrelevant (wrong) warnings from the Netty channel handler</span></span><br><span class="line">  <span class="meta">logger.netty.name</span> = <span class="string">org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline</span></span><br><span class="line">  <span class="meta">logger.netty.level</span> = <span class="string">OFF</span></span><br></pre></td></tr></table></figure>
<p>修改配置文件中的：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">appender.rolling.fileName</span> = <span class="string">$&#123;sys:log.file&#125; $&#123;date:yyyy-MM-dd HH:mm:ss&#125;</span></span><br><span class="line"><span class="meta">appender.rolling.filePattern</span> = <span class="string">$&#123;sys:log.file&#125;.%i $&#123;date:yyyy-MM-dd HH:mm:ss&#125;</span></span><br></pre></td></tr></table></figure>
<p>在输出的文件名后追加了一个日期标识</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flink--taskexecutor-0-flink-taskmanager-1-9987686d8-9t95b.log 2022-01-27 10:54:54</span><br></pre></td></tr></table></figure>
<h1>日志列表排序方法</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询目录下的所有文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dir 将要查询的文件目录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JSONArray <span class="title">getLocalFiles</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">    JSONArray files = <span class="keyword">new</span> JSONArray();</span><br><span class="line">    <span class="keyword">if</span> (dir.isDirectory()) &#123;</span><br><span class="line">        File[] fs = dir.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (fs != <span class="keyword">null</span> &amp;&amp; fs.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 对fs中的数据按照时间进行排序（倒序）</span></span><br><span class="line"><span class="comment">             * 文件名：flink--standalonesession-0-flink-jobmanager-12-f569f96f-4hmnj.log.1 2022-01-26 15:05:02&quot;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Arrays.sort(fs, <span class="keyword">new</span> Comparator&lt;File&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(File f1, File f2)</span> </span>&#123;</span><br><span class="line">                    SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">                    String[] stringFile1 = f1.getName().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    String[] stringFile2 = f2.getName().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    <span class="comment">//字符串拼接，yyyy-MM-dd HH:mm:ss</span></span><br><span class="line">                    String date1Str = stringFile1[<span class="number">1</span>] + <span class="string">&quot; &quot;</span> + stringFile1[<span class="number">2</span>];</span><br><span class="line">                    String date2Str = stringFile2[<span class="number">1</span>] + <span class="string">&quot; &quot;</span> + stringFile2[<span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Date date1 = format.parse(date1Str);</span><br><span class="line">                        Date date2 = format.parse(date2Str);</span><br><span class="line">                        <span class="keyword">if</span> (date1.getTime() &gt; date2.getTime())</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (date1.getTime() == date2.getTime())</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//如果 if 中修改为 返回1 同时此处修改为返回 -1  排序就会是递增</span></span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">for</span> (File f : fs) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!f.isDirectory()) &#123;</span><br><span class="line">                    JSONObject file = <span class="keyword">new</span> JSONObject();</span><br><span class="line">                    file.put(<span class="string">&quot;name&quot;</span>, f.getName());</span><br><span class="line">                    file.put(<span class="string">&quot;size&quot;</span>, String.format(<span class="string">&quot;%.2f&quot;</span>, (<span class="keyword">float</span>) f.length() / <span class="number">1024</span>));</span><br><span class="line">                    files.add(file);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> files;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>附件</h1>
<p>完整的flink-cluster.yaml配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flink-config-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flink-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">flink-conf.yaml:</span> <span class="string">|+</span></span><br><span class="line"><span class="string">    &#123;% if userConfigList[0] is defined %&#125;</span></span><br><span class="line"><span class="string">    &#123;%  for userConfig in userConfigList %&#125;</span></span><br><span class="line"><span class="string">    &#123;&#123;userConfig.attribute&#125;&#125;: &#123;&#123;userConfig.value&#125;&#125;</span></span><br><span class="line"><span class="string">    &#123;% endfor %&#125;</span></span><br><span class="line"><span class="string">    &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">    jobmanager.rpc.address: flink-jobmanager-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line"><span class="string">    &#123;% if not perJobSQL %&#125;</span></span><br><span class="line"><span class="string">    web.upload.dir: /opt/flink/usrlib/</span></span><br><span class="line"><span class="string">    &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">    state.checkpoints.dir: file:///opt/flink/checkpoint/</span></span><br><span class="line"><span class="string">    blob.server.port: 6124</span></span><br><span class="line"><span class="string">    jobmanager.rpc.port: 6123</span></span><br><span class="line"><span class="string">    taskmanager.rpc.port: 6122</span></span><br><span class="line"><span class="string">    queryable-state.proxy.ports: 6125</span></span><br><span class="line"><span class="string">    jobmanager.memory.process.size: &#123;&#123;jmMem&#125;&#125;g</span></span><br><span class="line"><span class="string">    taskmanager.memory.process.size: &#123;&#123;tmMem&#125;&#125;g</span></span><br><span class="line"><span class="string">    parallelism.default: &#123;&#123;parallelism&#125;&#125;</span></span><br><span class="line"><span class="string">    metrics.reporters: prom</span></span><br><span class="line"><span class="string">    metrics.reporter.prom.class: org.apache.flink.metrics.prometheus.PrometheusReporter</span></span><br><span class="line"><span class="string">    metrics.reporter.prom.port: 9249</span></span><br><span class="line"><span class="string"></span>  <span class="attr">log4j-console.properties:</span> <span class="string">|+</span></span><br><span class="line"><span class="string">    # This affects logging for both user code and Flink</span></span><br><span class="line"><span class="string">    rootLogger.level = &#123;&#123;rootLogLevel&#125;&#125;</span></span><br><span class="line"><span class="string">    rootLogger.appenderRef.console.ref = ConsoleAppender</span></span><br><span class="line"><span class="string">    rootLogger.appenderRef.rolling.ref = RollingFileAppender</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="comment"># Uncomment this if you want to _only_ change Flink&#x27;s logging</span></span><br><span class="line">    <span class="string">logger.flink.name</span> <span class="string">=</span> <span class="string">org.apache.flink</span></span><br><span class="line">    <span class="string">logger.flink.level</span> <span class="string">=</span> &#123;&#123;<span class="string">rootLogLevel</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The following lines keep the log level of common libraries/connectors on</span></span><br><span class="line">    <span class="comment"># log level INFO. The root logger does not override this. You have to manually</span></span><br><span class="line">    <span class="comment"># change the log levels here.</span></span><br><span class="line">    <span class="string">logger.akka.name</span> <span class="string">=</span> <span class="string">akka</span></span><br><span class="line">    <span class="string">logger.akka.level</span> <span class="string">=</span> <span class="string">INFO</span></span><br><span class="line">    <span class="string">logger.kafka.name=</span> <span class="string">org.apache.kafka</span></span><br><span class="line">    <span class="string">logger.kafka.level</span> <span class="string">=</span> <span class="string">INFO</span></span><br><span class="line">    <span class="string">logger.hadoop.name</span> <span class="string">=</span> <span class="string">org.apache.hadoop</span></span><br><span class="line">    <span class="string">logger.hadoop.level</span> <span class="string">=</span> <span class="string">INFO</span></span><br><span class="line">    <span class="string">logger.zookeeper.name</span> <span class="string">=</span> <span class="string">org.apache.zookeeper</span></span><br><span class="line">    <span class="string">logger.zookeeper.level</span> <span class="string">=</span> <span class="string">INFO</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Log all infos to the console</span></span><br><span class="line">    <span class="string">appender.console.name</span> <span class="string">=</span> <span class="string">ConsoleAppender</span></span><br><span class="line">    <span class="string">appender.console.type</span> <span class="string">=</span> <span class="string">CONSOLE</span></span><br><span class="line">    <span class="string">appender.console.layout.type</span> <span class="string">=</span> <span class="string">PatternLayout</span></span><br><span class="line">    <span class="string">appender.console.layout.pattern</span> <span class="string">=</span> <span class="string">%d&#123;yyyy-MM-dd</span> <span class="string">HH:mm:ss,SSS&#125;</span> <span class="string">%-5p</span> <span class="string">%-60c</span> <span class="string">%x</span> <span class="bullet">-</span> <span class="string">%m%n</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Log all infos in the given rolling file</span></span><br><span class="line">    <span class="string">appender.rolling.name</span> <span class="string">=</span> <span class="string">RollingFileAppender</span></span><br><span class="line">    <span class="string">appender.rolling.type</span> <span class="string">=</span> <span class="string">RollingFile</span></span><br><span class="line">    <span class="string">appender.rolling.append</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line">    <span class="string">appender.rolling.fileName</span> <span class="string">=</span> <span class="string">$&#123;sys:log.file&#125;</span> <span class="string">$&#123;date:yyyy-MM-dd</span> <span class="string">HH:mm:ss&#125;</span></span><br><span class="line">    <span class="string">appender.rolling.filePattern</span> <span class="string">=</span> <span class="string">$&#123;sys:log.file&#125;.%i</span> <span class="string">$&#123;date:yyyy-MM-dd</span> <span class="string">HH:mm:ss&#125;</span></span><br><span class="line">    <span class="string">appender.rolling.layout.type</span> <span class="string">=</span> <span class="string">PatternLayout</span></span><br><span class="line">    <span class="string">appender.rolling.layout.pattern</span> <span class="string">=</span> <span class="string">%d&#123;yyyy-MM-dd</span> <span class="string">HH:mm:ss,SSS&#125;</span> <span class="string">%-5p</span> <span class="string">%-60c</span> <span class="string">%x</span> <span class="bullet">-</span> <span class="string">%m%n</span></span><br><span class="line">    <span class="string">appender.rolling.policies.type</span> <span class="string">=</span> <span class="string">Policies</span></span><br><span class="line">    <span class="string">appender.rolling.policies.size.type</span> <span class="string">=</span> <span class="string">SizeBasedTriggeringPolicy</span></span><br><span class="line">    <span class="string">appender.rolling.policies.size.size=100MB</span></span><br><span class="line">    <span class="string">appender.rolling.strategy.type</span> <span class="string">=</span> <span class="string">DefaultRolloverStrategy</span></span><br><span class="line">    <span class="string">appender.rolling.strategy.max</span> <span class="string">=</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Suppress the irrelevant (wrong) warnings from the Netty channel handler</span></span><br><span class="line">    <span class="string">logger.netty.name</span> <span class="string">=</span> <span class="string">org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline</span></span><br><span class="line">    <span class="string">logger.netty.level</span> <span class="string">=</span> <span class="string">OFF</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flink-jobmanager-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rpc</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6123</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">blob-server</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6124</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webui</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flink-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">jobmanager-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-crc-&#123;&#123;namespace&#125;&#125;-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="string">&quot;/$1&quot;</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/proxy-body-size:</span> <span class="string">&quot;102400M&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> &#123;&#123;<span class="string">domainName</span>&#125;&#125;</span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/&#123;&#123;namespace&#125;&#125;-&#123;&#123;clusterId&#125;&#125;/(.*)$</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">flink-jobmanager-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="number">8081</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">if</span> <span class="string">isSession</span> <span class="string">%</span>&#125;</span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">else</span> <span class="string">%</span>&#125;</span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flink-jobmanager-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  &#123;<span class="string">%</span> <span class="string">if</span> <span class="string">isSession</span> <span class="string">%</span>&#125;</span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">flink-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line">      <span class="attr">component:</span> <span class="string">jobmanager-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line">  &#123;<span class="string">%</span> <span class="string">else</span> <span class="string">%</span>&#125;</span><br><span class="line">  <span class="attr">backoffLimit:</span> <span class="number">3</span></span><br><span class="line">  &#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">flink-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line">        <span class="attr">component:</span> <span class="string">jobmanager-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      &#123;<span class="string">%</span> <span class="string">if</span> <span class="string">not</span> <span class="string">isSession</span> <span class="string">%</span>&#125;</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span> <span class="comment">#[Always,OnFailure,Never]</span></span><br><span class="line">      &#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">harbor-secret</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jobmanager-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line">          <span class="attr">image:</span> &#123;&#123;<span class="string">flinkImageTag</span>&#125;&#125;</span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">TZ</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">          &#123;<span class="string">%</span> <span class="string">if</span> <span class="string">isSession</span> <span class="string">%</span>&#125;</span><br><span class="line">          <span class="attr">args:</span> [<span class="string">&quot;jobmanager&quot;</span>]</span><br><span class="line">          &#123;<span class="string">%</span> <span class="string">else</span> <span class="string">%</span>&#125;</span><br><span class="line">          <span class="attr">args:</span> [<span class="string">&quot;standalone-job&quot;</span>, <span class="string">&quot;--job-classname&quot;</span>, <span class="string">&quot;<span class="template-variable">&#123;&#123;mainClass&#125;&#125;</span>&quot;</span>, <span class="string">--allowNonRestoredState</span></span><br><span class="line">         &#123;<span class="string">%</span> <span class="string">if</span> <span class="string">jobArguments</span>[<span class="number">0</span>] <span class="string">is</span> <span class="string">defined</span> <span class="string">%</span>&#125; &#123;<span class="string">%</span> <span class="string">for</span> <span class="string">arg</span> <span class="string">in</span> <span class="string">jobArguments</span> <span class="string">%</span>&#125; ,<span class="string">&quot;<span class="template-variable">&#123;&#123;arg&#125;&#125;</span>&quot;</span>  &#123;<span class="string">%</span> <span class="string">endfor</span> <span class="string">%</span>&#125; &#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;]</span><br><span class="line">          &#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;jmCpu&#125;&#125;</span>&quot;</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;jmMem&#125;&#125;</span>Gi&quot;</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;jmCpu&#125;&#125;</span>&quot;</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;jmMem&#125;&#125;</span>Gi&quot;</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6123</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">rpc</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6124</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">blob-server</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8081</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">webui</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">tcpSocket:</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">6123</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">60</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flink-config-volume</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/opt/flink/conf</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flink-cluster-volume</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/opt/flink/sqlScript/</span></span><br><span class="line">              <span class="attr">subPath:</span> &#123;&#123;<span class="string">pvcSubDir</span>&#125;&#125;<span class="string">sql</span></span><br><span class="line">            &#123;<span class="string">%</span> <span class="string">if</span> <span class="string">not</span> <span class="string">perJobSQL</span> <span class="string">%</span>&#125;</span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flink-cluster-volume</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/opt/flink/usrlib/</span></span><br><span class="line">              <span class="attr">subPath:</span> &#123;&#123;<span class="string">pvcSubDir</span>&#125;&#125;<span class="string">jar</span></span><br><span class="line">            &#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flink-cluster-volume</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/opt/flink/log/</span></span><br><span class="line">              <span class="attr">subPath:</span> &#123;&#123;<span class="string">pvcSubDir</span>&#125;&#125;<span class="string">log</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flink-cluster-volume</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/opt/flink/checkpoint/</span></span><br><span class="line">              <span class="attr">subPath:</span> &#123;&#123;<span class="string">pvcSubDir</span>&#125;&#125;<span class="string">checkpoint</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">9999</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flink-config-volume</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">flink-config-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line">            <span class="attr">items:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">flink-conf.yaml</span></span><br><span class="line">                <span class="attr">path:</span> <span class="string">flink-conf.yaml</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">log4j-console.properties</span></span><br><span class="line">                <span class="attr">path:</span> <span class="string">log4j-console.properties</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flink-cluster-volume</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">              <span class="attr">claimName:</span> <span class="string">workbench-pvc</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flink-taskmanager-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> &#123;&#123;<span class="string">tmReplicas</span>&#125;&#125;</span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">flink-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line">      <span class="attr">component:</span> <span class="string">taskmanager-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">flink-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line">        <span class="attr">component:</span> <span class="string">taskmanager-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      &#123;<span class="string">%</span> <span class="string">if</span> <span class="string">fqdnList</span>[<span class="number">0</span>]<span class="string">.ip</span> <span class="string">is</span> <span class="string">defined</span> <span class="string">%</span>&#125;</span><br><span class="line">      <span class="attr">hostAliases:</span></span><br><span class="line">      &#123;<span class="string">%</span>  <span class="string">for</span> <span class="string">fqdn</span> <span class="string">in</span> <span class="string">fqdnList</span> <span class="string">%</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> <span class="attr">ip:</span> &#123;&#123;<span class="string">fqdn.ip</span>&#125;&#125;</span><br><span class="line">        <span class="attr">hostnames:</span></span><br><span class="line">        <span class="bullet">-</span> &#123;&#123;<span class="string">fqdn.hostName</span>&#125;&#125;</span><br><span class="line">      &#123;<span class="string">%</span> <span class="string">endfor</span> <span class="string">%</span>&#125;</span><br><span class="line">      &#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line">      &#123;<span class="string">%</span> <span class="string">if</span> <span class="string">hostNetwork</span> <span class="string">%</span>&#125;</span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirstWithHostNet</span></span><br><span class="line">      &#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">harbor-secret</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">taskmanager-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line">        <span class="attr">image:</span> &#123;&#123;<span class="string">flinkImageTag</span>&#125;&#125;</span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">TZ</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">        <span class="attr">args:</span> [<span class="string">&quot;taskmanager&quot;</span>] <span class="comment"># 指定TaskManager类型实例</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;tmCpu&#125;&#125;</span>&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;tmMem&#125;&#125;</span>Gi&quot;</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;tmCpu&#125;&#125;</span>&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;tmMem&#125;&#125;</span>Gi&quot;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6122</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">rpc</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6125</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">query-state</span></span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">tcpSocket:</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">6122</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">60</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flink-config-volume</span> <span class="comment">#flink configuration 路径挂载</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/opt/flink/conf/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flink-cluster-volume</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/opt/flink/sqlScript/</span></span><br><span class="line">          <span class="attr">subPath:</span> &#123;&#123;<span class="string">pvcSubDir</span>&#125;&#125;<span class="string">sql</span></span><br><span class="line">        &#123;<span class="string">%</span> <span class="string">if</span> <span class="string">not</span> <span class="string">perJobSQL</span> <span class="string">%</span>&#125;</span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flink-cluster-volume</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/opt/flink/usrlib/</span></span><br><span class="line">          <span class="attr">subPath:</span> &#123;&#123;<span class="string">pvcSubDir</span>&#125;&#125;<span class="string">jar</span></span><br><span class="line">        &#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flink-cluster-volume</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/opt/flink/log/</span></span><br><span class="line">          <span class="attr">subPath:</span> &#123;&#123;<span class="string">pvcSubDir</span>&#125;&#125;<span class="string">log</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flink-cluster-volume</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/opt/flink/checkpoint/</span></span><br><span class="line">          <span class="attr">subPath:</span> &#123;&#123;<span class="string">pvcSubDir</span>&#125;&#125;<span class="string">checkpoint</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">runAsUser:</span> <span class="number">9999</span>  <span class="comment"># refers to user _flink_ from official flink image, change if necessary</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flink-config-volume</span> <span class="comment"># 从configmap中获取</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">flink-config-&#123;&#123;clusterId&#125;&#125;</span></span><br><span class="line">          <span class="attr">items:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">flink-conf.yaml</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">flink-conf.yaml</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">log4j-console.properties</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">log4j-console.properties</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flink-cluster-volume</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">              <span class="attr">claimName:</span> <span class="string">workbench-pvc</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>jsch连接虚拟机</title>
    <url>/2022/01/12/jsch%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<p>需求：通过编写Java代码，远程连接虚拟机，实现基本操作。</p>
<p>使用策略模式，将基本操作封装成一个个的策略类。</p>
<h1>代码实现</h1>
<p>1.导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基于ssh2，连接虚拟机 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jcraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.55<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.ssh连接实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SSH连接实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SSHInfo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.ssh操作类实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SSHExecutor</span> <span class="keyword">implements</span> <span class="title">Constant</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Session session = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SSHExecutor</span><span class="params">(SSHInfo sshInfo)</span> <span class="keyword">throws</span> JSchException </span>&#123;</span><br><span class="line">        <span class="comment">//建立JSch对象。</span></span><br><span class="line">        JSch jsch =<span class="keyword">new</span> JSch();</span><br><span class="line">        <span class="comment">//连接host主机</span></span><br><span class="line">        session = jsch.getSession(sshInfo.getUser(),sshInfo.getHost(),sshInfo.getPort());</span><br><span class="line">        <span class="comment">//密码认证</span></span><br><span class="line">        session.setPassword(sshInfo.getPassword());</span><br><span class="line">        <span class="comment">//用户认证，MyUserInfo是实现UserInfo接口。</span></span><br><span class="line">        session.setUserInfo(<span class="keyword">new</span> MyUserInfo());</span><br><span class="line">        <span class="comment">//建立session，设置过期时间为3000s</span></span><br><span class="line">        session.connect(Constant.SESSION_TIMEOUT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类出口方法，外部类可以通过这个方法构造SSHInfo连接类实例。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JSchException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SSHExecutor <span class="title">newInstance</span><span class="params">()</span> <span class="keyword">throws</span> JSchException </span>&#123;</span><br><span class="line">        SSHInfo ssh = SSHInfo.builder()</span><br><span class="line">                .user(<span class="string">&quot;lwk&quot;</span>)</span><br><span class="line">                .password(<span class="string">&quot;lwk@123&quot;</span>)</span><br><span class="line">                .host(<span class="string">&quot;10.6.8.156&quot;</span>)</span><br><span class="line">                .port(<span class="number">22</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//返回一个连接对象，这个对象中包含了所有的连接信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SSHExecutor(ssh);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">shell</span><span class="params">(String cmd, String outputFileName)</span> <span class="keyword">throws</span> JSchException, IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//时间转换，相当于new Date();</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//建立可执行的shell管道</span></span><br><span class="line">        Channel channel = session.openChannel(ChannelTypeEnum.shell.getType());</span><br><span class="line">        <span class="comment">//输入输出流</span></span><br><span class="line">        PipedInputStream pipeIn = <span class="keyword">new</span> PipedInputStream();</span><br><span class="line">        PipedOutputStream pipeOut = <span class="keyword">new</span> PipedOutputStream( pipeIn );</span><br><span class="line">        FileOutputStream fileOut = <span class="keyword">new</span> FileOutputStream( outputFileName, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//为可执行管道设置输入输出流</span></span><br><span class="line">        channel.setInputStream(pipeIn);</span><br><span class="line">        channel.setOutputStream(fileOut);</span><br><span class="line">        <span class="comment">//建立管道输入流与文件输出流之间的连接，并设置过期时间</span></span><br><span class="line">        channel.connect(Constant.CHANNEL_TIMEOUT);</span><br><span class="line">        <span class="comment">//按照UTF-8的编码格式将命令写入到文件中</span></span><br><span class="line">        pipeOut.write(cmd.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">//线程休眠，</span></span><br><span class="line">        Thread.sleep(Constant.INTERVAL);</span><br><span class="line">        <span class="comment">//关闭输入输出流、管道</span></span><br><span class="line">        pipeOut.close();</span><br><span class="line">        pipeIn.close();</span><br><span class="line">        fileOut.close();</span><br><span class="line">        channel.disconnect();</span><br><span class="line">        <span class="comment">//返回一个运行时间</span></span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis() - start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exec</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> IOException, JSchException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//建立exec类型的管道</span></span><br><span class="line">        ChannelExec channelExec = (ChannelExec)session.openChannel(ChannelTypeEnum.exec.getType());</span><br><span class="line">        <span class="comment">//执行输入的命令</span></span><br><span class="line">        channelExec.setCommand( cmd );</span><br><span class="line">        <span class="comment">//设置输入流</span></span><br><span class="line">        channelExec.setInputStream( <span class="keyword">null</span> );</span><br><span class="line">        <span class="comment">//获取脚本可能会出现的错误日志</span></span><br><span class="line">        channelExec.setErrStream( System.err );</span><br><span class="line">        InputStream in = channelExec.getInputStream();</span><br><span class="line">        channelExec.connect();</span><br><span class="line">        <span class="comment">// 从远程主机读取输入流，获得脚本执行结果</span></span><br><span class="line">        <span class="keyword">int</span> res = -<span class="number">1</span>;      <span class="comment">//标记运行状态，0表示正确运行</span></span><br><span class="line">        StringBuffer buf = <span class="keyword">new</span> StringBuffer( <span class="number">1024</span> );</span><br><span class="line">        <span class="keyword">byte</span>[] tmp = <span class="keyword">new</span> <span class="keyword">byte</span>[ <span class="number">1024</span> ];</span><br><span class="line">        <span class="keyword">while</span> ( <span class="keyword">true</span> ) &#123;</span><br><span class="line">            <span class="comment">//available表示输入流中的字节的数量</span></span><br><span class="line">            <span class="keyword">while</span> ( in.available() &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                <span class="keyword">int</span> i = in.read( tmp, <span class="number">0</span>, <span class="number">1024</span> );</span><br><span class="line">                <span class="keyword">if</span> ( i &lt; <span class="number">0</span> ) <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//将执行结果放入到StringBuffer中</span></span><br><span class="line">                <span class="comment">//System.out.println(new String( tmp, 0, i ));</span></span><br><span class="line">                buf.append( <span class="keyword">new</span> String( tmp, <span class="number">0</span>, i ) );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( channelExec.isClosed() ) &#123;</span><br><span class="line">                <span class="comment">//获取退出状态，状态0表示脚本被正确执行</span></span><br><span class="line">                res = channelExec.getExitStatus();</span><br><span class="line">                System.out.println( format( <span class="string">&quot;Exit-status: %d&quot;</span>, res ) );</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印运行结果</span></span><br><span class="line">        System.out.println( buf.toString() );</span><br><span class="line">        <span class="comment">//关闭可执行管道</span></span><br><span class="line">        in.close();</span><br><span class="line">        channelExec.disconnect();</span><br><span class="line">        <span class="keyword">return</span> buf.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Session <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 断开session连接。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        getSession().disconnect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.策略模式实现</p>
<p>策略模式的实体类，通过这个类来选择使用哪种策略</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略模式的实体类，通过这个类来选择使用哪种策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SSHStrategy sshStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StrategyService</span><span class="params">(SSHStrategy sshStrategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sshStrategy = sshStrategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">executeStrategy</span><span class="params">(String cmd, SSHExecutor ssh)</span> <span class="keyword">throws</span> JSchException, IOException, InterruptedException </span>&#123;</span><br><span class="line">        String operationOutput = sshStrategy.doOperation(cmd, ssh);</span><br><span class="line">        <span class="keyword">return</span> operationOutput;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>策略接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SSHStrategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doOperation</span><span class="params">(String cmd, SSHExecutor ssh)</span> <span class="keyword">throws</span> JSchException, IOException, InterruptedException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>策略：</p>
<p>ls</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查看目录下的所有文件夹策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LsOperation</span> <span class="keyword">implements</span> <span class="title">SSHStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doOperation</span><span class="params">(String cmd, SSHExecutor ssh)</span> <span class="keyword">throws</span> JSchException, IOException, InterruptedException </span>&#123;</span><br><span class="line">        String ls = ssh.exec(cmd);</span><br><span class="line">        <span class="keyword">return</span> ls;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>mkdir策略：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新建文件夹策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MkdirOperation</span> <span class="keyword">implements</span> <span class="title">SSHStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doOperation</span><span class="params">(String cmd, SSHExecutor ssh)</span> <span class="keyword">throws</span> JSchException, IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//执行新建文件夹操作，但是新建文件夹是没有返回值的，就通过ls查看文件夹</span></span><br><span class="line">        ssh.exec(cmd);</span><br><span class="line">        String mkdir = ssh.exec(<span class="string">&quot;ls\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mkdir;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>pwd策略</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * pwd策略类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PwdOperation</span> <span class="keyword">implements</span> <span class="title">SSHStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doOperation</span><span class="params">(String cmd, SSHExecutor ssh)</span> <span class="keyword">throws</span> JSchException, IOException, InterruptedException </span>&#123;</span><br><span class="line">        String pwd = ssh.exec(cmd);</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>rename</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重命名策略类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RenameOperation</span> <span class="keyword">implements</span> <span class="title">SSHStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doOperation</span><span class="params">(String cmd, SSHExecutor ssh)</span> <span class="keyword">throws</span> JSchException, IOException, InterruptedException </span>&#123;</span><br><span class="line">        ssh.exec(cmd);</span><br><span class="line">        String rename = ssh.exec(<span class="string">&quot;ls\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> rename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s--基础篇</title>
    <url>/2021/12/06/k8s-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[<p>K8S是用于<strong>管理云平台中多个主机上的容器化</strong>的应用。让部署容器化的应用简单并且高效（powerful）,K8S提供了应用部署，规划，更新，维护的一种机制。</p>
<span id="more"></span>
<h1>K8s</h1>
<h1>K8s介绍</h1>
<p>K8S是用于<strong>管理云平台中多个主机上的容器化</strong>的应用。</p>
<ul>
<li>K8S的目标是让部署容器化的应用简单并且高效（powerful）,K8S提供了应用部署，规划，更新，维护的一种机制。</li>
<li>K8S能够自主的管理容器来控制云平台中的容器按照用户的期望状态运行着。K8S会自动监控，然后控制容器重启，新建。</li>
<li>K8S着重于不间断的服务状态和原云平台应用（NoSQL）。</li>
</ul>
<h2 id="Pod简介">Pod简介</h2>
<p>在K8S中，Pod是最小的，管理，创建，计划的最小单元.</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20161027205746.jpg" alt=""></p>
<p>在K8S中，所有的容器都是在Pod中运行的，一个Pod可以承载一个或者多个相关的容器，同一个Pod中的容器部署在同一个物理主机上并且共享内存。</p>
<p>用户可以自己创建并管理pod。K8S将这些操作简化成两个：</p>
<ol>
<li>基于相同的Pod配置文件部署多个Pod复制品。</li>
<li>当一个Pod挂了或者及其挂了的时候，创建可替代的Pod。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">k8s常用操作：</span><br><span class="line">我们经常需要选中一组Pod，例如，我们要限制一组Pod的某些操作，或者查询某组Pod的状态，作为Kubernetes的基本机制，用户可以给Kubernetes Api中的任何对象贴上一组 key:value的标签，然后，我们就可以通过标签来选择一组相关的Kubernetes Api 对象，然后去执行一些特定的操作，每个资源额外拥有一组（很多） keys 和 values,然后外部的工具可以使用这些keys和vlues值进行对象的检索，这些Map叫做annotations（注释）。</span><br></pre></td></tr></table></figure>
<h2 id="K8S网络设置">K8S网络设置</h2>
<p>K8S可以为每个Pod分配IP地址。K8S支持一种特殊的网络模型，创建了一个地址空间，并且不动态的分配端口，允许用户选择任何想要使用的端口。</p>
<p>当你新建一个集群，为了保证Pod获得IP地址，你需要给Kubernetes分配一个IP地址池。最简单的做法是每当节点与节点之间的通信可以以一下两种方式实现：</p>
<p><strong>（1）配置网络完成Pod的IP地址路由</strong></p>
<p><strong>（2）建立一个拓扑网络</strong></p>
<h2 id="K8S资源">K8S资源</h2>
<p>K8S中的资源都是通过URI进行区分的。每个URI都有一个UID，URI的主要组成部分是：类型（比如POD）、对象的名字、对象的命名空间。</p>
<ul>
<li>对于特殊的对象类型，在同一个命名空间内，所有的名字都是不同的。</li>
<li>在对象只提供名称，不提供命名空间的基础上，假定是默认的命名空间。</li>
<li>UID是空间和时间上的唯一。</li>
</ul>
<h1>K8S架构</h1>
<p>K8S集群包含有节点代理kubelet和Master组件(APIs, scheduler, etc)，一切都基于分布式的存储系统。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20161028141542.jpg" alt=""></p>
<h1>存储</h1>
<p>configMap：存储配置信息</p>
<p>secret：存储加密信息，秘钥等</p>
<p>volume：提供共享存储卷</p>
<p>PersistentVolume：持久卷。</p>
<h2 id="卷（Volume-）">卷（Volume ）</h2>
<p>容器和 Pod 是短暂的。其含义是它们的生命周期可能很短，会被频繁地销毁和创建。容器销毁时，保存在容器内部文件系统中的数据都会被清除。</p>
<p>**为了持久化保存容器的数据，可以使用 Kubernetes Volume。**Volume 的生命周期独立于容器，Pod 中的容器可能被销毁和重建，但 Volume 会被保留。</p>
<p>本质上，Kubernetes Volume <strong>是一个目录</strong>，这一点与 Docker Volume 类似。当 Volume 被 mount 到 Pod，<strong>Pod 中的所有容器都可以访问这个 Volume</strong>。</p>
<p>K8S Volume 也支持多种 backend 类型，包括 <strong>emptyDir、hostPath、GCE Persistent Disk、AWS Elastic Block Store、NFS、Ceph</strong> 等。</p>
<p>Volume 提供了对各种 backend 的抽象，容器在使用 Volume 读写数据的时候不需要关心数据到底是存放在本地节点的文件系统中呢还是云硬盘上。对它来说，所有类型的 Volume 都只是一个目录。</p>
<p><strong>卷的核心是一个目录，其中可能存有数据，Pod 中的容器可以访问该目录中的数据。</strong></p>
<h3 id="持久卷">持久卷</h3>
<p>持久卷（PersistentVolume，PV）是集群中的一块存储，可以由管理员事先供应，或者 使用存储类（Storage Class）来动态供应。 持久卷是集群资源，就像节点也是集群资源一样。PV 持久卷和普通的 Volume 一样，也是使用 卷插件来实现的，只是它们拥有独立于任何使用 PV 的 Pod 的生命周期。 此 API 对象中记述了存储的实现细节，无论其背后是 NFS、iSCSI 还是特定于云平台的存储系统。</p>
<h1>k8s生命周期</h1>
<p>创建集群，部署应用，发布应用，扩展应用，更新应用。</p>
<p>1.创建集群。</p>
<ul>
<li>统一对外提供接口</li>
<li>提供更好的可靠性，服务器宕机那么频繁，物理磁盘那么容易损坏，无须担心，集群统一进行调配</li>
<li>提供更好的性能，组合集群中各个机器的计算存储网络资源，提供更好的TPS和PS</li>
<li>提供横向扩容的能力，在进行横向扩容的时候，性能基本上能呈线性增长</li>
</ul>
<p>使用k8s创建集群的两种方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//初始化集群，会创建一个master节点。</span><br><span class="line">kubectl init</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//创建一个node节点，加入集群</span><br><span class="line">kubectl join xxx</span><br></pre></td></tr></table></figure>
<p>k8s在物理上进行划分的时候，划分了两种类型的主机，一个master节点，主要用来调度，控制集群的资源；node节点，主要用来运行容器的节点，也就是运行服务的节点。</p>
<ul>
<li>master用来控制，存储各种元数据。</li>
<li>node是一个工作节点，用来干活的。</li>
<li>node节点定时与master进行通信，通过kubele进程来汇报信息</li>
</ul>
<p>查看集群信息：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/bbed100cb6b80f08150065ecdca9628a.png" alt="img"></p>
<p>==未完==</p>
<h1>K8S常用命令</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看所有namespace的pods运行情况</span><br><span class="line">kubectl get pods --all-namespaces </span><br><span class="line">#查看具体pods，记得后边跟namespace名字哦</span><br><span class="line">kubectl get pods  kubernetes-dashboard-76479d66bb-nj8wr --namespace=kube-system</span><br><span class="line"># 查看pods具体信息</span><br><span class="line">kubectl get pods -o wide kubernetes-dashboard-76479d66bb-nj8wr --namespace=kube-system</span><br><span class="line"># 查看集群健康状态</span><br><span class="line">kubectl get cs</span><br><span class="line"># 获取所有deployment</span><br><span class="line">kubectl get deployment --all-namespaces</span><br><span class="line"># 查看kube-system namespace下面的pod/svc/deployment 等等（-o wide 选项可以查看存在哪个对应的节点）</span><br><span class="line">kubectl get pod /svc/deployment -n kube-system</span><br><span class="line"># 列出该 namespace 中的所有 pod 包括未初始化的</span><br><span class="line">kubectl get pods --include-uninitialized</span><br><span class="line"># 查看deployment()</span><br><span class="line">kubectl get deployment nginx-app</span><br><span class="line"># 查看rc和servers</span><br><span class="line">kubectl get rc,services</span><br><span class="line"># 查看pods结构信息（重点，通过这个看日志分析错误）</span><br><span class="line"># 对控制器和服务，node同样有效</span><br><span class="line">kubectl describe pods xxxxpodsname --namespace=xxxnamespace</span><br><span class="line"># 其他控制器类似吧，就是kubectl get 控制器 控制器具体名称</span><br><span class="line"># 查看pod日志</span><br><span class="line">kubectl logs $POD_NAME</span><br><span class="line"># 查看pod变量</span><br><span class="line">kubectl exec my-nginx-5j8ok -- printenv | grep SERVICE</span><br><span class="line"># 集群</span><br><span class="line">kubectl get cs           # 集群健康情况</span><br><span class="line">kubectl cluster-info     # 集群核心组件运行情况</span><br><span class="line">kubectl get namespaces    # 表空间名</span><br><span class="line">kubectl version           # 版本</span><br><span class="line">kubectl api-versions      # API</span><br><span class="line">kubectl get events       # 查看事件</span><br><span class="line">kubectl get nodes      //获取全部节点</span><br><span class="line">kubectl delete node k8s2  //删除节点</span><br><span class="line">kubectl rollout status deploy nginx-test</span><br><span class="line">kubectl get deployment --all-namespaces</span><br><span class="line">kubectl get svc --all-namespaces</span><br><span class="line"></span><br><span class="line"># 创建</span><br><span class="line">kubectl create -f ./nginx.yaml           # 创建资源</span><br><span class="line">kubectl apply -f xxx.yaml （创建+更新，可以重复使用）</span><br><span class="line">kubectl create -f .                            # 创建当前目录下的所有yaml资源</span><br><span class="line">kubectl create -f ./nginx1.yaml -f ./mysql2.yaml     # 使用多个文件创建资源</span><br><span class="line">kubectl create -f ./dir                        # 使用目录下的所有清单文件来创建资源</span><br><span class="line">kubectl create -f https://git.io/vPieo         # 使用 url 来创建资源</span><br><span class="line">kubectl run -i --tty busybox --image=busybox    ----创建带有终端的pod</span><br><span class="line">kubectl run nginx --image=nginx                # 启动一个 nginx 实例</span><br><span class="line">kubectl run mybusybox --image=busybox --replicas=5    ----启动多个pod</span><br><span class="line">kubectl explain pods,svc                       # 获取 pod 和 svc 的文档</span><br><span class="line"></span><br><span class="line"># 更新</span><br><span class="line">kubectl rolling-update python-v1 -f python-v2.json      # 滚动更新 pod frontend-v1</span><br><span class="line">kubectl rolling-update python-v1 python-v2 --image=image:v2  # 更新资源名称并更新镜像</span><br><span class="line">kubectl rolling-update python --image=image:v2        # 更新 frontend pod 中的镜像</span><br><span class="line">kubectl rolling-update python-v1 python-v2 --rollback       # 退出已存在的进行中的滚动更新</span><br><span class="line">cat pod.json | kubectl replace -f -           # 基于 stdin 输入的 JSON 替换 pod</span><br><span class="line"></span><br><span class="line"># 为 nginx RC 创建服务，启用本地 80 端口连接到容器上的 8000 端口</span><br><span class="line">kubectl expose rc nginx --port=80 --target-port=8000</span><br><span class="line"></span><br><span class="line"># 更新单容器 pod 的镜像版本（tag）到 v4</span><br><span class="line">kubectl get pod nginx-pod -o yaml | sed &#x27;s/\(image: myimage\):.*$/\1:v4/&#x27; | kubectl replace -f -</span><br><span class="line">kubectl label pods nginx-pod new-label=awesome                      # 添加标签</span><br><span class="line">kubectl annotate pods nginx-pod icon-url=http://goo.gl/XXBTWq       # 添加注解</span><br><span class="line">kubectl autoscale deployment foo --min=2 --max=10         # 自动扩展 deployment “foo”</span><br><span class="line"></span><br><span class="line"># 编辑资源</span><br><span class="line">kubectl edit svc/docker-registry                      # 编辑名为 docker-registry 的 service</span><br><span class="line">KUBE_EDITOR=&quot;nano&quot; kubectl edit svc/docker-registry   # 使用其它编辑器</span><br><span class="line">vim /etc/systemd/system/kubelet.service.d/10-kubeadm.conf #修改启动参数</span><br><span class="line"></span><br><span class="line"># 动态伸缩pod</span><br><span class="line">kubectl scale --replicas=3 rs/foo                       # 将foo副本集变成3个</span><br><span class="line">kubectl scale --replicas=3 -f foo.yaml                  # 缩放“foo”中指定的资源。</span><br><span class="line">kubectl scale --current-replicas=2 --replicas=3 deployment/mysql  # 将deployment/mysql从2个变成3个</span><br><span class="line">kubectl scale --replicas=5 rc/foo rc/bar rc/baz                   # 变更多个控制器的数量</span><br><span class="line">kubectl rollout status deploy deployment/mysql                    # 查看变更进度</span><br><span class="line"></span><br><span class="line">#label 操作</span><br><span class="line">kubectl label：添加label值 kubectl label nodes node1 zone=north #增加节点lable值 spec.nodeSelector: zone: north #指定pod在哪个节点</span><br><span class="line">kubectl label pod redis-master-1033017107-q47hh role=master #增加lable值 [key]=[value]</span><br><span class="line">kubectl label pod redis-master-1033017107-q47hh role- #删除lable值</span><br><span class="line">kubectl label pod redis-master-1033017107-q47hh role=backend --overwrite #修改lable值</span><br><span class="line"></span><br><span class="line"># 滚动升级</span><br><span class="line">kubectl rolling-update：滚动升级 kubectl rolling-update redis-master -f redis-master-controller-v2.yaml #配置文件滚动升级</span><br><span class="line">kubectl rolling-update redis-master --image=redis-master:2.0 #命令升级</span><br><span class="line">kubectl rolling-update redis-master --image=redis-master:1.0 --rollback #pod版本回滚</span><br><span class="line"></span><br><span class="line"># etcdctl 常用操作</span><br><span class="line">etcdctl cluster-health #检查网络集群健康状态</span><br><span class="line">etcdctl --endpoints=https://192.168.71.221:2379 cluster-health #带有安全认证检查网络集群健康状态</span><br><span class="line">etcdctl member list</span><br><span class="line">etcdctl set /k8s/network/config ‘&#123; “Network”: “10.1.0.0/16” &#125;’</span><br><span class="line">etcdctl get /k8s/network/config</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">kubectl delete pod -l app=flannel -n kube-system   # 根据label删除：</span><br><span class="line">kubectl delete -f ./pod.json        # 删除 pod.json 文件中定义的类型和名称的 pod</span><br><span class="line">kubectl delete pod,service baz foo     # 删除名为“baz”的 pod 和名为“foo”的 service</span><br><span class="line">kubectl delete pods,services -l name=myLabel # 删除具有 name=myLabel 标签的 pod 和 serivce</span><br><span class="line">kubectl delete pods,services -l name=myLabel --include-uninitialized   # 删除具有 name=myLabel 标签的 pod 和 service，包括尚未初始化的</span><br><span class="line">kubectl -n my-ns delete po,svc --all     # 删除 my-ns namespace下的所有 pod 和 serivce，包括尚未初始化的</span><br><span class="line">kubectl delete pods prometheus-7fcfcb9f89-qkkf7 --grace-period=0 --force 强制删除</span><br><span class="line">kubectl delete deployment kubernetes-dashboard --namespace=kube-system</span><br><span class="line">kubectl delete svc kubernetes-dashboard --namespace=kube-system</span><br><span class="line">kubectl delete -f kubernetes-dashboard.yaml</span><br><span class="line">kubectl replace --force -f ./pod.json # 强制替换，删除后重新创建资源。会导致服务中断。</span><br><span class="line"></span><br><span class="line"># 交互</span><br><span class="line">kubectl logs nginx-pod                                 # dump 输出 pod 的日志（stdout）</span><br><span class="line">kubectl logs nginx-pod -c my-container                 # dump 输出 pod 中容器的日志（stdout，pod 中有多个容器的情况下使用）</span><br><span class="line">kubectl logs -f nginx-pod                              # 流式输出 pod 的日志（stdout）</span><br><span class="line">kubectl logs -f nginx-pod -c my-container              # 流式输出 pod 中容器的日志（stdout，pod 中有多个容器的情况下使用）</span><br><span class="line">kubectl run -i --tty busybox --image=busybox -- sh  # 交互式 shell 的方式运行 pod</span><br><span class="line">kubectl attach nginx-pod -i                            # 连接到运行中的容器</span><br><span class="line">kubectl port-forward nginx-pod 5000:6000               # 转发 pod 中的 6000 端口到本地的 5000 端口</span><br><span class="line">kubectl exec nginx-pod -- ls /                         # 在已存在的容器中执行命令（只有一个容器的情况下）</span><br><span class="line">kubectl exec nginx-pod -c my-container -- ls /         # 在已存在的容器中执行命令（pod 中有多个容器的情况下）</span><br><span class="line">kubectl top pod POD_NAME --containers               # 显示指定 pod和容器的指标度量</span><br><span class="line">kubectl exec -ti podName /bin/bash     # 进入pod</span><br><span class="line"></span><br><span class="line"># 调度配置</span><br><span class="line">kubectl cordon k8s-node              # 标记 my-node 不可调度</span><br><span class="line">kubectl drain k8s-node               # 清空 my-node 以待维护</span><br><span class="line">kubectl uncordon k8s-node            # 标记 my-node 可调度</span><br><span class="line">kubectl top node k8s-node            # 显示 my-node 的指标度量</span><br><span class="line">kubectl cluster-info dump            # 将当前集群状态输出到 stdout                                    </span><br><span class="line">kubectl cluster-info dump --output-directory=/path/to/cluster-state   # 将当前集群状态输出到 /path/to/cluster-state</span><br><span class="line">#如果该键和影响的污点（taint）已存在，则使用指定的值替换</span><br><span class="line">kubectl taint nodes foo dedicated=special-user:NoSchedule</span><br><span class="line">#查看kubelet进程启动参数</span><br><span class="line">ps -ef | grep kubelet</span><br><span class="line"># 查看日志:</span><br><span class="line">journalctl -u kubelet -f</span><br><span class="line"></span><br><span class="line">导出配置文件：</span><br><span class="line">　　导出proxy</span><br><span class="line">　　kubectl get ds -n kube-system -l k8s-app=kube-proxy -o yaml&gt;kube-proxy-ds.yaml</span><br><span class="line">　　导出kube-dns</span><br><span class="line">　　kubectl get deployment -n kube-system -l k8s-app=kube-dns -o yaml &gt;kube-dns-dp.yaml</span><br><span class="line">　　kubectl get services -n kube-system -l k8s-app=kube-dns -o yaml &gt;kube-dns-services.yaml</span><br><span class="line">　　导出所有 configmap</span><br><span class="line">　　kubectl get configmap -n kube-system -o wide -o yaml &gt; configmap.yaml</span><br><span class="line"></span><br><span class="line">复杂操作命令：</span><br><span class="line">　删除kube-system 下Evicted状态的所有pod：</span><br><span class="line">kubectl get pods -n kube-system |grep Evicted| awk ‘&#123;print $1&#125;’|xargs kubectl delete pod -n kube-system</span><br><span class="line">以下为维护环境相关命令：</span><br><span class="line">重启kubelet服务</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>云计算</category>
      </categories>
      <tags>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>kubesphere对k8s原生的多租户改进</title>
    <url>/2022/02/15/kubesphere%E5%AF%B9k8s%E5%8E%9F%E7%94%9F%E7%9A%84%E5%A4%9A%E7%A7%9F%E6%88%B7%E6%94%B9%E8%BF%9B/</url>
    <content><![CDATA[<h1>Kubernetes多租户</h1>
<p>租户：不仅包括集群中的用户，同时也包括计算，网络，存储等资源组成的工作负载集合。</p>
<p>多租户是一种常见的软件架构，简单概括就是<strong>在多用户环境下实现资源共享，并保证各用户间数据的隔离性</strong>。在多租户集群环境中，集群管理员需要最大程度地避免恶意租户对其他租户的攻击，公平地分配集群资源。</p>
<p>无论企业的多租户形态如何，多租户都无法避免以下两个层面的问题：<strong>逻辑层面的资源隔离；物理资源的隔离。</strong></p>
<p>隔离的安全程度分为软隔离(Soft Multi-tenancy)和硬隔离（Hard Multi-tenancy）。</p>
<ul>
<li>软隔离更多面向企业内部的多租需求，该形态下默认不存在恶意租户，隔离是为了内部团队间的业务保护和对可能的安全攻击进行防护。</li>
<li>硬隔离更多面向对外提供服务的服务供应商，由于该业务形态下无法保证不同租户中业务使用者的安全背景，默认租户之间以及租户与K8s系统之间是存在互相攻击的可能，因此也需要更严格的隔离作为安全保障。</li>
</ul>
<h1>通过RBAC和命名空间实现多租户</h1>
<h2 id="逻辑层面的资源隔离">逻辑层面的资源隔离</h2>
<p>逻辑层面的资源隔离主要包括 API 的访问控制，针对用户的权限控制。Kubernetes 中的 <strong>RBAC</strong>和<strong>命名空间</strong> (namespace) 提供了基本的逻辑隔离能力</p>
<p>通过namespace隔离：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/multi-tenant-design-considerations-for-amazon-eks-clusters1.jpg" alt="img"></p>
<p>基于角色（Role）的访问控制（RBAC）是一种基于组织中用户的角色来调节控制对 计算机或网络资源的访问的方法。<strong>通过设置–authorization-mode=RBAC，启用RABC</strong>。使用Role绑定某个命名空间，ClusterRole绑定某个集群。</p>
<p>在RABC API中，通过如下的步骤进行授权：1）定义角色：在定义角色时会指定此角色对于资源的访问控制的规则；2）绑定角色：将主体与角色进行绑定，对用户进行访问授权。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image.png" alt="img"></p>
<h3 id="Kubernetes-用户">Kubernetes 用户</h3>
<p>RBAC API 声明了四种 Kubernetes 对象：<em>Role</em>、<em>ClusterRole</em>、 <em>RoleBinding</em>和<em>ClusterRoleBinding</em>。</p>
<h4 id="Role和ClusterRole">Role和ClusterRole</h4>
<p><strong>基于 RBAC 的权限管理方式：RBAC用于定义谁能够在Kubernetes API上执行的操作</strong>。这种授权机制可以通过ClusterRole作用于整个集群（集群作用域），也可以通过Role作用于某个命名空间（命名空间作用域；创建Role时，必须指定所属的命名空间）。</p>
<p>Role实例：</p>
<p>配置pod-reader用户，设置对default命名空间内的pods的读访问权限。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-reader</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>] <span class="comment"># &quot;&quot; 标明 core API 组</span></span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">&quot;pods&quot;</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;list&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>ClusterRole 示例:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># &quot;namespace&quot; 被忽略，因为 ClusterRoles 不受名字空间限制</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">secret-reader</span>    <span class="comment">#ClusterRole的名称</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">  <span class="comment"># 在 HTTP 层面，用来访问 Secret 对象的资源的名称为 &quot;secrets&quot;</span></span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">&quot;secrets&quot;</span>]          <span class="comment">#获取对secrets的操作权限。</span></span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;list&quot;</span>]      <span class="comment">#权限</span></span><br></pre></td></tr></table></figure>
<h4 id="相关参数">相关参数</h4>
<ul>
<li>Role、ClsuterRole <code>verbs</code>可配置参数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;, &quot;exec&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>Role、ClsuterRole <code>resource</code>可配置参数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;services&quot;, &quot;endpoints&quot;, &quot;pods&quot;, &quot;secrets&quot;, &quot;configmaps&quot;, &quot;crontabs&quot;, &quot;deployments&quot;, </span><br><span class="line">&quot;jobs&quot;, &quot;nodes&quot;, &quot;rolebindings&quot;, &quot;clusterroles&quot;, &quot;daemonsets&quot;, &quot;replicasets&quot;, </span><br><span class="line">&quot;statefulsets&quot;, &quot;horizontalpodautoscalers&quot;,&quot;replicationcontrollers&quot;,&quot;cronjobs&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>Role、ClsuterRole <strong>APIGroup</strong>可配置参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;,&quot;apps&quot;, &quot;autoscaling&quot;, &quot;batch&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="RoleBinding-和-ClusterRoleBinding">RoleBinding 和 ClusterRoleBinding</h4>
<p>角色绑定：<strong>是将Role中定义的权限赋予一个或者一组用户</strong>。</p>
<ul>
<li>RoleBinding 在指定的名字空间中执行授权，一个 RoleBinding 可以引用同一的namespace中的任何 Role。</li>
<li>一个RoleBinding 可以引用某 ClusterRole 并将该 ClusterRole 绑定到 RoleBinding 所在的名字空间。</li>
</ul>
<p>ClusterRoleBinding：是在集群范围执行授权。如果需要将某 ClusterRole 绑定到集群中所有名字空间，使用 ClusterRoleBinding。</p>
<p><strong>RoleBinding实例：</strong></p>
<p>RoleBinding 将 “pod-reader” Role 授予在 “default” 名字空间中的用户 “jane”。 这样，用户 “jane” 就具有了读取 “default” 名字空间中 pods 的权限。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="comment"># 此角色绑定允许 &quot;jane&quot; 读取 &quot;default&quot; 名字空间中的 Pods</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">read-pods</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="comment"># 你可以指定不止一个“subject（主体）”</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">User</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jane</span> <span class="comment"># &quot;name&quot; 是区分大小写的</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="comment"># &quot;roleRef&quot; 指定与某 Role 或 ClusterRole 的绑定关系</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span> <span class="comment"># 此字段必须是 Role 或 ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-reader</span>     <span class="comment"># 此字段必须与你要绑定的 Role 或 ClusterRole 的名称匹配（pod-reader是在role实例中创建的）</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>
<p><strong>ClusterRoleBinding实例：</strong></p>
<p>要跨整个集群完成访问权限的授予，可以使用一个 ClusterRoleBinding。 下面的 ClusterRoleBinding 允许 “manager” 组内的所有用户访问任何名字空间中的 Secrets。</p>
<p>被绑定的secret-reader（ClusterRole角色）拥有访问所有命名空间中的Secrets的权限。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="comment"># 此集群角色绑定允许 “manager” 组中的任何人访问任何名字空间中的 secrets</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">read-secrets-global</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">Group</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">manager</span> <span class="comment"># &#x27;name&#x27; 是区分大小写的</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">secret-reader</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<p>创建了绑定之后，<strong>不能再修改绑定对象所引用的 Role 或 ClusterRole</strong>。 试图改变绑定对象的 <code>roleRef</code> 将导致合法性检查错误。 如果想要改变现有绑定对象中 <code>roleRef</code> 字段的内容，必须删除重新创建绑定对象。</p>
<h2 id="物理资源的隔离">物理资源的隔离</h2>
<p>物理资源的隔离主要包括节点、网络的隔离，当然也包括容器运行时安全。可以通过 NetworkPolicy 对网络进行划分，ResourceQuota对资源配额进行设置。</p>
<h3 id="设置资源配额">设置资源配额</h3>
<p><strong>限制使用并确保租户之间的公平性</strong>。</p>
<p>由<code>ResourceQuota</code>对象定义的资源配额提供限制每个命名空间的聚合资源消耗的约束。</p>
<p>实例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ResourceQuota</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mem-cpu-demo</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">namespace1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hard:</span></span><br><span class="line">    <span class="attr">requests.cpu:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="attr">requests.memory:</span> <span class="string">1Gi</span></span><br><span class="line">    <span class="attr">limits.cpu:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line">    <span class="attr">limits.memory:</span> <span class="string">2Gi</span></span><br></pre></td></tr></table></figure>
<p>使用资源配额，可以为工作负载分配有限的资源，防止租户之间相互干扰。还可以通过Limit Ranges定义每个Pod甚至是容器的默认、最小与最大请求及其限制条件。</p>
<p>参数说明：</p>
<table>
<thead>
<tr>
<th>资源名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>limits.cpu</code></td>
<td>在所有处于非终端状态的 Pod 中，CPU 限制的总和不能超过此值。</td>
</tr>
<tr>
<td><code>limits.memory</code></td>
<td>在所有处于非终端状态的 Pod 中，内存限制的总和不能超过此值。</td>
</tr>
<tr>
<td><code>requests.cpu</code></td>
<td>在所有处于非终端状态的 Pod 中，CPU 请求的总和不能超过这个值。</td>
</tr>
<tr>
<td><code>requests.memory</code></td>
<td>在所有处于非终端状态的 Pod 中，内存请求的总和不能超过这个值。</td>
</tr>
<tr>
<td><code>hugepages-&lt;size&gt;</code></td>
<td>在所有处于非终端状态的 Pod 中，指定大小的大页面请求数不能超过该值。</td>
</tr>
<tr>
<td><code>cpu</code></td>
<td>与…一样<code>requests.cpu</code></td>
</tr>
<tr>
<td><code>memory</code></td>
<td>与…一样<code>requests.memory</code></td>
</tr>
</tbody>
</table>
<h3 id="网络隔离">网络隔离</h3>
<p><strong>防止跨租户的网络流量</strong></p>
<p>在默认情况下，<strong>Pod可以在同一集群的网络上跨不同的命名空间实现通信。</strong></p>
<p>NetworkPolicy可以对网络流量进行划分。假设需要根据命名空间对各个租户进行隔离，则可以<strong>使用以下网络策略确保各租户只能在所在命名空间namespace1之内进行网络通信</strong>（换句话说，拒绝该集群之内不同命名空间之间的相互通信）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion: networking.k8s.io/v1kind: NetworkPolicymetadata:  name: default-np-ns1  namespace: namespace1spec:  podSelector:</span> &#123;&#125;  <span class="attr">policyTypes:  - Ingress  - Egress  ingress:  - from:    - namespaceSelector:        matchLabels:          nsname: namespace1  egress:  - to:    - namespaceSelector:        matchLabels:          nsname:</span> <span class="string">namespace1</span></span><br></pre></td></tr></table></figure>
<h3 id="存储隔离">存储隔离</h3>
<p>在使用共享集群时，不同的租户可能需要不同的存储资源类型。Kubernetes提供不同的工具用于管理存储资源。其中最重要的是<strong>Volume</strong>，它能够以持久性形式将存储资源接入Pod并管理存储资源的整个生命周期。不建议直接挂载由节点提供的存储卷（最好在配合PSP的多租户设计中直接禁用掉对本地存储卷的访问）。</p>
<p>PersistentVolume(PV)子系统的一些关键功能及其与<em>PersistentVolumeClaim</em> (PVC)的关系。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/multi-tenant-design-considerations-for-amazon-eks-clusters2.jpg" alt="img"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion: v1kind: ResourceQuotametadata:  name: storage-ns1  namespace: namespace1spec:  hard:    storagens2.storageclass.storage.k8s.io/requests.storage:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<table>
<thead>
<tr>
<th>资源名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>requests.storage</code></td>
<td>在所有持久卷声明中，存储请求的总和不能超过此值。</td>
</tr>
<tr>
<td><code>persistentvolumeclaims</code></td>
<td>命名空间中可以存在的<a href="https://v1-21.docs.kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims">PersistentVolumeClaims</a>总数。</td>
</tr>
<tr>
<td><code>&lt;storage-class-name&gt;.storageclass.storage.k8s.io/requests.storage</code></td>
<td>在与 关联的所有持久卷声明中<code>&lt;storage-class-name&gt;</code>，存储请求的总和不能超过此值。</td>
</tr>
<tr>
<td><code>&lt;storage-class-name&gt;.storageclass.storage.k8s.io/persistentvolumeclaims</code></td>
<td>在与 storage-class-name 关联的所有持久卷声明中，可以存在于命名空间中的<a href="https://v1-21.docs.kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims">持久卷声明</a>的总数。</td>
</tr>
</tbody>
</table>
<h1>KubeSphere平台实现多租户</h1>
<h2 id="逻辑层面的资源隔离-2">逻辑层面的资源隔离</h2>
<p>KubeSphere 的多租户系统分<strong>三个层级，即集群、企业空间和项目</strong>。KubeSphere 中的项目等同于 Kubernetes 的命名空间。</p>
<p>与 Kubernetes 相同，KubeSphere 通过 RBAC 对用户的权限加以控制，实现逻辑层面的资源隔离。</p>
<p>下图是一个KubeSphere多租户的一个实例：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/k8s%E5%A4%9A%E7%A7%9F%E6%88%B7.png" alt="尚硅谷KubeSphere逻辑图"></p>
<h3 id="用户角色">用户角色</h3>
<ul>
<li>平台角色：主要控制用户对平台资源的访问权限，如集群的管理、企业空间的管理、平台用户的管理等。</li>
<li>企业空间角色：主要控制企业空间成员在企业空间下的资源访问权限，如企业空间下项目、DevOps 项目的管理等。</li>
<li>项目角色：主要控制项目下资源的访问权限，如工作负载的管理、流水线的管理等。</li>
</ul>
<h4 id="平台角色">平台角色</h4>
<table>
<thead>
<tr>
<th style="text-align:left">内置角色</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>workspaces-manager</code></td>
<td style="text-align:left">企业空间管理员，管理平台所有企业空间。</td>
</tr>
<tr>
<td style="text-align:left"><code>users-manager</code></td>
<td style="text-align:left">用户管理员，管理平台所有用户。</td>
</tr>
<tr>
<td style="text-align:left"><code>platform-regular</code></td>
<td style="text-align:left">平台普通用户，在被邀请加入企业空间或集群之前没有任何资源操作权限。</td>
</tr>
<tr>
<td style="text-align:left"><code>platform-admin</code></td>
<td style="text-align:left">平台管理员，可以管理平台内的所有资源。</td>
</tr>
</tbody>
</table>
<h4 id="企业空间角色">企业空间角色</h4>
<table>
<thead>
<tr>
<th style="text-align:left">角色</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>workspace-admin</code></td>
<td style="text-align:left">管理指定企业空间中的所有资源（在此示例中，此帐户用于邀请新成员加入企业空间）。</td>
</tr>
<tr>
<td style="text-align:left"><code>workspace-self-provisioner</code></td>
<td style="text-align:left">创建和管理项目以及 DevOps 项目，并邀请新成员加入项目。</td>
</tr>
<tr>
<td style="text-align:left"><code>workspace-viewer</code></td>
<td style="text-align:left"><code>project-regular</code> 将由 <code>project-admin</code> 邀请至项目或 DevOps 项目。该帐户将用于在指定项目中创建工作负载、流水线和其他资源。</td>
</tr>
<tr>
<td style="text-align:left"><code>workspace-regular</code></td>
<td style="text-align:left">在指定项目中创建负载、流水线和其他的资源</td>
</tr>
</tbody>
</table>
<h4 id="项目角色">项目角色</h4>
<ul>
<li>admin</li>
<li>operator</li>
<li>viewer</li>
</ul>
<h2 id="kubesphere对k8s原生的多租户改进">kubesphere对k8s原生的多租户改进</h2>
<ul>
<li><strong>多租户</strong>：它提供了基于角色的细粒度身份验证和三层授权的系统。</li>
<li><strong>统一认证</strong>：KubeSphere 与 LDAP 或 AD 协议的中央身份验证系统兼容。还支持单点登录 (SSO)，以实现租户身份的统一身份验证。</li>
<li><strong>授权系统</strong>：它分为三个级别：集群，企业空间和项目。 KubeSphere 确保可以共享资源，同时完全隔离多个级别的不同角色以确保资源安全。</li>
</ul>
<h3 id="k8s原生的多租户存在的问题">k8s原生的多租户存在的问题</h3>
<p>Kubernetes 中的 RBAC和命名空间 (namespace) 提供了基本的逻辑隔离能力，但在大部分企业环境中并不适用。企业中的租户往往需要跨多个命名空间甚至是多个集群进行资源管理。除此之外，针对用户的行为审计、租户隔离的日志、事件查询也是不可或缺的能力。</p>
<h3 id="KubeSphere-中的多租户改进">KubeSphere 中的多租户改进</h3>
<p>在 KubeSphere 中企业空间是最小的租户单元，企业空间提供了跨集群、跨项目（即 Kubernetes 中的命名空间）共享资源的能力。企业空间中的成员可以在授权集群中创建项目，并通过邀请授权的方式参与项目协同。</p>
<p><strong>多级的权限控制和资源配额限制是 KubeSphere 中资源隔离的基础</strong>，奠定了多租户最基本的形态。</p>
<h4 id="逻辑隔离">逻辑隔离</h4>
<p>与 Kubernetes 相同，KubeSphere 通过 RBAC 对用户的权限加以控制，实现逻辑层面的资源隔离。</p>
<p>KubeSphere 中的权限控制分为平台、企业空间、项目三个层级，通过角色来控制用户在不同层级的资源访问权限。</p>
<h4 id="网络隔离-2">网络隔离</h4>
<p>KubeSphere 中还可以针对企业空间和项目设置网络隔离策略。</p>
<p>从 3.0.0 版本开始，用户可以在 KubeSphere 中配置原生 Kubernetes 的网络策略。网络策略是一种以应用为中心的结构，使您能够指定如何允许容器组通过网络与各种网络实体进行通信。通过网络策略，用户可以在同一集群内实现网络隔离，这意味着可以在某些实例（容器组）之间设置防火墙。</p>
<p>在cluster-configuration.yaml配置文件中，修改配置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">network:  networkpolicy:    enabled:</span> <span class="literal">true</span> <span class="comment"># 将“false”更改为“true”。</span></span><br></pre></td></tr></table></figure>
<h4 id="操作审计">操作审计</h4>
<p>KubeSphere 审计日志系统提供了一套与安全相关并按时间顺序排列的记录，按顺序记录了与单个用户、管理人员或系统其他组件相关的活动。对 KubeSphere 的每个请求都会生成一个事件，然后写入 Webhook，并根据一定的规则进行处理。</p>
<p>启动审查功能：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auditing:  enabled:</span> <span class="literal">true</span> <span class="comment"># 将“false”更改为“true”。</span></span><br></pre></td></tr></table></figure>
<p>默认情况下，如果启用了审计功能，将安装内置 Elasticsearch。对于生产环境，如果您想启用审计功能，强烈建议在该 YAML 文件中设置以下值：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">es:</span>  <span class="comment"># Storage backend for logging, tracing, events and auditing.</span></span><br><span class="line">  <span class="attr">elasticsearchMasterReplicas:</span> <span class="number">1</span>  <span class="comment"># The total number of master nodes. Even numbers are not allowed.</span></span><br><span class="line">  <span class="attr">elasticsearchDataReplicas:</span> <span class="number">1</span>     <span class="comment"># The total number of data nodes.</span></span><br><span class="line">  <span class="attr">elasticsearchMasterVolumeSize:</span> <span class="string">4Gi</span>  <span class="comment"># The volume size of Elasticsearch master nodes.</span></span><br><span class="line">  <span class="attr">elasticsearchDataVolumeSize:</span> <span class="string">20Gi</span>   <span class="comment"># The volume size of Elasticsearch data nodes.</span></span><br><span class="line">  <span class="attr">logMaxAge:</span> <span class="number">7</span> <span class="comment"># Log retention day in built-in Elasticsearch. It is 7 days by default.</span></span><br><span class="line">  <span class="attr">elkPrefix:</span> <span class="string">logstash</span>    <span class="comment"># The string making up index names. The index name will be formatted as ks-&lt;elk_prefix&gt;-log.</span></span><br><span class="line">  <span class="attr">externalElasticsearchUrl:</span> <span class="comment"># The Host of external Elasticsearch.</span></span><br><span class="line">  <span class="attr">externalElasticsearchPort:</span> <span class="comment"># The port of external Elasticsearch.</span></span><br></pre></td></tr></table></figure>
<h4 id="认证鉴权">认证鉴权</h4>
<p>KubeSphere 完整的认证鉴权链路如下图所示，可以通过 OPA 拓展 Kubernetes 的 RBAC 规则。KubeSphere 团队计划集成 Gatekeeper 以支持更为丰富的安全管控策略。</p>
<p>OPA（open policy agent）:</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/request-chain.jpg" alt="request-chain"></p>
<h1>参考文献：</h1>
<p>K8S中RBAC：<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/">https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/</a></p>
<p>Kubernetes的租户模型：<a href="https://v1-21.docs.kubernetes.io/blog/2021/04/15/three-tenancy-models-for-kubernetes/">https://v1-21.docs.kubernetes.io/blog/2021/04/15/three-tenancy-models-for-kubernetes/</a></p>
<p>网络隔离中的相关配置：<a href="https://docs.aws.amazon.com/eks/latest/userguide/calico.html">https://docs.aws.amazon.com/eks/latest/userguide/calico.html</a></p>
<p>资源配额设置：<a href="https://v1-21.docs.kubernetes.io/docs/concepts/policy/resource-quotas/">https://v1-21.docs.kubernetes.io/docs/concepts/policy/resource-quotas/</a></p>
<p>多租户实例：<a href="https://www.cnblogs.com/dream397/p/15011693.html">https://www.cnblogs.com/dream397/p/15011693.html</a></p>
<p>KubeSphere：<a href="https://kubesphere.io/zh/docs/quick-start/create-workspace-and-project/">https://kubesphere.io/zh/docs/quick-start/create-workspace-and-project/</a></p>
<p>KubeSphere3.0配置网络策略：<a href="https://kubesphere.io/zh/docs/pluggable-components/network-policy/">https://kubesphere.io/zh/docs/pluggable-components/network-policy/</a></p>
<p>多租户配置实例：<a href="https://gitee.com/watching/KubeCube/tree/main/config/rbac">https://gitee.com/watching/KubeCube/tree/main/config/rbac</a></p>
]]></content>
      <categories>
        <category>调研</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>redis哨兵模式，sentinel获取master的信息</title>
    <url>/2021/12/16/redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%EF%BC%8Csentinel%E8%8E%B7%E5%8F%96master%E7%9A%84%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>哨兵模式是主从的升级版，因为主从的出现故障后，不会自动恢复，需要人为干预，这就很蛋疼啊。</p>
<p>在主从的基础上，实现哨兵模式就是为了监控主从的运行状况，对主从的健壮进行监控，就好像哨兵一样，只要有异常就发出警告，对异常状况进行处理。</p>
<span id="more"></span>
<h1>哨兵模式基本概念</h1>
<p>哨兵模式是主从的升级版，因为主从的出现故障后，不会自动恢复，需要人为干预，这就很蛋疼啊。</p>
<p>在主从的基础上，实现哨兵模式就是为了监控主从的运行状况，对主从的健壮进行监控，就好像哨兵一样，只要有异常就发出警告，对异常状况进行处理。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/v2-0c8f6c4253843790b774fd216dea58c5_720w.jpg" alt="img"></p>
<ol>
<li><strong>「监控」</strong>：监控master和slave是否正常运行，以及哨兵之间也会相互监控</li>
<li><strong>「自动故障恢复」</strong>：当master出现故障的时候，会自动选举一个slave作为master顶上去。</li>
</ol>
<h1>根据sentinel获取master的信息</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.HostAndPort;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.exceptions.JedisException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindMasterService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过传入的哨兵集群找到主节点的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sentinels：哨兵集群</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> masterName：主节点的名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HostAndPort <span class="title">findMaster</span><span class="params">(Set&lt;String&gt; sentinels,String masterName)</span></span>&#123;</span><br><span class="line">        HostAndPort master = <span class="keyword">null</span>;</span><br><span class="line">        String password = <span class="string">&quot;xdata@123&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历哨兵，根据哨兵获取主节点的信息</span></span><br><span class="line">        <span class="keyword">for</span> (String sentinel:sentinels)&#123;</span><br><span class="line">            <span class="comment">//当前的集群节点是String，封装成HostAndPost类</span></span><br><span class="line">            HostAndPort hap = HostAndPort.parseString(sentinel);</span><br><span class="line"></span><br><span class="line">            Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//使用Jedis连接哨兵,当前哨兵挂了，会抛出异常</span></span><br><span class="line">                jedis = <span class="keyword">new</span> Jedis(hap.getHost(),hap.getPort());</span><br><span class="line">                <span class="comment">//密码验证,jedis不需要密码验证，直接可以连接。</span></span><br><span class="line">                <span class="comment">//jedis.auth(password);</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 向哨兵发送指令：sentinel get-master-addr-by-name masterName 可以获取主节点的host的端口</span></span><br><span class="line">                List&lt;String&gt; masterAddress = jedis.sentinelGetMasterAddrByName(masterName);</span><br><span class="line">                <span class="comment">//当前哨兵宕机时，masterAddress为空。</span></span><br><span class="line">                <span class="keyword">if</span> (masterAddress.size() == <span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="comment">//获取到master的信息</span></span><br><span class="line">                    master = <span class="keyword">new</span> HostAndPort(masterAddress.get(<span class="number">0</span>),Integer.parseInt(masterAddress.get(<span class="number">1</span>)));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (JedisException e)&#123;</span><br><span class="line">                <span class="comment">//出现异常可能是因为当前sentinel挂了，继续遍历下一个sentinel</span></span><br><span class="line">                e.getMessage();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (jedis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    jedis.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> master;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.HostAndPort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FindMasterServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindMaster</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FindMasterService findMasterService = <span class="keyword">new</span> FindMasterService();</span><br><span class="line">        Set&lt;String&gt; sentinels = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        sentinels.add(<span class="string">&quot;host:post&quot;</span>);              <span class="comment">//host:post修改端口号</span></span><br><span class="line">        sentinels.add(<span class="string">&quot;host:post&quot;</span>);</span><br><span class="line">        sentinels.add(<span class="string">&quot;host:post&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String masterName = <span class="string">&quot;mymaster&quot;</span>;</span><br><span class="line">        HostAndPort master = findMasterService.findMaster(sentinels, masterName);</span><br><span class="line">        System.out.println(master.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>修改（代码优化）</h1>
<p>之前的代码之后获得master的信息，使用这个方法可以得到master、slave与sentinel的信息（ip、port、role、status）。</p>
<p>之前写的代码，层次结构不够清晰，代码不够规范，根据师兄的建议修改了一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主从模式下，查找host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sentinelsList：哨兵列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> hosts列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;HostServiceDTO&gt; <span class="title">sentinelFindHosts</span><span class="params">(List&lt;ServiceCheckDTO&gt; sentinelsList)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String password = sentinelsList.get(<span class="number">0</span>).getPassword();</span><br><span class="line">        List&lt;HostServiceDTO&gt; hosts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> writeInList = <span class="keyword">true</span>;       <span class="comment">//用来标记是否已经将master与slave的信息写入到list中</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ServiceCheckDTO sentinel : sentinelsList)&#123;</span><br><span class="line"></span><br><span class="line">            String sentinelStatus = ServiceStatusEnum.RUNNING.getName();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>(Jedis jedis = <span class="keyword">new</span> Jedis(sentinel.getIp(),Integer.parseInt(sentinel.getPort())))&#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 根据sentinel获得master,主从模式master只有一个</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                List&lt;Map&lt;String, String&gt;&gt; mastersMeg = jedis.sentinelMasters();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (writeInList &amp;&amp; !mastersMeg.isEmpty())&#123;</span><br><span class="line">                    Map&lt;String, String&gt; masterMeg = mastersMeg.get(<span class="number">0</span>);</span><br><span class="line">                    String masterStatus = getStatus(masterMeg, password);</span><br><span class="line">                    HostServiceDTO master = HostServiceDTO.builder()</span><br><span class="line">                            .ip(masterMeg.get(<span class="string">&quot;ip&quot;</span>))</span><br><span class="line">                            .port(masterMeg.get(<span class="string">&quot;port&quot;</span>))</span><br><span class="line">                            .role(ServiceRoleEnum.MASTER.getName())</span><br><span class="line">                            .status(masterStatus)</span><br><span class="line">                            .build();</span><br><span class="line">                    hosts.add(master);</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 根据master得到slaves</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    List&lt;Map&lt;String, String&gt;&gt; slavesMeg = jedis.sentinelSlaves(masterMeg.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                    <span class="keyword">for</span> (Map&lt;String, String&gt; slaveMeg : slavesMeg)&#123;</span><br><span class="line">                        String slaveStatus = getStatus(slaveMeg, password);</span><br><span class="line">                        HostServiceDTO slave = HostServiceDTO.builder()</span><br><span class="line">                                .ip(slaveMeg.get(<span class="string">&quot;ip&quot;</span>))</span><br><span class="line">                                .port(slaveMeg.get(<span class="string">&quot;port&quot;</span>))</span><br><span class="line">                                .role(ServiceRoleEnum.SLAVE.getName())</span><br><span class="line">                                .status(slaveStatus)</span><br><span class="line">                                .build();</span><br><span class="line">                        hosts.add(slave);</span><br><span class="line">                    &#125;</span><br><span class="line">                    writeInList = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (JedisException e)&#123;</span><br><span class="line">                sentinelStatus = ServiceStatusEnum.STOPPED.getName();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 写入sentinel</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            HostServiceDTO sentinelHost = HostServiceDTO.builder()</span><br><span class="line">                    .ip(sentinel.getIp())</span><br><span class="line">                    .port(sentinel.getPort())</span><br><span class="line">                    .role(ServiceRoleEnum.SENTINEL.getName())</span><br><span class="line">                    .status(sentinelStatus)</span><br><span class="line">                    .build();</span><br><span class="line">            hosts.add(sentinelHost);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hosts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getStatus</span><span class="params">(Map&lt;String, String&gt; host, String password)</span></span>&#123;</span><br><span class="line">        String hostIp = host.get(<span class="string">&quot;ip&quot;</span>);</span><br><span class="line">        String hostPort = host.get(<span class="string">&quot;port&quot;</span>);</span><br><span class="line">        String status = ServiceStatusEnum.RUNNING.getName();</span><br><span class="line">        <span class="keyword">try</span>(Jedis masterLive = <span class="keyword">new</span> Jedis(hostIp, Integer.parseInt(hostPort)))&#123;</span><br><span class="line">            masterLive.auth(password);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (JedisException e)&#123;</span><br><span class="line">            status = ServiceStatusEnum.STOPPED.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>代码优化总结：</p>
<ol>
<li>公共模块提取成一个方法。</li>
<li>超过三次使用的值，需要设置为一个常量（private final …），如果在多个文件中使用到了的话，就放到常量接口中。</li>
<li>注意代码性能，减少for，判断条件优化</li>
<li>注意代码层次结构</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>代码托管工具：Git</title>
    <url>/2021/10/20/%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1%E5%B7%A5%E5%85%B7%EF%BC%9AGit/</url>
    <content><![CDATA[<p><em>Git</em>（读音为/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。在团队协作开发中起到了十分重要的作用。</p>
<span id="more"></span>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111133705830.png" alt="image-20211111133705830"></p>
<h1>版本控制</h1>
<h2 id="版本控制工具应该具备的功能">版本控制工具应该具备的功能</h2>
<ul>
<li>协同修改：多个人并行的修改服务器的同一个文件。</li>
<li>数据备份：不仅保存目录和文件的当前状态，还能够保存每一个提交的历史状态。</li>
<li>版本控制：每次只保存修改的数据，不保存重复数据。Git采用文件系统快照的方式进行保存。</li>
<li>权限控制：对团队中的不同人员拥有不同的权限；对团队之外的开发者提供的代码进行审核。</li>
<li>历史记录。</li>
<li>分支管理：允许开发团队在工作工程中多分支同时进行工作。</li>
</ul>
<h2 id="版本控制介绍">版本控制介绍</h2>
<p>版本控制工具：</p>
<ul>
<li>集中式版本控制工具：SVN。存在单点故障的问题。</li>
<li>分布式版本控制工具：Git。<strong>可以避免单点故障。</strong></li>
</ul>
<h1>Git简介</h1>
<h3 id="Git的优势">Git的优势</h3>
<ul>
<li>大部分操作都在本地运行，不需要联网。</li>
<li>保证完整性（通过Hash值）。</li>
<li>尽可能的添加数据，而不是删除或修改数据。</li>
<li>分支操作非常快捷流畅（内部通过快照操作）。</li>
<li>与Linux命令全面兼容。</li>
</ul>
<h3 id="Git的结构">Git的结构</h3>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111140409757.png" alt="image-20211111140409757"></p>
<h3 id="Git和代码托管中心">Git和代码托管中心</h3>
<p>远程托管代码，将代码保存到远程库中。</p>
<p>局域网：GitLab</p>
<p>外网环境：GitHub，码云</p>
<h3 id="本地库和远程库">本地库和远程库</h3>
<p>团队内协作：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111141146749.png" alt="image-20211111141146749"></p>
<p>团队外协作：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111141435649.png" alt="image-20211111141435649"></p>
<h1>Git的基本操作</h1>
<h2 id="本地库初始化：">本地库初始化：</h2>
<ul>
<li>命令：git init</li>
<li>效果：</li>
</ul>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111142745692.png" alt="image-20211111142745692"></p>
<ul>
<li>注意：.git/文件中存放的是本地库相关的子目录和文件，不要删除和修改。</li>
</ul>
<p>设置签名</p>
<ul>
<li>
<p>形式：</p>
<p>用户名：liwenkai</p>
<p>email地址：li17669498364@163.com</p>
</li>
<li>
<p>作用：区分不同的开发人员的身份。</p>
</li>
</ul>
<p>辨析：这里设置的签名和代码托管中心的账号密码没有任何关系。</p>
<ul>
<li>
<p>命令（优先级：就近原则，二者都有，采用项目级别）：</p>
<ul>
<li>项目级别：仅在当前本地库范围内有效。
<ul>
<li>git config <a href="http://user.name">user.name</a> liwenkai</li>
<li>git config user.email   <a href="mailto:li17669498364@163.com">li17669498364@163.com</a></li>
<li>项目保存的位置：./.git/config</li>
<li><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111150801163.png" alt="image-20211111150801163"></li>
</ul>
</li>
<li>系统用户级别：登录等钱操作系统的用户范围。git config --global
<ul>
<li>git config <strong>–global</strong> <a href="http://user.name">user.name</a> liwenkai</li>
<li>git config <strong>–global</strong> user.email   <a href="mailto:li17669498364@163.com">li17669498364@163.com</a></li>
<li>信息保存的位置：~/.gitconfig文件下</li>
</ul>
</li>
</ul>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111151240376.png" alt="image-20211111151240376"></p>
</li>
</ul>
<h2 id="查看状态">查看状态</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
<p>此时暂存区与本地库中都没有文件：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111164356213.png" alt="image-20211111164356213"></p>
<h2 id="提交文件到暂存区">提交文件到暂存区</h2>
<p>创造了一个文件（vim good.txt）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim good.txt</span><br><span class="line"></span><br><span class="line">:wq</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111164720978.png" alt="image-20211111164720978"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add good.txt</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111165023182.png" alt="image-20211111165023182"></p>
<p>提交完成后再查看状态：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111165150226.png" alt="image-20211111165150226"></p>
<p>从<strong>缓存区</strong>移除文件,工作区的文件不变：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm --cached good.txt</span><br></pre></td></tr></table></figure>
<h2 id="提交文件到本地库">提交文件到本地库</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit good.txt</span><br></pre></td></tr></table></figure>
<p>给本次提交添加注释（vim操作）：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111165723660.png" alt=":"></p>
<p>如果不行进入vim页面，可以直接使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;my second commit,nodify good.txt&quot;</span><br></pre></td></tr></table></figure>
<p>添加成功之后：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111170126999.png" alt="image-20211111170126999"></p>
<p>使用cat查看文件内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat good.txt</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111170315749.png" alt="image-20211111170315749"></p>
<p>查看状态：</p>
<p>暂存区为空，工作树也是干净的。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111170359958.png" alt="image-20211111170359958"></p>
<p>如果修改了good.txt文件，需要重新执行add和commit操作。</p>
<h2 id="实现版本前进与后退">实现版本前进与后退</h2>
<p><strong>1.查看版本信息</strong></p>
<p>查看提交记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br><span class="line">多屏显示时的控制方法：</span><br><span class="line">空格向上翻页，</span><br><span class="line">b向下翻页</span><br><span class="line">q退出</span><br></pre></td></tr></table></figure>
<p>HEAD表示指针，指向当前版本。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111171754150.png" alt="image-20211111171754150"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以一行的形式显示：git log --pretty=oneline或者git log --oneline</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111172348711.png" alt="image-20211111172348711"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HEAD@&#123;移动到当前版本需要多少步&#125;：git reflog</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111172548154.png" alt="image-20211111172548154"></p>
<p><strong>2.基于索引值前进后退【推荐使用】</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard=索引值需要提前知道前进版本的索引值，配合git reflog命令使用</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111202713257.png" alt="image-20211111202713257"></p>
<p><strong>3.使用^符号【只能后退】</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^一个^符号退一步，想要后退几步就在后面加几个^</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111203035570.png" alt="image-20211111203035570"></p>
<p>==显示文件的后n行==</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">显示文件后两行$ tail -n 2 good.txt全部显示文件$ cat good.txt</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111203311151.png" alt="image-20211111203311151"></p>
<p><strong>4.使用~符号【只能后退】</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">后退n步git reset --hard HEAD~n</span><br></pre></td></tr></table></figure>
<h2 id="reset命令的三分参数比较">reset命令的三分参数比较</h2>
<ul>
<li>–soft参数
<ul>
<li>仅在本地库移动HEAD指针</li>
<li><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111204703204.png" alt="image-20211111204703204"></li>
</ul>
</li>
<li>–mixed参数
<ul>
<li>在本地库移动HEAD指针</li>
<li>重置暂存区</li>
<li><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111204724633.png" alt="image-20211111204724633"></li>
</ul>
</li>
<li>–hard参数
<ul>
<li>在本地库移动HEAD指针</li>
<li>重置暂存区</li>
<li>重置工作区</li>
<li><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111204741594.png" alt="image-20211111204741594"></li>
</ul>
</li>
</ul>
<h2 id="删除文件后找回">删除文件后找回</h2>
<p>前提：删除前，文件存在时的状态提交到本地</p>
<p><strong>1.方式一：回退到之前的版本</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard 索引值</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111210120060.png" alt="image-20211111210120060"></p>
<p><strong>2.方式二：将添加到暂存区的文件找回</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --head HEAD</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>删除操作已经提交到本地库：指针位置指向索引值</li>
<li>未提交到本地库：指针位置使用HEAD</li>
</ul>
<h2 id="比较文件">比较文件</h2>
<p>比较文件是否发生了修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git diff apple.txt</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111211416299.png" alt="image-20211111211416299"></p>
<p>比较已经提交到暂存区的文件发生了那些修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git diff HEAD apple.txt</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111211601887.png" alt="image-20211111211601887"></p>
<p>不指定文件名时，会比较工作区中的所有的文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111211859857.png" alt="image-20211111211859857"></p>
<h2 id="分支管理">分支管理</h2>
<h3 id="什么是分支">什么是分支</h3>
<p>在版本控制的过程中，使用多条线同时推进。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111212639622.png" alt="image-20211111212639622"></p>
<h3 id="分支的好处">分支的好处</h3>
<ul>
<li>同时并行推进多个功能开发，提高工作效率。</li>
<li>各个分支在开发过程中，如果某一个分支开发失败了，不会对其他分支有任何的影响。失败的分支删除重新开始既可。</li>
</ul>
<h3 id="分支操作">分支操作</h3>
<h5 id="查看拥有的所有分支">查看拥有的所有分支</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch -v</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111213147745.png" alt="image-20211111213147745"></p>
<h5 id="创建分支">创建分支</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建一个名字叫hot_fix的分支$ git branch [分支名]</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111213428937.png" alt="image-20211111213428937"></p>
<h5 id="切换分支">切换分支</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout [分支名]</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111213552432.png" alt="image-20211111213552432"></p>
<h5 id="合并分支">合并分支</h5>
<ul>
<li>
<p>第一步：切换到接收修改的分支上</p>
<ul>
<li>
<pre><code class="language-git">$ git checkout [被合并分支名]
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 第二步：使用merge命令进行合并</span><br><span class="line"></span><br><span class="line">  - ~~~git</span><br><span class="line">    $ git merge [有新内容的分支]</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
<li>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111214630265.png" alt="image-20211111214630265"></p>
</li>
</ul>
</li>
</ul>
<h5 id="解决冲突">解决冲突</h5>
<ul>
<li>
<p>冲突的表现：两个分支同时修改了同一个文件同一行中的数据。git不知道以哪一个为准。</p>
<ul>
<li><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111220459875.png" alt="image-20211111220459875"></li>
<li><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111220530944.png" alt="image-20211111220530944"></li>
</ul>
</li>
<li>
<p>冲突解决：</p>
<ul>
<li>第一步：编辑文件，删除特殊符号。</li>
<li>第二步：把文件修改到满意的程度，保存退出。</li>
<li><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211111220707665.png" alt="image-20211111220707665"></li>
<li>第三步：add，commit（此时commit一定不能带具体的文件名）</li>
</ul>
</li>
</ul>
<h4 id="从指定分支克隆项目：">从指定分支克隆项目：</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone --branch=分支名  地址</span><br></pre></td></tr></table></figure>
<h1>Git原理</h1>
<h2 id="Hash">Hash</h2>
<p>是一种加密算法。</p>
<p>Hash算法的特性：</p>
<ul>
<li>加密结果长度是一定的，都是16位。</li>
<li>Hash算法一致，输入一致，输出一定一样。</li>
<li>Hash算法一致，输入不一致，输出会发生很大的变化。</li>
<li>Hash算法是不可逆的。</li>
</ul>
<p>Git底层使用的是：SHA-1算法。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211112100441920.png" alt="image-20211112100441920"></p>
<h2 id="Git保存版本的机制">Git保存版本的机制</h2>
<p>SVN的保存机制：增量式版本控制</p>
<p>优点：节省空间</p>
<p>Git：快照流。没有修改的文件通过指针指向上个版本中的文件。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211112112246132.png" alt="image-20211112112246132"></p>
<h2 id="Git分支管理机制">Git分支管理机制</h2>
<p><strong>1.创建分支</strong></p>
<p>创建一个分支指向已有的版本。而不是把原来的复制一遍</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211112112938429.png" alt="image-20211112112938429"></p>
<p><strong>2.分支切换</strong></p>
<p>HEAD指针指向testing指针。</p>
<p>通过简单地移动指针就可以切换分支。十分方便。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211112113102856.png" alt="image-20211112113102856"></p>
<p><strong>3.修改数据</strong></p>
<p>当分支对文佳进行修改时，就会创造一个新的分支。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211112113310025.png" alt="image-20211112113310025"></p>
<h1>GitHub相关</h1>
<p>账号注册：</p>
<ul>
<li>email：329129866@qq.com</li>
<li>用户名：WenkAndZz</li>
</ul>
<h2 id="创建本地库与远程库">创建本地库与远程库</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建本地库文件夹</span><br><span class="line">mkdir [文件名]</span><br><span class="line"></span><br><span class="line">进入本地库</span><br><span class="line">cd [文件名]</span><br><span class="line"></span><br><span class="line">初始化</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line">创建一个txt文件</span><br><span class="line">vim [txt文件名].txt</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211112120434326.png" alt="image-20211112120434326"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建远程库在GitHub上，选择repository</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211112161451631.png" alt="image-20211112161451631"></p>
<p>创建完成之后，有一个HTTPS的地址</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211112161645184.png" alt="image-20211112161645184"></p>
<h2 id="在本地创建远程仓库别名">在本地创建远程仓库别名</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建别名，origin别名，后面是地址</span><br><span class="line">$ git remote add origin https://github.com/WenkAndZz/huashan.git</span><br><span class="line"></span><br><span class="line">查看历史数据</span><br><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211112162053144.png" alt="image-20211112162053144"></p>
<h2 id="推送数据">推送数据</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">推送数据</span><br><span class="line">$ git push [远程仓库别名] [分支名]</span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211112170659548.png" alt="image-20211112170659548"></p>
<p>注：GitHub是一个国外网站，访问很慢。可以使用<strong>码云</strong>。</p>
<h2 id="克隆操作">克隆操作</h2>
<p>更换目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ..</span><br><span class="line">$ mkdir huashan_linghuchong</span><br><span class="line">$ cd huashan_linghuchong</span><br></pre></td></tr></table></figure>
<p><strong>执行克隆操作：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone https://gitee.com/wenkailllll/huashan.git</span><br><span class="line"></span><br><span class="line">从指定分支克隆项目</span><br><span class="line">git clone --branch=分支名  地址</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211112171321540.png" alt="image-20211112171321540"></p>
<p>克隆有三个效果：</p>
<ul>
<li>完整的把远程库下载到本地。</li>
<li>创建origin远程地址别名。</li>
<li>初始化本地库。</li>
</ul>
<h2 id="从远程库拉取">从远程库拉取</h2>
<p><strong>方法一：fetch(拉取)+merge(合并)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从远程库中拉取数据</span><br><span class="line">$ git fetch origin master</span><br><span class="line">此时本地库中的数据没有发生改变，远程库中的数据保存在origin/master中</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将本地的master跟远程库下载下来的进行合并</span><br><span class="line">$ git merge origin/master</span><br><span class="line">合并之后master中的数据就与远程库一致了</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211112173104034.png" alt="image-20211112173104034"></p>
<p><strong>方法二：pull=fetch(拉取)+merge(合并)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>
<h2 id="协同合作时冲突的解决">协同合作时冲突的解决</h2>
<ul>
<li>要点：
<ul>
<li>如果不是基于GitHub远程库的最新版所做的修改，必须先拉取（pull）。</li>
<li>拉取下来之后按照”分支冲突解决“操作解决既可。</li>
</ul>
</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.先拉取，使当前变为最新版。</span><br><span class="line">git pull [远程库] [分支名]</span><br><span class="line">此时冲突文件会被合并。</span><br><span class="line"></span><br><span class="line">2.vim到冲突文件中，对冲突文件进行修改。</span><br><span class="line">vim [冲突文件]</span><br><span class="line"></span><br><span class="line">3.修改后再添加到暂存区</span><br><span class="line">git add [冲突文件]</span><br><span class="line"></span><br><span class="line">4.提交到本地库中。</span><br><span class="line">git commit [冲突文件]</span><br><span class="line"></span><br><span class="line">5.推送到远程仓库中</span><br><span class="line">git push [远程库] [分支名]</span><br></pre></td></tr></table></figure>
<h2 id="跨团队协作">跨团队协作</h2>
<ol>
<li>Fork项目</li>
<li>克隆到本地 git clone</li>
<li>修改后提交 git push</li>
<li>在GitHub网页上有个push requests</li>
<li>本团队对这个request进行审核。审核成功就可以合并（merge）</li>
</ol>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211112214534482.png" alt="image-20211112214534482"></p>
<h2 id="SSH免密登录">SSH免密登录</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.切换到根目录下：cd ~</span><br><span class="line"></span><br><span class="line">2.删除.ssh文件rm -r .shh/</span><br><span class="line"></span><br><span class="line">3.给当前邮箱号设置一个ssh加密</span><br><span class="line">$ ssh-keygen -t rsa -C 329129866@qq.com</span><br><span class="line"></span><br><span class="line">4.去.ssh/文件下，赋值id_rsa.pub中的内容$ cd .ssh/</span><br><span class="line"></span><br><span class="line">5.打开GitHub，在设置中找到ssh秘钥，把复制的内容添加到这里。</span><br></pre></td></tr></table></figure>
<p>使用的时候，要使用ssh地址，才能免密登录。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211112220837890.png" alt="image-20211112220837890"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.给远程仓库的ssh地址设置一个别名</span><br><span class="line">git remote add origin_ssh git@gitee.com:wenkailllll/huashan.git</span><br><span class="line"></span><br><span class="line">2.使用ssh去push文件</span><br><span class="line">git push origin_ssh master</span><br></pre></td></tr></table></figure>
<h1>hexo 推送博客</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建博客,创建完成的博客在E:\Blog\source\_posts目录下</span><br><span class="line">hexo new &quot;博客名&quot;</span><br><span class="line"></span><br><span class="line">//清除网页中的缓存</span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">//生成静态网页</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">//开始部署</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h1>开发中遇到的问题总结</h1>
<p>常用的指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.从远程仓库下载某个分支的代码</span><br><span class="line">git clone --branch=分支名  http://10.0.33.5/Cloudview/CV_EMR/cloudview-realtime-compute-</span><br><span class="line">service.git</span><br></pre></td></tr></table></figure>
<h2 id="IDE中使用git">IDE中使用git</h2>
<h3 id="1-local-change不显示问题：">1.local change不显示问题：</h3>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220121174759288.png" alt="image-20220121174759288"></p>
<h3 id="2-git提交修改">2.git提交修改</h3>
<p>对比修改，如果没有发生冲突再提交</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220121174412888.png" alt="image-20220121174412888"></p>
<p>可以通过show diff查看不同</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220121174702301.png" alt="image-20220121174702301"></p>
]]></content>
      <categories>
        <category>代码管理</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>关系型数据库：MySQL</title>
    <url>/2021/10/16/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%9AMySQL/</url>
    <content><![CDATA[<p>MySQL是一个<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/696511">关系型数据库管理系统</a>，由瑞典[MySQL AB](<a href="https://baike.baidu.com/item/MySQL">https://baike.baidu.com/item/MySQL</a> AB/2620844) 公司开发，属于 <a href="https://baike.baidu.com/item/Oracle">Oracle</a> 旗下产品。MySQL 是最流行的<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/696511">关系型数据库管理系统</a>之一，在 <a href="https://baike.baidu.com/item/WEB/150564">WEB</a> 应用方面，MySQL是最好的 <a href="https://baike.baidu.com/item/RDBMS/1048260">RDBMS</a> (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p>
<span id="more"></span>
<h1>数据库概述</h1>
<h2 id="使用数据库的优势">使用数据库的优势</h2>
<p>使用数据库有两个优势：</p>
<ul>
<li>持久化数据到本地。</li>
<li>可以实现结构化查询，方便管理。</li>
</ul>
<h2 id="数据库相关概念">数据库相关概念</h2>
<p><strong>DB(Database)</strong>：数据库，保存一组有组织的数据的容器。</p>
<p><strong>DBMS(Database Management System)</strong>：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据。</p>
<p><strong>SQL(Structured Query Language)</strong>：结构化查询语言，用于和DBMS通信的语言，包括数据插入、查询、更新、删除，数据库模式创建和修改，以及数据访问控制。</p>
<h2 id="SQL的语言分类">SQL的语言分类</h2>
<p><strong>DDL(Data Definition Language)</strong>：数据定义语言。允许用户<strong>定义</strong>数据，包括创建（create）、删除（drop）、修改（alter）这些操作。通常，DDL由数据库管理员执行。</p>
<p><strong>DML(Data Manipulation Language</strong>)：数据操作语言。DML为用户提供添加（insert）、删除（delete）、更新数据（update）的能力，这些是应用程序对数据库的日常操作。</p>
<p><strong>DQL(Data Query Language)</strong>：数据查询语言，执行查询（select）操作。<br>
<strong>TCL(Transaction Control Language)</strong>：事务控制语言，执行commit、rollback等操作。</p>
<h1>关系数据库</h1>
<h2 id="什么是关系型数据库">什么是关系型数据库</h2>
<p><strong>RDBMS(Relational Database Management System)</strong>：关系型数据库管理系统，即基于关系模型的数据库。</p>
<p><strong>关系模型</strong>把数据看作是一个二维表格，任何数据都可以通过行号和列号来唯一确定，它的数据模型看起来就是一个Excel表。</p>
<h2 id="RDBMS存储数据的特点">RDBMS存储数据的特点</h2>
<p>RDBMS存储数据的特点：</p>
<ul>
<li>数据以表格的形式出现，每个表都有唯一的名字，用于标识自己。</li>
<li>若干的表格组成数据库。</li>
<li>表本身具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。</li>
<li>表中的<strong>列</strong>也称为<strong>字段（Column）</strong>。列类似于java 中的”属性”。</li>
<li>表中的<strong>行</strong>称为<strong>记录（Record）</strong>，每一行是一组相关的数据。行类似于java中的“对象”。</li>
</ul>
<h2 id="常见的关系型数据库">常见的关系型数据库</h2>
<ul>
<li>商用数据库，例如：<a href="https://www.oracle.com/">Oracle</a>，<a href="https://www.microsoft.com/sql-server/">SQL Server</a>，<a href="https://www.ibm.com/db2/">DB2</a>等；</li>
<li>开源数据库，例如：<a href="https://www.mysql.com/">MySQL</a>，<a href="https://www.postgresql.org/">PostgreSQL</a>等；</li>
<li>桌面数据库，以微软<a href="https://products.office.com/access">Access</a>为代表，适合桌面应用程序使用；</li>
<li>嵌入式数据库，以<a href="https://sqlite.org/">Sqlite</a>为代表，适合手机应用和桌面程序。</li>
</ul>
<h2 id="NoSQL">NoSQL</h2>
<p>NoSQL数据库，也就是非SQL的数据库，包括MongoDB、Cassandra、Dynamo等等，它们都不是关系数据库。SQL数据库从始至终从未被取代过，NoSQL的发展历程：</p>
<ul>
<li>1970: NoSQL = We have no SQL</li>
<li>1980: NoSQL = Know SQL</li>
<li>2000: NoSQL = No SQL!</li>
<li>2005: NoSQL = Not only SQL</li>
<li>2013: NoSQL = No, SQL!</li>
</ul>
<p>今天，SQL数据库仍然承担了各种应用程序的核心数据存储，而NoSQL数据库作为SQL数据库的补充，两者不再是二选一的问题，而是主从关系。</p>
<h1>MySQL</h1>
<h2 id="MySQL介绍">MySQL介绍</h2>
<p>MySQL是目前应用最广泛的开源关系数据库。MySQL最早是由瑞典的MySQL AB公司开发，该公司在2008年被SUN公司收购，SUN公司在2009年被Oracle公司收购，所以MySQL最终就变成了Oracle旗下的产品。</p>
<p>MySQL优势：</p>
<ul>
<li>开源、免费、成本低</li>
<li>性能高、移植性好</li>
<li>体积小，便于安装</li>
</ul>
<h2 id="MySQL安装">MySQL安装</h2>
<p>MySQL属于c/s架构的软件，一般来讲只安装服务端。以下案例以 MySQL5.7 为例</p>
<p>下载<a href="https://dev.mysql.com/downloads/mysql/">链接</a></p>
<h2 id="MySQL服务的启动和停止">MySQL服务的启动和停止</h2>
<p>Windows下，MySQL启动和停止有两种方式：</p>
<ul>
<li>计算机—右击管理—服务，启动MySQL服务</li>
<li>通过管理员身份运行cmd：
<ul>
<li>net start 服务名（启动服务），例<code>net start mysql57</code></li>
<li>net stop 服务名（停止服务），例<code>net stop mysql57</code></li>
</ul>
</li>
</ul>
<h2 id="MySQL服务的登录和退出">MySQL服务的登录和退出</h2>
<p>方式一：通过mysql自带的客户端（MySQL Line Client），只限于root用户</p>
<p>方式二：通过windows的命令提示符，以管理员身份打开</p>
<ul>
<li>
<p>登录：<code>mysql [-h 主机名 -P 端口号] -u 用户名 -p密码</code>，<code>[]</code>里的内容表示可以省略</p>
<blockquote>
<p>其中<code>p</code>参数和密码直接不能有空格，其他参数和值之间空格可有可无，比如<code>-uroot</code>，表示root用户。</p>
<p>密码可以不添加值，直接回车，然后输入密码，不会显示出明文。</p>
<p>如果是本机，并且端口是3306，可以省略<code>-h</code>和<code>-P</code>参数，直接输入用户名和密码即可。</p>
</blockquote>
</li>
<li>
<p>退出：<code>exit</code></p>
</li>
</ul>
<p>如下图：</p>
<p><a href="https://cdn.jsdelivr.net/gh/kangshitao/BlogPicture@main/img/mysql-basis_1.png"><img src="http://r9jy0okua.bkt.clouddn.com/img/mysql-basis_1.png" alt="img"></a></p>
<h2 id="MySQL的常见命令">MySQL的常见命令</h2>
<p>查看当前所有的数据库:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>
<p>打开指定的库:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use 库名;</span><br></pre></td></tr></table></figure>
<p>查看当前库的所有表:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>
<p>查看其它库的所有表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables from 库名;</span><br></pre></td></tr></table></figure>
<p>查看表结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc 表名;</span><br></pre></td></tr></table></figure>
<p>查看表的列属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show columns from 表名;</span><br></pre></td></tr></table></figure>
<p>查看表的索引：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show index from 表名;</span><br></pre></td></tr></table></figure>
<p>查看xx状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看指定表的状态信息</span><br><span class="line">show table status from 表名/数据库;</span><br><span class="line"></span><br><span class="line"># 查看主从复制中的主机状态</span><br><span class="line">show master status;</span><br><span class="line"></span><br><span class="line"># 查看主从复制中从机状态</span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure>
<p>查看服务器的版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 方式一，在mysql服务端查看：</span><br><span class="line">select version();</span><br><span class="line"># 方式二，在cmd窗口查看：</span><br><span class="line">mysql --version</span><br><span class="line">或</span><br><span class="line">mysql --V</span><br></pre></td></tr></table></figure>
<p>用户管理指令：</p>
<p><strong>添加用户的两种方式</strong></p>
<p>1、使用insert指令，在mysql.user表中添加用户：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 比如想添加用户：user，密码：123456，并授予select权限</span><br><span class="line"># 只需要在user表的指定列添加内容即可。</span><br><span class="line">insert into mysql.user(host,user,password，select_priv)</span><br><span class="line">	values(&#x27;localhost&#x27;,&#x27;user&#x27;,password(&#x27;123456&#x27;),&#x27;Y&#x27;);</span><br><span class="line">flush privileges;</span><br><span class="line">/* </span><br><span class="line">其中host列表示限制登陆的主机，localhost表示只能当前主机登陆，</span><br><span class="line">可以指定ip，使用%表示任意主机。</span><br><span class="line">MySQL5.7以后，password改名为authentication_string。</span><br><span class="line">密码需要使用password()函数进行加密，MySQL8.0.11移除了这个函数，可以使用MD5()代替。</span><br><span class="line">可以根据需求授予其他权限，只需要相应列赋值为&#x27;Y&#x27;即可。</span><br><span class="line">添加完后，使用flush privileges语句刷新授权表，使之立即生效，</span><br><span class="line">否则需要重启MySQL服务才生效。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<p>2、使用grant命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 比如给指定数据库比如student库，添加用户user，密码123,授予select权限</span><br><span class="line">grant select   # 指定授予的权限</span><br><span class="line">on student.*   # 指定数据库和表，*表示所有，这里表示student库所有表</span><br><span class="line">to &#x27;user&#x27;@&#x27;localhost&#x27;  # 指定用户名和登陆主机，localhost根据需求填写</span><br><span class="line">indentified by &#x27;123&#x27;;   # 指定登录密码。</span><br></pre></td></tr></table></figure>
<p>grant指令更多内容，参考<a href="https://dev.mysql.com/doc/refman/8.0/en/grant.html#grant-overview">GRANT Statement</a></p>
<h2 id="MySQL的语法规范">MySQL的语法规范</h2>
<p>MySQL中的命令有以下规范：</p>
<ul>
<li><strong>不区分大小写</strong>，建议关键字大写，表名和列名小写</li>
<li>每条命令以<code>;</code>或<code>\g</code>结尾</li>
<li>每条命令根据需要，可以进行缩进或换行。关键字不能缩写或分行。</li>
<li>注释
<ul>
<li>单行注释：<code>#注释文字</code></li>
<li>单行注释：<code>-- 注释文字</code>,(注意<code>--</code>后面有空格)</li>
<li>多行注释：<code>/* 注释文字 */</code></li>
</ul>
</li>
</ul>
<p>字符（建议加，有时必须加）和日期型要加引号，数值不需要加。<strong>表的别名不需要加引号</strong></p>
<h1>MySQL数据类型</h1>
<p>MySQL支持所有标准SQL数值数据类型（SQL数据类型参考<a href="https://www.runoob.com/sql/sql-datatypes-general.html">链接</a>）。作为SQL标准的扩展，MySQL也支持整数类型TINYINT、MEDIUMINT和BIGINT。详细参考<a href="https://www.runoob.com/mysql/mysql-data-types.html">MySQL数据类型</a></p>
<p><strong>MySQL中的TRUE和FALSE，也可以分别用1和0表示。</strong></p>
<p>MySQL中的数据类型包括<strong>数值型</strong>、<strong>字符型</strong>、<strong>日期型</strong>等。</p>
<p><strong>数值型</strong></p>
<table>
<thead>
<tr>
<th></th>
<th><strong>类型</strong></th>
<th><strong>字节</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>整型</td>
<td>Tinyint</td>
<td>1</td>
<td>有符号：-128~127 无符号：0~255</td>
</tr>
<tr>
<td>Smallint</td>
<td>2</td>
<td>有符号：-32768~32767 无符号：0~65535</td>
<td></td>
</tr>
<tr>
<td>Mediumint</td>
<td>3</td>
<td>有符号：-8,388,608~8,388,607 无符号：0~16,777,215</td>
<td></td>
</tr>
<tr>
<td>Int/Integer</td>
<td>4</td>
<td>有符号：-2,147,483,648~2,147,483,647 无符号：0~4,294,967,296</td>
<td></td>
</tr>
<tr>
<td>Bigint</td>
<td>8</td>
<td>有符号：-2^63~2^63-1 无符号：0~2^64</td>
<td></td>
</tr>
<tr>
<td>浮点型小数</td>
<td>float(M,D)</td>
<td>4</td>
<td>±1.75494351E-38 ~ ±3.402823466E+38</td>
</tr>
<tr>
<td>double(M,D)</td>
<td>8</td>
<td>±2.2250738585072014E-308 ~ ±1.7976931348623157E+308</td>
<td></td>
</tr>
<tr>
<td>定点型小数</td>
<td>DEC(M,D) DECIMAL(M,D)</td>
<td>M+2</td>
<td>最大取值范围与double相同， 给定decimal的有效取值范围由M和D决定</td>
</tr>
</tbody>
</table>
<p>说明：</p>
<ul>
<li>如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，需要在类型后面添加<code>unsigned</code>关键字</li>
<li>如果插入的数值超出了整型的范围,会报out of range异常，并且插入临界值</li>
<li>如果不设置长度，会有默认的长度。长度不决定范围，长度代表了显示的最大宽度。可以选择在长度不够时，用0在左边填充，需要在类型后面添加<code>zerofill</code>。zerofill只支持正数（无符号）</li>
<li>定点型的精确度较高，如果要求插入数值的精度较高如货币运算等则考虑使用</li>
<li>M表示整数部位个数+小数部位个数的总长度。D表示小数部位长度。如果插入的数值超过范围，会报out of range异常，并插入临界值。</li>
<li>M和D都可以省略。如果是decimal，则M默认为10，D默认为0。</li>
<li>float和double，会根据插入的数值的精度来决定精度。</li>
</ul>
<p><strong>字符型</strong></p>
<table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>最多字符数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>char(M)</td>
<td>M</td>
<td>M为0~255之间的整数，固定长度的字符，比较耗费空间，效率高</td>
</tr>
<tr>
<td>varchar(M)</td>
<td>M</td>
<td>M为0~65535之间的整数，可变长度的字符，比较节省空间，效率低</td>
</tr>
</tbody>
</table>
<p>M表示最大的字符个数，而不是存储空间。</p>
<p>M</p>
<p>其他字符型类型：</p>
<ul>
<li><code>binary</code>和<code>varbinary</code>用于保存较短的二进制</li>
<li><code>enum</code>用于保存枚举类型，要求插入的值必须属于列表中指定的值之一。如果列表成员为<code>1~255</code>，则需要1个字节存储。如果列表成员为<code>255~65535</code>，则需要2个字节存储，最多为65535个成员。</li>
<li><code>set</code>用于保存集合。里面可以保存0~64个成员。一次可以选取多个成员。根据成员个数不同，存储所占的字节从1-8变化。</li>
<li><code>text</code>用于存放较长的文本</li>
<li><code>blob</code>用于存放较大的二进制</li>
</ul>
<p><strong>日期型</strong></p>
<table>
<thead>
<tr>
<th>日期和时间类型</th>
<th>字节</th>
<th>最小值</th>
<th>最大值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>date</code></td>
<td>4</td>
<td>1000-01-01</td>
<td>9999-12-31</td>
</tr>
<tr>
<td><code>datetime</code></td>
<td>8</td>
<td>1000-01-01 00:00:00</td>
<td>9999-12-31 23:59:59</td>
</tr>
<tr>
<td><code>timestamp</code></td>
<td>4</td>
<td>1970-01-01 00:00:00</td>
<td>2038-1-19某一时刻</td>
</tr>
<tr>
<td><code>time</code></td>
<td>3</td>
<td>-838:59:59</td>
<td>838:59:59</td>
</tr>
<tr>
<td><code>year</code></td>
<td>1</td>
<td>1901</td>
<td>2155</td>
</tr>
</tbody>
</table>
<p>其中字符型和日期型的常量值必须要用<code>''</code>或<code>&quot;&quot;</code>包起来。数值型不需要。</p>
<p><strong>datetime和timestamp的对比</strong></p>
<ul>
<li>二者都是保存日期和时间。</li>
<li>datetime占用8字节，范围是1000-9999，不受时区的影响。</li>
<li>timestamp占用4字节，范围为1970-2038，受时区的影响，其值会根据时区的变化而变化。即插入数据以后，如果修改时区，表中的时间戳也会改变为对应时区的值。</li>
</ul>
<h1>DQL语言</h1>
<p>DQL为数据查询语言，执行查询（select）操作。</p>
<p>DQL的完整查询语句结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段,...				# 7</span><br><span class="line">from 表1 [别名]				# 1</span><br><span class="line">[连接类型 join 表2]...			# 2</span><br><span class="line">[on 连接条件]				# 3</span><br><span class="line">[where 筛选条件]			# 4</span><br><span class="line">[group by 分组字段]			# 5</span><br><span class="line">[having 分组后的筛选条件]		# 6</span><br><span class="line">[order by 排序的字段或表达式]		# 8</span><br><span class="line">[limit 偏移量(起始条目索引),条数]; 	# 9</span><br></pre></td></tr></table></figure>
<p>以上各部分的执行顺序：<br>
<code>from</code>→<code>join</code>→<code>on</code>→<code>where</code>→<code>group by</code>(开始使用select中的别名，后面的语句都可以使用)-</p>
<p>→<code>AVG/SUM/MAX/MIN等分组函数</code>→<code>having</code>→<code>select</code>→<code>distinct</code>→<code>order by</code>→<code>limit</code></p>
<p>以下案例使用的数据库：<code>myemployees</code>，其中有<code>departments</code>、<code>employees</code>、<code>job_grades</code>、<code>jobs</code>、<code>locations</code>共五张表。各自的包含的字段如下：</p>
<p><code>departments</code>表：</p>
<p><a href="https://cdn.jsdelivr.net/gh/kangshitao/BlogPicture@main/img/mysql-basis_3.png"><img src="http://r9jy0okua.bkt.clouddn.com/img/mysql-basis_3.png" alt="img"></a></p>
<p><code>employees</code>表：</p>
<p><a href="https://cdn.jsdelivr.net/gh/kangshitao/BlogPicture@main/img/mysql-basis_2.png"><img src="http://r9jy0okua.bkt.clouddn.com/img/mysql-basis_2.png" alt="img"></a></p>
<p><code>job_grades</code>表：</p>
<p><a href="https://cdn.jsdelivr.net/gh/kangshitao/BlogPicture@main/img/mysql-basis_4.png"><img src="http://r9jy0okua.bkt.clouddn.com/img/mysql-basis_4.png" alt="img"></a></p>
<p><code>jobs</code>表：</p>
<p><a href="https://cdn.jsdelivr.net/gh/kangshitao/BlogPicture@main/img/mysql-basis_5.png"><img src="http://r9jy0okua.bkt.clouddn.com/img/mysql-basis_5.png" alt="img"></a></p>
<p><code>locations</code>表：</p>
<p><a href="https://cdn.jsdelivr.net/gh/kangshitao/BlogPicture@main/img/mysql-basis_6.png"><img src="http://r9jy0okua.bkt.clouddn.com/img/mysql-basis_6.png" alt="img"></a></p>
<h2 id="基础查询">基础查询</h2>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 查询内容 [FROM 表名];</span><br></pre></td></tr></table></figure>
<blockquote>
<p>类似于Java中的System.out.println(要打印的东西);</p>
<p>查询的结果是一个虚拟的表，不会改变原来的表格。</p>
</blockquote>
<p>特点：<br>
①通过select查询出的结果 ，是一个虚拟的表格，不是真实存在</p>
<p>②查询内容可以是<strong>常量值</strong>、<strong>表达式</strong>、<strong>字段</strong>、<strong>函数</strong></p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1.查询单个字段</span><br><span class="line">SELECT last_name FROM employees;</span><br><span class="line"></span><br><span class="line">#2.查询多个字段</span><br><span class="line">SELECT last_name,salary,email FROM employees;</span><br><span class="line"></span><br><span class="line">#3.查询所有字段</span><br><span class="line">SELECT </span><br><span class="line">    `employee_id`,</span><br><span class="line">    `first_name`,</span><br><span class="line">    `last_name`,</span><br><span class="line">    `phone_number`,</span><br><span class="line">    `last_name`,</span><br><span class="line">    `job_id`,</span><br><span class="line">    `phone_number`,</span><br><span class="line">    `job_id`,</span><br><span class="line">    `salary`,</span><br><span class="line">    `commission_pct`,</span><br><span class="line">    `manager_id`,</span><br><span class="line">    `department_id`,</span><br><span class="line">    `hiredate` </span><br><span class="line">FROM</span><br><span class="line">    employees ;</span><br><span class="line">#方式二，*号表示所有字段：  </span><br><span class="line">SELECT * FROM employees;</span><br><span class="line"></span><br><span class="line">#4.查询常量</span><br><span class="line">SELECT 100;</span><br><span class="line"></span><br><span class="line">#5.查询函数</span><br><span class="line">SELECT VERSION();</span><br><span class="line"></span><br><span class="line">#6.查询表达式</span><br><span class="line">SELECT 100%98;</span><br></pre></td></tr></table></figure>
<p><strong>别名</strong>：如果要查询的字段有重名的情况，可以使用别名区分；同样，表也可以起别名。</p>
<p>定义别名有两种方式：</p>
<ul>
<li>
<p>使用<code>as</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 100%98 AS 结果;</span><br><span class="line">/*运行结果为：</span><br><span class="line">+------+</span><br><span class="line">| 结果 |</span><br><span class="line">+------+</span><br><span class="line">|    2 |</span><br><span class="line">+------+</span><br><span class="line">*/</span><br><span class="line">SELECT last_name AS 姓,first_name AS 名 FROM employees;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用空格，将<code>as</code>替换为空格即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT last_name 姓,first_name 名 FROM employees;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>去重</strong>：使用<code>distinct</code>对结果去重</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#案例：查询员工表中涉及到的所有的部门编号</span><br><span class="line">SELECT DISTINCT department_id FROM employees;</span><br></pre></td></tr></table></figure>
<p><strong>+号在MySQL中的作用</strong>：</p>
<p>MySQL中的<code>+</code>号只有运算符的作用，其运算规则如下：</p>
<ul>
<li>如果两个操作值都是数值型，做加法运算</li>
<li>如果一方为字符型，则尝试进行转换，转换成功就做加法运算，如果转换失败，则将字符值当作0</li>
<li>任何数和<code>null</code>做加法运算，结果都是<code>null</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 100+90;  # 结果为190select &#x27;123&#x27;+90; # 结果为213select &#x27;john&#x27;+90; # 结果为90select null+10;  # 结果为null</span><br></pre></td></tr></table></figure>
<h2 id="条件查询">条件查询</h2>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 要查询的字段|表达式|常量值|函数from 表where 筛选条件;  # where后面加筛选条件</span><br></pre></td></tr></table></figure>
<p>根据筛选条件的不同，可以分为以下几种：</p>
<p>① <strong>条件表达式</strong></p>
<p>使用以下条件运算符：</p>
<table>
<thead>
<tr>
<th style="text-align:center">操作符</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>=</code></td>
<td style="text-align:left">等于，也可以作为赋值符号，为了便于区分，变量赋值尽量用<code>:=</code>符号。 不能用于判断<code>null</code>值</td>
</tr>
<tr>
<td style="text-align:center"><code>&gt;</code></td>
<td style="text-align:left">大于</td>
</tr>
<tr>
<td style="text-align:center"><code>&gt;=</code></td>
<td style="text-align:left">大于等于</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;</code></td>
<td style="text-align:left">小于</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;=</code></td>
<td style="text-align:left">小于等于</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;&gt;</code>或<code>!=</code></td>
<td style="text-align:left">不等于，两种写法均可，不能用于判断<code>null</code>值</td>
</tr>
</tbody>
</table>
<p>案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#案例1：查询工资&gt;12000的员工信息SELECT * FROM employees WHERE salary&gt;12000;#案例2：查询部门编号不等于90号的员工名和部门编号SELECT 	last_name,	department_idFROM employeesWHERE department_id&lt;&gt;90;</span><br></pre></td></tr></table></figure>
<p>②<strong>逻辑表达式</strong></p>
<p>使用以下逻辑运算符：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>and</code>或<code>&amp;&amp;</code></td>
<td>与</td>
</tr>
<tr>
<td><code>or</code>或</td>
<td>或</td>
</tr>
<tr>
<td><code>not</code>或<code>!</code></td>
<td>非</td>
</tr>
</tbody>
</table>
<p>案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#案例1：查询工资z在10000到20000之间的员工名、工资以及奖金SELECT	last_name,	salary,	commission_pctFROM employeesWHERE salary&gt;=10000 AND salary&lt;=20000;#案例2：查询部门编号不是在90到110之间，或者工资高于15000的员工信息SELECT * FROM employeesWHERE NOT(department_id&gt;=90 AND department_id&lt;=110) OR salary&gt;15000;</span><br></pre></td></tr></table></figure>
<p>③<strong>其他</strong></p>
<p>包括以下几种：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>like</code></td>
<td style="text-align:left">模糊查询，<code>%</code>用于匹配<strong>任意个</strong>字符，包括0个，<code>_</code>用于匹配<strong>任意一个</strong>字符</td>
</tr>
<tr>
<td><code>between ... and ...</code></td>
<td style="text-align:left">判断是否在范围之间，相当于<code>&gt;=</code>和<code>&lt;=</code></td>
</tr>
<tr>
<td><code>in</code></td>
<td style="text-align:left">使用<code>=</code>号判断</td>
</tr>
<tr>
<td><code>is null</code>，<code>is not null</code></td>
<td style="text-align:left">用于判断是否为<code>null</code></td>
</tr>
</tbody>
</table>
<p><code>like</code> 一般用于字符型数据，也可以查询数值型数据。使用通配符查询，默认<code>\</code>为转义字符，也可以使用<code>escape</code>自定义转移字符。</p>
<p>案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询员工名中包含字符a的员工信息SELECT * FROM employeesWHERE last_name LIKE &#x27;%a%&#x27;;#查询员工名中第二个字符为_的员工名SELECT last_name FROM employeesWHERE last_name LIKE &#x27;_#_%&#x27; ESCAPE &#x27;#&#x27;; # 自定义#作为转义字符</span><br></pre></td></tr></table></figure>
<p><code>between and</code>语句包含两个临界值，且要求是合法的范围：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询员工编号在100到120之间的员工信息SELECT * FROM employeesWHERE employee_id BETWEEN 100 AND 120;#等价于：SELECT * FROM employeesWHERE employee_id &gt;= 100 AND employee_id&lt;=120;</span><br></pre></td></tr></table></figure>
<p><code>in</code>用于判断某字段的值是否属于<strong>in列表</strong>中的某一项，使用<code>=</code>号判断</p>
<ul>
<li>in列表的值类型必须一致或兼容</li>
<li>in列表中不支持通配符</li>
</ul>
<p>案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询工种编号是IT_PROG、AD_VP、AD_PRES中其中一个的所有员工的姓名和工种编号SELECT last_name, job_id FROM employeesWHERE job_id IN( &#x27;IT_PROT&#x27; ,&#x27;AD_VP&#x27;,&#x27;AD_PRES&#x27;);#等价于SELECT last_name, job_id FROM employeesWHERE job_id = &#x27;IT_PROT&#x27; OR job_id = &#x27;AD_VP&#x27; OR JOB_ID =&#x27;AD_PRES&#x27;;</span><br></pre></td></tr></table></figure>
<p><code>is null</code>和<code>is not null</code>用于判断字段是否为<code>null</code>，且只能用于判断是否为<code>null</code>，不能用于判断是否等于某个数值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询没有奖金的员工名和奖金率SELECT last_name,commission_pct FROM employeesWHERE commission_pct IS NULL;</span><br></pre></td></tr></table></figure>
<p><code>&lt;=&gt;</code>既可以判断是否等于某个数值，也能用于判断是否为<code>null</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#案例1：查询没有奖金的员工名和奖金率SELECT last_name, commission_pctFROM employeesWHERE commission_pct &lt;=&gt;NULL;#案例2：查询工资为12000的员工名和工资SELECT last_name, salaryFROM employeesWHERE salary &lt;=&gt; 12000;</span><br></pre></td></tr></table></figure>
<h2 id="排序查询">排序查询</h2>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 查询列表from 表名[where 筛选条件]order by 排序的字段|表达式|函数|别名 [asc|desc];  # 使用order by排序</span><br></pre></td></tr></table></figure>
<blockquote>
<p>默认asc，表示升序。也可以使用desc指定为降序</p>
<p>order by的位置一般放在最后面（除limit外)</p>
</blockquote>
<p>案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1、按单个字段排序SELECT * FROM employees ORDER BY salary DESC;#2、添加筛选条件再排序#查询部门编号&gt;=90的员工信息，并按员工编号降序SELECT * FROM employees WHERE department_id&gt;=90ORDER BY employee_id DESC;#3、按表达式排序#查询员工信息 按年薪降序SELECT *,salary*12*(1+IFNULL(commission_pct,0)) FROM employeesORDER BY salary*12*(1+IFNULL(commission_pct,0)) DESC;#4、按别名排序#查询员工信息 按年薪升序SELECT *,salary*12*(1+IFNULL(commission_pct,0)) 年薪FROM employeesORDER BY 年薪 ASC;#5、按函数排序#查询员工名，并且按名字的长度降序SELECT LENGTH(last_name),last_name FROM employeesORDER BY LENGTH(last_name) DESC;#6、按多个字段排序#案例：查询员工信息，要求先按工资降序，再按employee_id升序SELECT * FROM employeesORDER BY salary DESC,employee_id ASC;</span><br></pre></td></tr></table></figure>
<h2 id="常见函数">常见函数</h2>
<p>MySQL中的函数类似于java中的方法，将一组逻辑语句封装在方法体中，对外暴露方法名。</p>
<p>优势：提高代码重用性，隐藏了实现细节。</p>
<p>调用函数的语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 函数名(实参列表) [from 表名...]</span><br></pre></td></tr></table></figure>
<p>函数根据作用对象的个数不同，可以分为<strong>单行函数</strong>和<strong>分组函数</strong>。</p>
<p><strong>单行函数</strong></p>
<ul>
<li>
<p>字符函数</p>
<ul>
<li><code>length</code>：求参数的字节个数，比如一个汉字三个字节</li>
<li><code>concat</code>：字符拼接，只要有一个为null，则结果为null</li>
<li><code>substr</code>：截取子串。sql中的索引是从1开始的</li>
<li><code>instr</code>：返回子串第一次出现的索引</li>
<li><code>trim</code>：去除首尾指定的空格和字符</li>
<li><code>upper</code>：转换成大写</li>
<li><code>lower</code>：转换成小写</li>
<li><code>lpad</code>：左填充</li>
<li><code>rpad</code>：右填充</li>
<li><code>replace(str,a,b)</code>：将str中的a替换成b</li>
</ul>
<p>案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#截取从指定索引处指定字符长度的字符(不是字节长度)</span><br><span class="line">SELECT SUBSTR(&#x27;你好，MySQL&#x27;,1,2) out_put;   # 你好</span><br><span class="line"></span><br><span class="line">SELECT LENGTH(TRIM(&#x27;    张 翠 山    &#x27;)) AS out_put; # 11</span><br><span class="line"># trim只能去除首尾的空格，length求得是字节的个数</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>数学函数</p>
<ul>
<li><code>round</code>：四舍五入</li>
<li><code>rand</code>：返回一个[0,1)之间的随机数</li>
<li><code>ceil</code>：向上取整，返回&gt;=该参数的最小整数</li>
<li><code>floor</code>：向下取整，返回&lt;=该参数的最大整数</li>
<li><code>truncate</code>：截断（直接截断，不会四舍五入），保留小数点后的n位</li>
<li><code>mod</code>：取余</li>
</ul>
<p>案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT ROUND(-1.55); #-2</span><br><span class="line">SELECT CEIL(-1.02);  #-1</span><br><span class="line">SELECT FLOOR(-9.99);  #-10</span><br><span class="line">SELECT TRUNCATE(1.69999,1); # 1.6</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>日期函数</p>
<ul>
<li><code>now</code>：返回当前系统日期+时间</li>
<li><code>curdate</code>：返回当前系统日期，不包含时间</li>
<li><code>curtime</code>：返回当前时间，不包含日期</li>
<li><code>year</code>：获取指定日期的年份</li>
<li><code>month</code>：获取指定日期的月份</li>
<li><code>monthname</code>：获取指定日期月份的英文</li>
<li><code>day</code>：获取指定日期的日</li>
<li><code>hour</code>：获取指定日期的小时</li>
<li><code>minute</code>：获取指定日期的分钟</li>
<li><code>second</code>：获取指定日期的秒</li>
<li><code>str_to_date</code>：将字符通过指定的格式转换成日期</li>
<li><code>date_format</code>：将日期转换成字符</li>
<li><code>datediff</code>：返回两个日期相差的天数</li>
</ul>
<p>案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT YEAR(&#x27;1998-1-1&#x27;) 年;  # 1998SELECT DATE_FORMAT(NOW(),&#x27;%y年%m月%d日&#x27;) AS out_put;  # 21年04月25日</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>流程控制函数，包括<code>if</code>和<code>case</code>函数。这里作为函数，可以用在任何地方，包括begin end里面和外面，注意和后面的<code>if</code>结构和<code>case</code>结构区分。</p>
<ul>
<li><code>if</code>函数：<code>if(条件，值1，值2)</code>，如果条件成立，返回值1，否则返回值2</li>
<li><code>case</code>函数：作为函数，其有两种用法，格式如下：</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#用法1：</span><br><span class="line">case 要判断的字段或表达式</span><br><span class="line">when 常量1 then 值1</span><br><span class="line">when 常量2 then 值2</span><br><span class="line">...</span><br><span class="line">else 值n</span><br><span class="line">endl;</span><br><span class="line">    </span><br><span class="line">#用法2：</span><br><span class="line">case </span><br><span class="line">when 条件1 then 值1</span><br><span class="line">when 条件2 then 值2</span><br><span class="line">...</span><br><span class="line">else 值n</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>if/case结构作为函数时，可以应用在begin end结构中或外面，其返回结果必须是值；语句中不用加分号，最后结束才加分号。</p>
<p>if/case作为流程控制结构时，只能用于begin end结构中，其返回的是执行语句，中间需要加分号，且end后面要加if/case。作为流程控制结构的语法参考最后一章流程控制。</p>
</blockquote>
<p>案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># if</span><br><span class="line"># 例一</span><br><span class="line">SELECT IF(10&lt;5,&#x27;大&#x27;,&#x27;小&#x27;);</span><br><span class="line"></span><br><span class="line"># 例2</span><br><span class="line">SELECT </span><br><span class="line">	last_name,</span><br><span class="line">	commission_pct,</span><br><span class="line">	IF(commission_pct IS NULL,&#x27;没奖金&#x27;,&#x27;有奖金&#x27;) 备注</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line"># case</span><br><span class="line"># 例1</span><br><span class="line">SELECT salary 原始工资,department_id,</span><br><span class="line">CASE department_id</span><br><span class="line">WHEN 30 THEN salary*1.1</span><br><span class="line">WHEN 40 THEN salary*1.2</span><br><span class="line">WHEN 50 THEN salary*1.3</span><br><span class="line">ELSE salary</span><br><span class="line">END AS 新工资</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line"># 例2</span><br><span class="line">SELECT salary,</span><br><span class="line">CASE </span><br><span class="line">WHEN salary&gt;20000 THEN &#x27;A&#x27;</span><br><span class="line">WHEN salary&gt;15000 THEN &#x27;B&#x27;</span><br><span class="line">WHEN salary&gt;10000 THEN &#x27;C&#x27;</span><br><span class="line">ELSE &#x27;D&#x27;</span><br><span class="line">END AS 工资级别</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>其他</p>
<ul>
<li><code>version</code>：获取MySQL当前版本</li>
<li><code>database</code>：获取当前数据库</li>
<li><code>user</code>：获取当前用户</li>
<li><code>if null(参数,指定值)</code>：如果参数值为<code>null</code>，则返回指定值，否则返回参数的值</li>
<li><code>is null(参数)</code>：判断字段或表达式是否为<code>null</code>，如果是，返回1，否则返回0</li>
<li><code>password(&quot;str&quot;)</code>：返回str的密码形式</li>
<li><code>md5(&quot;str&quot;)</code>：返回str的MD5形式</li>
</ul>
<p>案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT VERSION();</span><br><span class="line">SELECT DATABASE();</span><br><span class="line">SELECT USER();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>分组函数</strong></p>
<ul>
<li><code>sum</code>：求和。一般用于处理数值</li>
<li><code>max</code> ：最大值</li>
<li><code>min</code>： 最小值</li>
<li><code>avg</code>：平均值。一般用于处理数值</li>
<li><code>count</code>：计数。参数可以是<code>字段</code>、<code>*</code>、<code>常量值（一般用1）</code>，<code>*</code>表示所有字段同时考虑，一般用来统计行数。常量值也能用来统计行数。</li>
</ul>
<blockquote>
<p>1.、以上五个分组函数都忽略<code>null</code>值，除了<code>count(*)</code>，因为主键一定不为空<br>
2、max、min、count可以处理任何数据类型。<br>
3、都可以搭配distinct使用，用于统计去重后的结果</p>
<p>4、MYISAM存储引擎下 ，<code>COUNT(*)</code>的效率高；INNODB存储引擎下，<code>COUNT(*)</code>和<code>COUNT(1)</code>的效率差不多，比COUNT(字段)要高一些。</p>
</blockquote>
<p>和分组函数同时查询的字段，必须是group by后的字段，不然会出现错误结果。</p>
<p>案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT SUM(salary) FROM employees;</span><br><span class="line">SELECT AVG(salary) FROM employees;# 与distinct搭配使用</span><br><span class="line"></span><br><span class="line">SELECT COUNT(DISTINCT salary),COUNT(salary) FROM employees;  </span><br><span class="line"># 57,107</span><br><span class="line"># 和分组函数一同查询的字段有限制</span><br><span class="line"># 下面这种，employee_id是无意义的，只有group by后的字段才能和分组函数一起查询</span><br><span class="line">SELECT AVG(salary),employee_id  FROM employees;</span><br></pre></td></tr></table></figure>
<h2 id="分组查询">分组查询</h2>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 查询列表from 表[where 筛选条件]group by 分组的字段  # 使用group by进行分组[having 条件语句];</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<p>1、和分组函数一同查询的字段必须是group by后出现的字段，确保意义正确</p>
<p>2、筛选分为两类：分组前筛选(where)和分组后(having)筛选。having后面一般跟的分组函数，表示对初步筛选后的结果再进行筛选。</p>
<p>3、分组可以按单个字段也可以按多个字段。</p>
<p>4、可以搭配排序使用。</p>
<p>5、having 和group by后，mysql支持别名，Oracle不支持。一般也不使用。</p>
<p>6、having后面的条件一般是分组函数，如果是一般的字段，必须是select中的字段（自己实验得出）。规范来说，having必须是在使用group by语句之后才能使用，如果不是在group by后面，having的作用和where的作用相同，但是不建议这么做，最好按照规范来做。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">MySQL 5.7版本，出现以下结果</span><br><span class="line">*/</span><br><span class="line">SELECT salary FROM employees </span><br><span class="line">WHERE salary&gt;15000; # 输出正确结果</span><br><span class="line"></span><br><span class="line">SELECT last_name FROM employees</span><br><span class="line">WHERE salary&gt;15000; # 输出正确结果</span><br><span class="line">#－－－－－－－－－－－－－－－－－－</span><br><span class="line">SELECT salary FROM employees </span><br><span class="line">HAVING salary&gt;15000; # 输出正确结果</span><br><span class="line"></span><br><span class="line">#如果having后的字段，没在select中，会报错</span><br><span class="line">SELECT last_name FROM employees </span><br><span class="line">HAVING salary&gt;15000; # 显示语法错误，原因是‘having clause’中没有salary列</span><br></pre></td></tr></table></figure>
<p><strong><code>where</code>和<code>having</code>的区别：</strong></p>
<ul>
<li>where是分组前进行筛选，是对原始表筛选；having是在分组后筛选，是对分组后的结果再进行筛选，一般的筛选条件是分组函数。可以根据代码执行顺序进行推断。</li>
<li>在语句格式上，where写在group by 前面，having写在group by后面。</li>
</ul>
<p>案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#案例1：查询每个工种的员工平均工资</span><br><span class="line">SELECT AVG(salary),job_id  #和分组函数同时查询的字段，是用于分组的字段</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id;</span><br><span class="line"></span><br><span class="line">#案例2：查询邮箱中包含a字符的每个部门的最高工资</span><br><span class="line">SELECT MAX(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE email LIKE &#x27;%a%&#x27;</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br><span class="line">#案例3：查询哪个部门的员工个数&gt;5</span><br><span class="line">SELECT COUNT(*),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id  # 先查询每个部门员工个数</span><br><span class="line">HAVING COUNT(*)&gt;5;  # 然后选出个数&gt;5的</span><br><span class="line"></span><br><span class="line">#案例4：查询每个工种有奖金的员工的最高工资&gt;6000的工种编号和最高工资,按最高工资升序</span><br><span class="line">SELECT job_id,MAX(salary) m</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct IS NOT NULL</span><br><span class="line">GROUP BY job_id</span><br><span class="line">HAVING m&gt;6000</span><br><span class="line">ORDER BY m;</span><br><span class="line"></span><br><span class="line">#按多个字段分组</span><br><span class="line">#案例5：查询每个查询每个工种每个部门的平均工资</span><br><span class="line">SELECT department_id, job_id,AVG(salary) FROM employees</span><br><span class="line">GROUP BY department_id,job_id; # 顺序可以颠倒</span><br><span class="line"># 这两种写法等价，每个A，每个B和每个B，每个A结果相同。</span><br><span class="line">SELECT department_id, job_id,AVG(salary) FROM employees</span><br><span class="line">GROUP BY job_id,department_id;</span><br></pre></td></tr></table></figure>
<h2 id="多表连接查询">多表连接查询</h2>
<p>当查询的字段来自多个表时，就需要使用连接查询。</p>
<p>如果不使用连接条件，或者连接条件无效，则多个表会按照笛卡儿乘积的形式连接，即查询的结果为m*n的表。</p>
<p>解决这种现象就需要添加有效的连接条件。</p>
<p>连接方式按照功能分类：</p>
<ul>
<li>内连接
<ul>
<li>等值连接</li>
<li>非等值连接</li>
<li>自连接</li>
</ul>
</li>
<li>外连接。
<ul>
<li>左外连接，left join左边是主表</li>
<li>右外连接，right join右边是主表</li>
<li>全外连接</li>
</ul>
</li>
<li>交叉连接</li>
</ul>
<p>其中，SQL 92标准仅支持内连接，ORACLE和SQL Server支持一部分外连接（mysql不支持），SQL 99标准支持内连接+外连接+交叉连接(mysql不支持全外连接)。</p>
<p>下面以两个表连接为例，说明连接查询的语法格式。</p>
<p><strong>内连接</strong></p>
<p>等值连接</p>
<p>等值内连接的结果是多表的交集。n表连接，至少需要n-1个连接条件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># SQL 92语法</span><br><span class="line">select 查询列表</span><br><span class="line">from 表1 别名，表2 别名</span><br><span class="line">where 表1.字段= 表2.字段   # 连接条件 </span><br><span class="line">[and 筛选条件]</span><br><span class="line">其他结构...</span><br><span class="line"></span><br><span class="line"># SQL 99语法</span><br><span class="line">select 查询列表</span><br><span class="line">from 表1 别名</span><br><span class="line">[inner] join 表2 别名</span><br><span class="line">on 连接条件</span><br><span class="line">其他结构...</span><br><span class="line"># SQL 99语法将筛选条件和连接条件分离，便于阅读</span><br></pre></td></tr></table></figure>
<p>非等值连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># SQL 92</span><br><span class="line">select 查询列表</span><br><span class="line">from 表1 别名，表2, 别名...</span><br><span class="line">where 非等值连接条件</span><br><span class="line">[and 筛选条件]</span><br><span class="line">其他结构...</span><br><span class="line"></span><br><span class="line"># SQL 99</span><br><span class="line">select 查询列表</span><br><span class="line">from 表1 别名</span><br><span class="line">[inner] join 表2 别名</span><br><span class="line">on 非等值连接条件</span><br><span class="line">其他结构...</span><br></pre></td></tr></table></figure>
<p>自连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 自连接是指同一张表自己和自己连接。</span><br><span class="line">#将同一张表看作两个表，起两个别名。</span><br><span class="line"># SQL 92</span><br><span class="line">select 查询列表</span><br><span class="line">from 表 别名1,表 别名2</span><br><span class="line">where 连接条件</span><br><span class="line">[and 筛选条件]</span><br><span class="line">其他结构...</span><br><span class="line"></span><br><span class="line"># SQL 99语法</span><br><span class="line">select 查询列表</span><br><span class="line">from 表 别名1</span><br><span class="line">[inner] join 表 别名2</span><br><span class="line">on 连接条件</span><br><span class="line">其他结构...</span><br></pre></td></tr></table></figure>
<p>总结：对于内连接，SQL 92和SQL 99标准只有在连接表的方式和连接条件的位置不同，其余用法相同。SQL 99语法将连接条件写在<code>on</code>语句后面，与筛选条件分离，提高了易读性。</p>
<p>内连接案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#案例1：查询有奖金的每个部门的部门名、部门的领导编号，以及该部门的最低工资</span><br><span class="line"># SQL 92，等值连接</span><br><span class="line">SELECT department_name,d.`manager_id`,MIN(salary)</span><br><span class="line">FROM departments d,employees e</span><br><span class="line">WHERE d.`department_id`=e.`department_id`</span><br><span class="line">AND commission_pct IS NOT NULL</span><br><span class="line">GROUP BY department_name,d.`manager_id`;</span><br><span class="line"></span><br><span class="line"># SQL 99，等值连接</span><br><span class="line">SELECT d.department_name,d.manager_id,MIN(salary)</span><br><span class="line">FROM employees e </span><br><span class="line">JOIN departments d</span><br><span class="line">ON e.`department_id` = d.`department_id`</span><br><span class="line">WHERE e.`commission_pct` IS NOT NULL</span><br><span class="line">GROUP BY e.`department_id`;</span><br><span class="line"></span><br><span class="line">#案例2：查询员工的工资和工资级别</span><br><span class="line"># SQL 92，非等值连接</span><br><span class="line">SELECT salary,grade_level</span><br><span class="line">FROM employees e,job_grades g</span><br><span class="line">WHERE salary BETWEEN g.`lowest_sal` AND g.`highest_sal`;</span><br><span class="line"></span><br><span class="line"># SQL 99，非等值连接</span><br><span class="line">SELECT salary,grade_level</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN job_grades g </span><br><span class="line">ON e.`salary` BETWEEN g.`lowest_sal` AND g.`highest_sal`;</span><br><span class="line"></span><br><span class="line">#案例3：查询员工名和上级的名称</span><br><span class="line"># SQL 92，自连接</span><br><span class="line">SELECT e.last_name,m.last_name</span><br><span class="line">FROM employees e,employees m</span><br><span class="line">WHERE e.`manager_id`=m.`employee_id`;</span><br><span class="line"></span><br><span class="line"># SQL 99，自连接</span><br><span class="line">SELECT e.last_name,m.last_name</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN employees m</span><br><span class="line">ON e.`manager_id`= m.`employee_id`;</span><br></pre></td></tr></table></figure>
<p><strong>外连接</strong></p>
<p>外连接的查询结果为主表中的所有记录，如果从表中有和它匹配的，则显示匹配的值，如果从表中没有和它匹配的，则从表的结果显示<code>null</code>。外连接查询结果=内连接结果+主表中有，从表没有的记录。</p>
<p>外连接的特性决定了其应用场景为一般<strong>用于查询两个表交集以外的部分</strong>。即用于查询一个表中有，另一个表没有的记录。</p>
<p>左外连接和右外连接交换两个表的顺序，可以实现同样的效果 。</p>
<p>全外连接=内连接的结果+表1有，表2没有+表2有，表1没有。</p>
<p>交叉连接可以省略连接条件，其结果是笛卡尔积。</p>
<p>MySQL中只有SQL 99支持外连接（但不支持全外连接），只介绍SQL 99，语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 语法：</span><br><span class="line">select 查询内容</span><br><span class="line">from 表1</span><br><span class="line">left [outer]|right [outer]|full [outer]|cross join 表2 </span><br><span class="line">on 连接条件</span><br><span class="line">其他结构...;</span><br><span class="line"></span><br><span class="line">#outer可以省略</span><br></pre></td></tr></table></figure>
<p>外连接案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#案例1：查询哪个部门没有员工</span><br><span class="line">#左外</span><br><span class="line">SELECT d.*,e.employee_id</span><br><span class="line">FROM departments d</span><br><span class="line">LEFT OUTER JOIN employees e</span><br><span class="line">ON d.`department_id` = e.`department_id`</span><br><span class="line">WHERE e.`employee_id` IS NULL;</span><br><span class="line"> </span><br><span class="line">#右外,调换两个表的顺序后使用右外连接，和上面写法等价 </span><br><span class="line">SELECT d.*,e.employee_id</span><br><span class="line">FROM employees e</span><br><span class="line">RIGHT OUTER JOIN departments d</span><br><span class="line">ON d.`department_id` = e.`department_id`</span><br><span class="line">WHERE e.`employee_id` IS NULL;</span><br></pre></td></tr></table></figure>
<p><strong>总结</strong></p>
<p>以集合关系来理解内连接和外连接：</p>
<p><a href="https://cdn.jsdelivr.net/gh/kangshitao/BlogPicture@main/img/mysql-basis_7.png"><img src="http://r9jy0okua.bkt.clouddn.com/img/mysql-basis_7.png" alt="img"></a></p>
<h2 id="子查询">子查询</h2>
<p>嵌套在其他语句内部的select语句称为<strong>子查询</strong>或<strong>内查询</strong>。外面的语句可以是insert、update、delete、select等，一般为select语句较多。</p>
<p>如果外面的语句是select语句，则称其为<strong>主查询</strong>或<strong>外查询</strong>。</p>
<p>子查询根据位置的不同和结果集的不同可以有以下分类。</p>
<p><strong>按子查询出现的位置分类</strong>：</p>
<ul>
<li><code>select</code>后面：仅支持标量子查询</li>
<li><code>from</code>后面：表子查询</li>
<li><code>where</code>或<code>having</code>后面(常用)：标量子查询、列子查询、行子查询</li>
<li><code>exists</code>后面（相关子查询）：均可。<code>exists</code>返回结果0或1，可以用<code>in</code>代替</li>
</ul>
<p><strong>按结果集的行列数不同分类</strong>：</p>
<ul>
<li>标量子查询（结果集只有一行一列）</li>
<li>列子查询（结果集只有一列多行）</li>
<li>行子查询（结果集一行多列）</li>
<li>表子查询（又称嵌套子查询。结果集一般为多行多列,一或多都可）</li>
</ul>
<p><strong>特点</strong>：</p>
<ul>
<li>子查询放在小括号内。</li>
<li>子查询一般放在条件的右侧。</li>
<li>子查询的执行优先于主查询执行，主查询的条件用到了子查询的结果。</li>
<li>标量、单行子查询，一般搭配着<strong>单行操作符</strong>使用：<code>&lt;</code>，<code>&gt;</code>，<code>=</code>，<code>&lt;=</code>，<code>&gt;=</code>，<code>&lt;&gt;</code></li>
<li>多行子查询，一般搭配着<strong>多行操作符</strong>使用：<code>in/not in</code>、<code>any|some</code>、<code>all</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">in/not in`表示等于/不等于列表中的**任意一个**，例：`xxx in ();</span><br></pre></td></tr></table></figure>
<p><code>any|some</code>表示和子查询返回的<strong>某一个值</strong>进行比较（只要有一个满足即可），例：<code>xxx &gt;any();</code>。大于<code>any|some</code>等价于大于最小值，小于<code>any|some</code>等价于小于最大值。<code>any|some</code>一般很少使用。</p>
<p><code>all</code>表示和子查询返回的<strong>所有值</strong>进行比较。</p>
<p><strong>相关子查询和嵌套子查询对比</strong></p>
<p><strong>嵌套子查询</strong>的执行<strong>不依赖于外部的查询</strong>。其执行过程为：</p>
<ul>
<li>执行子查询，其结果不被显示，而是传递给外部查询，作为外部查询的条件使用。</li>
<li>执行外部查询，并显示整个结果。</li>
</ul>
<p><strong>相关子查询</strong>的执行<strong>依赖于外部查询</strong>。多数情况下是子查询的WHERE子句中引用了外部查询的表。其执行过程为：</p>
<ul>
<li>从外层查询中取出一个元组，将元组相关列的值传给内层查询。</li>
<li>执行内层查询，得到子查询操作的值。</li>
<li>外查询根据子查询返回的结果或结果集得到满足条件的行。</li>
<li>然后外层查询取出下一个元组重复做步骤1-3，直到外层的元组全部处理完毕。</li>
</ul>
<p>比如下面的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 嵌套子查询</span><br><span class="line"># 查询工资大于平均工资的员工信息</span><br><span class="line">/*</span><br><span class="line">平均工资是子查询，其不依赖于外查询</span><br><span class="line">*/</span><br><span class="line">SELECT * FROM employees</span><br><span class="line">WHERE salary&gt;( </span><br><span class="line">	SELECT AVG(salary) FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 相关子查询</span><br><span class="line"># 查询每个部门的员工数量和部门信息</span><br><span class="line">/*</span><br><span class="line">可以使用子查询的方式，也可以使用外连接+分组查询的方式。</span><br><span class="line">查询员工数量时，需要将子查询和父查询根据部门id关联起来，</span><br><span class="line">先统计一个部门的数量，然后继续统计下一个部门数量,</span><br><span class="line">子查询和父查询二者交替执行</span><br><span class="line">*/</span><br><span class="line">SELECT d.*,(</span><br><span class="line">	SELECT COUNT(*) FROM employees e</span><br><span class="line">	WHERE e.`department_id`=d.`department_id`</span><br><span class="line">	) AS &#x27;NUMBER&#x27;</span><br><span class="line">FROM departments d;</span><br><span class="line"></span><br><span class="line"># exist也是相关子查询。能用exist的，也能使用in代替</span><br><span class="line"># 查询有员工的部门名</span><br><span class="line">SELECT department_name</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE EXISTS(</span><br><span class="line">	SELECT *   </span><br><span class="line">	FROM employees e</span><br><span class="line">	WHERE d.`department_id`=e.`department_id`</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>子查询案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -------------用在where和having后使用子查询------------</span><br><span class="line">#案例1：查询最低工资大于50号部门最低工资的 部门id 和 其最低工资</span><br><span class="line">/*思路：</span><br><span class="line">1.先查出50号部门的最低工资</span><br><span class="line">2.然后查出每个部门的最低工资，</span><br><span class="line">3.根据前两步的结果筛选出最低工资大于50号部门最低工资的部门信息</span><br><span class="line">*/</span><br><span class="line">SELECT MIN(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING MIN(salary)&gt;(</span><br><span class="line">	SELECT  MIN(salary)</span><br><span class="line">	FROM employees</span><br><span class="line">	WHERE department_id = 50</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#案例2：查询其它工种中，比‘IT_PROG’工种任一工资低的员工的 员工号、工种和薪资</span><br><span class="line">/*思路：</span><br><span class="line">1.查询‘IT_PROG’部门的任一工资</span><br><span class="line">2.查询员工信息，salary&lt;1的结果</span><br><span class="line">*/</span><br><span class="line">SELECT employee_id,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&lt;ANY(</span><br><span class="line">	SELECT DISTINCT salary</span><br><span class="line">	FROM employees</span><br><span class="line">	WHERE job_id = &#x27;IT_PROG&#x27;</span><br><span class="line">) AND job_id&lt;&gt;&#x27;IT_PROG&#x27;;</span><br><span class="line"></span><br><span class="line"># 小于any，只要比最大值小就可以，因此可以不用any</span><br><span class="line">SELECT employee_id,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&lt;(</span><br><span class="line">	SELECT MAX(salary) </span><br><span class="line">	FROM employees</span><br><span class="line">	WHERE job_id = &#x27;IT_PROG&#x27;</span><br><span class="line"></span><br><span class="line">) AND job_id&lt;&gt;&#x27;IT_PROG&#x27;;</span><br><span class="line"></span><br><span class="line"># -------------用在select后使用子查询------------</span><br><span class="line">#案例：查询每个部门的员工个数和部门信息</span><br><span class="line">SELECT d.*,(</span><br><span class="line">	SELECT COUNT(*)</span><br><span class="line">	FROM employees e</span><br><span class="line">	WHERE e.department_id = d.`department_id`</span><br><span class="line"> ) 个数</span><br><span class="line"> FROM departments d;</span><br><span class="line"> </span><br><span class="line"># -------------用在from后使用子查询------------</span><br><span class="line"># from后面的子查询结果作为一张表，必须起别名</span><br><span class="line"># 案例：查询每个部门的平均工资的工资等级</span><br><span class="line">/*思路：</span><br><span class="line">1.使用子查询，查询每个部门的平均工资</span><br><span class="line">2.根据平均工资查找工资等级</span><br><span class="line">*/</span><br><span class="line">SELECT  ag_dep.*,g.`grade_level`</span><br><span class="line">FROM (</span><br><span class="line">	SELECT AVG(salary) ag,department_id</span><br><span class="line">	FROM employees</span><br><span class="line">	GROUP BY department_id</span><br><span class="line">) ag_dep</span><br><span class="line">INNER JOIN job_grades g</span><br><span class="line">ON ag_dep.ag BETWEEN lowest_sal AND highest_sal;</span><br><span class="line"></span><br><span class="line"># -------------用在exists后使用子查询------------</span><br><span class="line"># 查询有员工的部门名</span><br><span class="line"># 使用 in</span><br><span class="line">SELECT department_name</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE d.`department_id` IN(</span><br><span class="line">	SELECT department_id</span><br><span class="line">	FROM employees</span><br><span class="line">);</span><br><span class="line"># 使用外连接</span><br><span class="line">SELECT DISTINCT department_name</span><br><span class="line">FROM departments d</span><br><span class="line">INNER JOIN employees e</span><br><span class="line">ON d.`department_id`=e.`department_id`</span><br><span class="line">WHERE e.`employee_id` IS NOT NULL;</span><br><span class="line"></span><br><span class="line"># 使用exists</span><br><span class="line">SELECT department_name</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE EXISTS(</span><br><span class="line">	SELECT *</span><br><span class="line">	FROM employees e</span><br><span class="line">	WHERE d.`department_id`=e.`department_id`</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="分页查询">分页查询</h2>
<p>如果想要显示查询结果中的一部分，就需要使用分页查询，使用<code>limit</code>限制返回的结果开始位置和条数。</p>
<p>分页查询通常用于实际web项目中，根据用户需求提交对应页数的查询结果。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 查询内容</span><br><span class="line">from 表</span><br><span class="line">[where 条件]</span><br><span class="line">[group by 分组字段]</span><br><span class="line">[having 条件]</span><br><span class="line">[order by 排序字段]</span><br><span class="line">limit [偏移量,] 条目数;  # 使用limit语句进行分页</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>偏移量从0开始，可以省略，默认为0，理解为索引-1。偏移量为0表示从第一条开始</li>
<li><code>limit</code>子句放在查询语句的最后。</li>
</ul>
<p>如果每页显示条目数为<code>sizePage</code>，当前页数为<code>page</code>，则查询语句为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表</span><br><span class="line">limit (page-1)*sizePage,sizePage;</span><br></pre></td></tr></table></figure>
<p>案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#案例1：查询第11条到第25条信息</span><br><span class="line">SELECT * FROM  employees LIMIT 10,15;</span><br><span class="line"></span><br><span class="line">#案例2：查询有奖金的员工中，工资较高的前10名员工信息</span><br><span class="line">SELECT * FROM employees </span><br><span class="line">WHERE commission_pct IS NOT NULL </span><br><span class="line">ORDER BY salary DESC </span><br><span class="line">LIMIT 10;</span><br></pre></td></tr></table></figure>
<p><strong>子查询经典案例，使用排序和分页组合求最值</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.查询工资最低的员工姓名和工资</span><br><span class="line">SELECT last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary = ( # 先使用子查询查找最低工资</span><br><span class="line">	SELECT MIN(salary) FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 2.查询平均工资最低的部门信息</span><br><span class="line">/*思路：</span><br><span class="line">1.先查询每个部门的平均工资</span><br><span class="line">2.筛选出平均工资中最低的部门</span><br><span class="line">3.根据上一步的结果，查询出部门信息</span><br><span class="line">*/</span><br><span class="line"># 方式一：</span><br><span class="line">SELECT * FROM departments d # d.根据id，查询部门信息</span><br><span class="line">WHERE d.`department_id` = </span><br><span class="line">(</span><br><span class="line">	SELECT department_id # c.找出平均工资为最低平均工资的部门id</span><br><span class="line">	FROM employees</span><br><span class="line">	GROUP BY department_id</span><br><span class="line">	HAVING AVG(salary)=</span><br><span class="line">    ( </span><br><span class="line">		SELECT MIN(ag.a_s) # b.找出最低的平均工资</span><br><span class="line">		FROM( # a.查询出每个部门的平均工资和id</span><br><span class="line">			SELECT AVG(salary) a_s,department_id </span><br><span class="line">            FROM employees</span><br><span class="line">			GROUP BY department_id</span><br><span class="line">			) AS ag</span><br><span class="line">	)</span><br><span class="line">);</span><br><span class="line"># 方式二，使用limit，求出平均工资以后进行排序，就可以直接选出部门id</span><br><span class="line">SELECT * FROM departments d</span><br><span class="line">WHERE d.`department_id`= </span><br><span class="line">(</span><br><span class="line">	SELECT department_id </span><br><span class="line">	FROM employees</span><br><span class="line">	GROUP BY department_id</span><br><span class="line">	ORDER BY AVG(salary)</span><br><span class="line">	LIMIT 1   # 递增排序中的第一条就是要查询的部门</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 3.各个部门中 最高工资最低的部门的最低工资是多少</span><br><span class="line">SELECT MIN(salary) FROM employees</span><br><span class="line">WHERE department_id = ( # 子查询将排序和分页组合找出最值</span><br><span class="line">	SELECT department_id </span><br><span class="line">    FROM employees</span><br><span class="line">	GROUP BY department_id</span><br><span class="line">	ORDER BY MAX(salary) </span><br><span class="line">	LIMIT 1</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 4.查询平均工资最高的部门的manager信息</span><br><span class="line">SELECT last_name,department_id,email,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id=</span><br><span class="line">( # b,根据部门id找出管理者id</span><br><span class="line">	SELECT manager_id FROM departments</span><br><span class="line">	WHERE department_id = </span><br><span class="line">    (  # a,找出平均工资最高的部门id</span><br><span class="line">		SELECT department_id FROM employees</span><br><span class="line">		GROUP BY department_id</span><br><span class="line">		ORDER BY AVG(salary) DESC</span><br><span class="line">		LIMIT 1</span><br><span class="line">	)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="联合查询">联合查询</h2>
<p>如果要查询的结果<strong>来自于多个表，且多个表没有直接的连接关系，但查询的信息一致时</strong>，可以使用<strong>联合查询</strong>。联合查询使用<code>union</code>将多次的查询结果合并成一个结果。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用union将多个查询语句合并select xxxunion [all]select xxxunion [all].....select xxx</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>要求多条查询语句的查询的<strong>列数必须一致</strong></li>
<li>多条查询语句的查询的列的类型和含义尽量相同</li>
<li><code>union</code>默认去重，<code>union all</code>代表不去重</li>
</ul>
<p><strong><code>join</code>和<code>union</code>的区别</strong></p>
<ul>
<li><code>join</code>用于外连接，是根据一定的<strong>连接条件</strong>将两张表连接，并生成连接后的结果表，连接条件是<code>on</code>后面的条件。连接包括左外连接、右外连接、全连接和交叉连接。</li>
<li><code>union</code>表示联合查询，是将两个查询结果合并在一起，不需要进行表的连接。<code>union</code>连接的查询语句查询的字段个数必须一致。<code>union</code>默认去重，可以使用<code>all</code>保留全部结果。</li>
</ul>
<h1>DML语言</h1>
<p>DML指数据操作语言。</p>
<p>主要是对表格的添加（insert）、删除（delete）、修改（update）操作。</p>
<h2 id="insert">insert</h2>
<p>向表格中插入数据有两种方式：</p>
<p><strong>方式一</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名(字段1,字段2,...) values(值1,值2,...);</span><br></pre></td></tr></table></figure>
<p>要求：</p>
<ul>
<li>字段类型和值类型必须一致或兼容，字段和值的顺序可以和表中不一致，但是字段和值必须一一对应。</li>
<li>可以为空的字段，如果要插入<code>null</code>值，有两种方式：①字段和值都省略，此时值默认为<code>null</code>；②字段和值都写，值为<code>null</code>。</li>
<li>不可以为空的字段，必须插入值。</li>
<li>字段个数和值的个数必须一致。</li>
<li>字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致。</li>
</ul>
<p><strong>方式二</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名set 列名1=值,列名2=值,...;</span><br></pre></td></tr></table></figure>
<p>两种方式的对比：</p>
<ul>
<li>
<p>方式一支持插入多行，方式二不支持：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO employees(employee_id,last_name,salary)values(123,&#x27;john&#x27;,&#x27;15000&#x27;),values(124,&#x27;jerry&#x27;,&#x27;12000&#x27;),values(125,&#x27;mickey&#x27;,&#x27;11000&#x27;);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>方式一支持子查询，方式二不支持：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查询标量INSERT INTO employees(employee_id,last_name,salary)SELECT 123,&#x27;john&#x27;,&#x27;15000&#x27;;# 从表2中查询到的结果插入表1INSERT INTO employees(employee_id,last_name,salary)SELECT id,name,salaryFROM employees WHERE id&lt;3; </span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="update">update</h2>
<p><strong>修改单表的记录</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set 字段=新值,字段=新值...[where 条件];# 案例# 将90号部门的员工工资修改为15000update employeesset salary=15000where department_id90;</span><br></pre></td></tr></table></figure>
<p><strong>修改多表记录</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># SQL 92语法</span><br><span class="line">update 表1 别名1,表2 别名2</span><br><span class="line">set 字段=新值，字段=新值...</span><br><span class="line">where 连接条件</span><br><span class="line">[and 筛选条件];</span><br><span class="line"></span><br><span class="line"># SQL 99语法，唯一不同的就是连接表的方式不同。其余相同</span><br><span class="line">update 表1 别名</span><br><span class="line">[inner]|left [outer]|right [outer] join 表2 别名</span><br><span class="line">on 连接条件</span><br><span class="line">set 列=值,...</span><br><span class="line">[where 筛选条件];</span><br></pre></td></tr></table></figure>
<h2 id="delete">delete</h2>
<p>delete表示删除表中的一条或多条记录（一行或多行），有两种方式</p>
<p><strong>方式1，使用delete</strong></p>
<p>单表的删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名 </span><br><span class="line">[where 筛选条件]</span><br><span class="line">[limit 条目数]</span><br></pre></td></tr></table></figure>
<p>一般会使用<code>where</code>筛选特定的记录删除，如果没有筛选条件，会删除所有的记录。</p>
<p>可以使用<code>limit</code>限定删除的条数，只能用一个参数，表示删除查询结果的前几条。</p>
<p>多表的删除（级联删除）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 同样地，也分为两种标准的语句，仅仅是连接表的时候不同，其余语句完全相同。</span><br><span class="line"># 以SQL 92为例</span><br><span class="line">delete 别名1，别名2</span><br><span class="line">from 表1 别名1，表2 别名2</span><br><span class="line">where 连接条件</span><br><span class="line">[and 筛选条件];</span><br></pre></td></tr></table></figure>
<p><strong>方式2，使用truncate</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truncate table 表名;</span><br></pre></td></tr></table></figure>
<p><code>delete</code>和<code>truncate</code>两种方式删除记录的区别（详细对比可以参考<a href="https://kangshitao.github.io/2021/04/26/mysql-basis/#refer1">下文</a>）：</p>
<ul>
<li><code>truncate</code>不能加<code>where</code>条件，而<code>delete</code>可以加<code>where</code>条件，意味着<code>truncate</code>会删除表中的所有记录。</li>
<li><code>truncate</code>的效率稍高。</li>
<li><code>truncate</code> 删除带自增长的列的表后，如果再插入数据，数据从1开始，<code>delete</code> 删除带自增长列的表后，如果再插入数据，数据从上一次的断点处开始</li>
<li><code>truncate</code>删除没有返回值，<code>delete</code>删除有返回值</li>
<li><code>truncate</code>属于DDL语言，删除不能回滚，<code>delete</code>是DML语言，支持事务，可以回滚</li>
</ul>
<h1>DDL语句</h1>
<p>DDL为数据定义语言。允许用户<strong>定义</strong>数据，包括创建（create）、删除（drop）、修改（alter）表和数据库，操作对象是<strong>表和数据库</strong>。通常，DDL由数据库管理员执行。</p>
<h2 id="create">create</h2>
<p><strong>创建数据库</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database [if not exists] 库名;</span><br></pre></td></tr></table></figure>
<p><strong>创建表</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 语法：create table [if not exists] 表名(	列名 列的类型[(长度) 约束],	列名 列的类型[(长度) 约束],	列名 列的类型[(长度) 约束],	...	列名 列的类型[(长度) 约束]);# 例：创建名为stuinfo的表，包含的列和类型如下：CREATE TABLE IF NOT EXISTS stuinfo(	stuId INT,	stuName VARCHAR(20),  # varchar类型必须有长度	gender CHAR,	bornDate DATETIME);</span><br></pre></td></tr></table></figure>
<p>创建库/表的时候，可以使用<code>if not exists</code>进行判断，如果要创建的库/表不存在，则创建，否则不会创建。不能创建名字相同的两个库/表。</p>
<p><strong>表的复制</strong></p>
<p>将<code>create</code>和<code>select</code>语句结合，可以实现表的复制：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 仅复制表的结构</span><br><span class="line">create table 新表名 like 旧表</span><br><span class="line"></span><br><span class="line"># 复制表的字段和数据</span><br><span class="line">create table 新表名</span><br><span class="line">select 字段列表 from 旧表 [where 筛选条件];</span><br><span class="line"></span><br><span class="line">#仅仅复制某些字段</span><br><span class="line">create table 新表名</span><br><span class="line">select 字段列表 from 旧表 where false;</span><br></pre></td></tr></table></figure>
<h2 id="alter">alter</h2>
<p>修改库/表使用<code>alter</code>语句</p>
<p>修改数据库，一般很少对现有数据库进行修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#已废弃.现在需要去文件路径中重命名</span><br><span class="line">RENAME DATABASE books TO 新库名; </span><br><span class="line"># 更数据库字符集</span><br><span class="line">ALTER DATABASE books CHARACTER SET gbk;</span><br></pre></td></tr></table></figure>
<p>修改表：</p>
<p>修改表中的字段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加新的列，必须指定类型</span><br><span class="line"># 新列默认在表中的位置为最后，可以使用first或after参数指定位置</span><br><span class="line">alter table 表名 add column 列名 类型 [约束] [first|after 列名];</span><br><span class="line"></span><br><span class="line"># 删除某列（无法使用if exist进行判断）</span><br><span class="line">alter table 表名 drop column 列名;</span><br><span class="line"></span><br><span class="line"># 修改列名</span><br><span class="line">alter table 表名 change column 旧列名 新列名 类型;</span><br><span class="line"></span><br><span class="line"># 修改列的类型或约束</span><br><span class="line">alter table 表名 modify column 列名 类型 [约束];</span><br></pre></td></tr></table></figure>
<p>修改表名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 格式：</span><br><span class="line">alter table 表名 rename [to] 新表名;</span><br><span class="line"># 案例：</span><br><span class="line">ALTER TABLE author RENAME TO book_author;</span><br></pre></td></tr></table></figure>
<h2 id="drop">drop</h2>
<p>删除数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database [if exists] 库名;</span><br></pre></td></tr></table></figure>
<p>删除表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table [if exists] 表名;</span><br></pre></td></tr></table></figure>
<p>同样地，删除数据库/表的时候，可以使用<code>if exists</code>判断是否存在，避免报错。</p>
<h1>约束和标识列</h1>
<h2 id="约束">约束</h2>
<p>约束指的是一种限制，用于限制表中的数据，为了保证表中的数据的准确和可靠性。</p>
<p>主要有以下六大约束：</p>
<ul>
<li><code>NOT NULL</code>：非空，用于保证该字段的值不能为空。比如姓名、学号等</li>
<li><code>DEFAULT</code>：默认，用于保证该字段有默认值。比如性别</li>
<li><code>CHECK</code>：检查约束[mysql中不支持]。比如年龄、性别，检查年龄是否在某个区间内、性别是否是男或女。</li>
<li><code>PRIMARY KEY</code>：主键，用于保证该字段的值具有唯一性，并且非空。比如学号、员工编号等</li>
<li><code>UNIQUE</code>：唯一，用于保证该字段的值具有唯一性，可以为空（<code>unique key</code>可以插入多个<code>null</code>值，空值并不受唯一性约束）。比如座位号。</li>
<li><code>FOREIGN KEY</code>：外键，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值在从表添加外键约束，用于引用主表中某列的值。比如学生表的专业编号（学生表为从表，专业表为主表），员工表的部门编号，员工表的工种编号。</li>
</ul>
<p>其中主键、外键、唯一键都是<code>key</code>，会默认生成索引。</p>
<blockquote>
<p><strong>关于key</strong></p>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/create-table.html">MySQL文档</a>：key是索引的近义词，可以将key理解为索引。</p>
<p><a href="https://sqlrelease.com/sql-server-tutorial/types-of-keys">参考1</a>：key是表中的字段，它们参与RDBMS系统中的以下活动<br>
a.表与表中数据之间的依赖关系由key建立<br>
b.标识数据的唯一性。<br>
c.使表的约束有效果, 进而能够保证数据都是有效的。<br>
d.有可能会提升数据库表的查询效率。</p>
<p>key 包含两层意义和作用：<br>
一是约束（偏重于约束和规范数据库的结构完整性）；<br>
二是索引（辅助查询用）包括primary key (主键)、unique key(唯一键)、foreign key(外键) 等</p>
</blockquote>
<p>约束可以在<strong>创建表</strong>和**修改表(添加数据前)**时添加。</p>
<p>添加约束有两类：</p>
<ul>
<li>列级约束：六大约束语法上都支持，但外键约束没有效果。不可以起约束名。</li>
<li>表级约束：除了非空、默认，其他的都支持。可以起约束名（约束名对于主键没有效果，一直是primary）</li>
</ul>
<p><strong>主键和唯一键对比</strong>：</p>
<ul>
<li>主键的值是唯一的，非空，一个表中最多只能有一个主键，允许多个字段组合在一起作为主键，但不推荐。</li>
<li>唯一键的值是唯一的，但是允许值为空，一个表中可以有多个唯一键，同样允许多个字段组合在一起作为唯一键，但不推荐。</li>
</ul>
<p><strong>外键</strong>：</p>
<ul>
<li>要求在从表设置外键关系</li>
<li>从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求</li>
<li>主表的关联列必须是一个key（一般是主键或唯一）</li>
<li>插入数据时，先插入主表，再插入从表。删除数据时，先删除从表，再删除主表：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#方式一：级联删除，删除主表数据时，将从表中相关的记录(整行)也删除#添加外键时，在最后添加 on delete cascade。例如：ALTER TABLE stuinfo ADD CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id) ON DELETE CASCADE; # 方式二：级联置空，删除主表数据时，将从表中相关的记录中对应的字段置为null#添加外键时，在最后添加 on delete set null。例如：ALTER TABLE stuinfo ADD CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id) ON DELETE SET NULL; </span><br></pre></td></tr></table></figure>
<p><strong>添加约束</strong></p>
<p>列级约束，直接在类型后添加约束名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 例如。create table 表名(    字段名 字段类型 not null,  # 非空    字段名 字段类型 primary key,  # 主键    字段名 字段类型 unique,  # 唯一键    字段名 字段类型 default,  # 默认    ...);</span><br></pre></td></tr></table></figure>
<p>表级约束，在字段都定义完后，再为指定的列添加约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 语法：[constraint 约束别名] 约束(字段名);# 例如：CREATE TABLE stuinfo(	id INT,	stuname VARCHAR(20),	gender CHAR(1),	seat INT,	age INT,	majorid INT,    	CONSTRAINT pk PRIMARY KEY(id),#主键	CONSTRAINT uq UNIQUE(seat),#唯一键	CONSTRAINT ck CHECK(gender =&#x27;男&#x27; OR gender  = &#x27;女&#x27;),#检查（MySQL不支持）	CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id)#外键);</span><br></pre></td></tr></table></figure>
<p>如果多个字段组合作为主键或唯一键，将这几个字段都写在表级约束的括号中，逗号隔开。</p>
<p>表级约束和列级约束可以一起使用，定义外键时使用表级约束，其他约束使用列级约束即可。</p>
<p>查看表中的所有索引（主键、外键、唯一键）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW INDEX FROM 表名;</span><br></pre></td></tr></table></figure>
<p>除了在定义表时添加约束，也可以在修改表的时候添加约束：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1、添加列级约束alter table 表名 modify column 字段名 字段类型 新约束;#2、添加表级约束alter table 表名 add [constraint 约束名] 约束类型(字段名) [外键相关];</span><br></pre></td></tr></table></figure>
<p><strong>删除约束</strong></p>
<p>在修改表的语句中，也可以删除约束，一般的约束在类型后面不加约束就代表删除，对于<code>key</code>，则需要使用<code>drop</code>显式删除，具体如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1.删除非空约束ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NULL;#2.删除默认约束ALTER TABLE stuinfo MODIFY COLUMN age INT;#3.删除主键ALTER TABLE stuinfo DROP PRIMARY KEY;#4.删除唯一键，使用删除索引的语法ALTER TABLE stuinfo DROP INDEX seat;#5.删除外键，需要先将对应的索引删除ALTER TABLE stuinfo DROP INDEX fk_stuinfo_major;ALTER TABLE stuinfo DROP FOREIGN KEY fk_stuinfo_major;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>MySQL中直接删除外键以后，外键依然存在，需要先将同名索引删除，然后再删除外键，这样查询时就不会显示外键了。</p>
<p>删除外键的时候，同名索引如果没被删，MYSQL认为外键仍然存在，MYSQL会在show keys命令里继续显示外键，当drop table时，MYSQL会提示Can’t DROP ‘xxx’; check that column/key exists”<br>
如果再次想删除外键的时候，会报1091错误，提示外键名错误，因为实际上外键已经不存在了。因此MySQL中需要先将对应的索引删除，再删除外键。</p>
</blockquote>
<h2 id="标识列">标识列</h2>
<p><strong>标识列</strong>又称为<strong>自增长列</strong>，可以不用手动的插入值，系统提供默认的序列值，默认从1开始。</p>
<p><strong>格式</strong>：在key的约束后面加上<code>auto_increment</code>即可。</p>
<p><strong>用法</strong>：添加数据时，标识列可以填<code>null</code>，或者不赋值，系统都会自动在已有的基础上+1。也可以手动指定值。</p>
<p><strong>特点</strong>：</p>
<ul>
<li>标识列不是必须和主键搭配，但要求是一个key。</li>
<li>一个表最多只能有一个标识列。</li>
<li>标识列的类型只能是数值型，一般是int型。如果是非int型，自动赋值时是整数，可以手动插入小数。</li>
<li>可以通过<code>SHOW VARIABLES LIKE '%auto_increment%';</code> 查看标识列的步长和默认起始值.</li>
<li>标识列可以通过<code>SET auto_increment_increment=n</code>设置步长。mysql不支持设置起始值，但可以通过手动插入值，设置起始值。</li>
</ul>
<p><strong>使用</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建表时设置标识列CREATE TABLE tab_identity(	id INT,	NAME FLOAT UNIQUE AUTO_INCREMENT,	seat INT );# 修改表时设置标识列ALTER TABLE tab_identity MODIFY COLUMN id INT PRIMARY KEY AUTO_INCREMENT;#三、修改表时删除标识列ALTER TABLE tab_identity MODIFY COLUMN id INT;</span><br></pre></td></tr></table></figure>
<h1>数据库事务</h1>
<p><strong>TCL（Transaction Control Language）</strong>： 事务控制语言</p>
<h2 id="事务概述">事务概述</h2>
<p><strong>事务</strong>：一个或一组SQL语句（一般是DML语句）组成的一个<strong>执行单元</strong>，这个执行单元要么全部执行，要么全部不执行。</p>
<p>DDL语句不支持事务，可以认为DDL语句执行完自动提交，因此也无法回滚。</p>
<p><strong>事务的四大特性（ACID）</strong>：</p>
<ul>
<li><strong>原子性</strong>（<strong>A</strong>tomic）：组成事务的SQL语句要么都执行，要么都不执行（回滚）。</li>
<li><strong>一致性</strong>（<strong>C</strong>onsistent）：事务完成前后，所有数据的状态都是一致的。比如A账户只要减去了100，B账户则必定加上了100。</li>
<li><strong>隔离性</strong>（<strong>I</strong>solation）：多个事务同时操作相同数据库的同一个数据时，即多个事务并发执行，每个事务作出的修改必须与其他事务隔离。</li>
<li><strong>持久性</strong>（<strong>D</strong>uration）：事务一旦提交，对数据库数据的修改被持久化到本地存储。</li>
</ul>
<p><strong>事务分类</strong>：</p>
<ul>
<li><strong>隐式事务</strong>：没有明显的开启和结束的标记，本身就是一个事务。对于单条SQL语句，数据库系统自动将其作为一个事务执行，这种事务被称为隐式事务。<strong>隐式事务系统会自动提交</strong>。</li>
<li><strong>显式事务</strong>：具有明显的开启和结束的标记，即手动开启事务。显式事务必须保证系统的自动提交功能被禁用，实际上，MySQL中显示开启事务时，自动提交是无效的，不需要手动设置。</li>
</ul>
<h2 id="事务的开启">事务的开启</h2>
<p>一个完整的事务包括以下执行流程：开启事务→执行事务语句→提交或回滚。</p>
<p>事务的执行结果要么是提交，要么是回滚。</p>
<p><strong>步骤一：开启事务</strong></p>
<p>开启事务有两种方式，一种是关闭自动提交模式，隐式开启事务；另一种是显式开启事务，有两种显式开启事务的语法，具体如下：</p>
<p>方式一：<strong>关闭自动提交模式</strong>，之后遇到需要开启事务的sql时，会自动开启事务，相当于隐式开启事务:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set autocommit=0; # 将自动提交模式关闭</span><br><span class="line">执行语句</span><br></pre></td></tr></table></figure>
<p>方式二：<strong>显式开启事务</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 方式一：</span><br><span class="line">start transaction;</span><br><span class="line"></span><br><span class="line">#方式二：</span><br><span class="line">begin;</span><br></pre></td></tr></table></figure>
<p><strong>步骤二：执行语句</strong></p>
<p>在这一步，可以编写执行语句，包括insert、update、delete等语句。</p>
<p>DDL语言（create、drop、truncate等）是非事务的，可以理解为事务中的DDL语言执行完后会自动提交（禁用自动提交也没用），无法回滚，影响事务其他DML操作。</p>
<p>如果事务中掺杂了DDL语句，执行完DDL语句后会自动提交，导致之前的执行语句被提交，无法回滚，因此为了安全起见，尽量将DDL和DML完全分开，便于回滚。</p>
<p><strong>步骤三：结束事务</strong></p>
<p>事务的结束有两种情况：</p>
<ul>
<li><code>commit [work]</code>：提交，表示事务的执行单元都执行了。</li>
<li><code>rollback [work]</code> ：回滚，表示事务的执行单元都没执行。</li>
</ul>
<blockquote>
<p>事务相关的其他关键字：</p>
<p><code>savepoint identifier</code>：设置一个名为identifier的保存点</p>
<p><code>release savepoint identifier</code>：删除一个事务的名为identifier的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</p>
<p><code>rollback to identifier</code> ：把事务回滚到保存点。不算真正地结束事务，仍可以使用rollback将整个事务的修改撤销，因此执行了此语句后，也需要显式运行commit或rollback命令结束事务。</p>
</blockquote>
<p>事务的使用案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#开启事务，三种均可#SET autocommit=0;#START TRANSACTION;begin;#事务执行语句UPDATE employees SET salary = 17200 WHERE username=&#x27;K_ing&#x27;;UPDATE employees SET salary = 10000 WHERE username=&#x27;Marry&#x27;;#结束事务，要么提交，要么回滚ROLLBACK;#commit;</span><br></pre></td></tr></table></figure>
<p><strong>drop、delete、truncate三者的区别</strong>：</p>
<ul>
<li>drop用于删除整个表。</li>
<li>delete可以使用筛选条件，删除表中的一行或多行记录。并且同时将该行的删除操作作为事务记录在日志中保存以便进行进行回滚操作。</li>
<li>truncate table则一次性地从表中删除所有的数据，即所有行，不能使用筛选条件。并不把单独的删除操作记录记入日志保存，操作不能恢复。</li>
<li>delete是DML语言，支持事务，delete操作可以会滚；而truncate和drop是ddl语言，不支持事务，因此无法回滚。</li>
<li>truncate和delete只删除数据，drop则删除整个表，包括结构和数据。</li>
<li>delete可以激活触发器。truncate不能激活触发器。</li>
<li>当表被truncate后，这个表和索引所占用的空间会<strong>恢复到初始大小</strong>，并且标识列也从1重新开始计数；delete操作不会减少表或索引所占用的空间，标识列还是从断点处计数。drop语句将表所占用的空间全释放掉。</li>
<li>速度上：drop&gt;truncate&gt;delete</li>
</ul>
<h2 id="事务的隔离级别">事务的隔离级别</h2>
<p>当多个事务同时操作同一个数据库的相同数据时，容易导致并发问题，包括以下问题：</p>
<p><strong>脏写（丢失修改）</strong>：一个事务修改了其他事务还没有提交的数据，如果其他事务回滚，导致当前事务的修改丢失。事务B去修改了事务A修改过的值，但是此时事务A还没提交，所以事务A随时会回滚，导致事务B修改的值也没了。<br>
<strong>脏读</strong>：一个事务读取到了其他事务未提交（一般指<strong>数据修改</strong>）的数据。事务B去查询了事务A修改过的数据，但是此时事务A还没提交，所以事务A随时会回滚，导致事务B再次查询就读不到刚才事务A修改的数据了。</p>
<blockquote>
<p>脏读和脏写都是因为一个事务去更新或者查询了另外一个还没提交的事务更新过的数据。因为另外一个事务还没提交，所以它随时可能会回滚，那么必然导致你更新的数据就没了，或者你之前查询到的数据就没了，这就是脏写和脏读两种场景。</p>
</blockquote>
<p><strong>不可重复读</strong>：同一个事务中，多次读取到的数据不一致，即中间有其他事务提交了修改（一般指<strong>数据修改</strong>）。事务A读取一个字段后，事务B更新了该字段并提交了，导致A再次读取的时候和之前不一致了，即无法重复读取到相同的某个值。</p>
<p><strong>幻读</strong>：一个事务多次读取数据时，中间有其他事务提交了更新操作（一般指<strong>插入或删除</strong>）的数据。比如同样的查询语句，第一次查询出n条，然后别的事务进行了插入或删除，第二次查询出m条，同样的查询语句得到的结果不一样，就像出现了幻觉。</p>
<p>可以通过设置<strong>隔离级别</strong>避免事务的并发问题，主要有以下四种隔离级别：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th><strong>脏读</strong></th>
<th><strong>不可重复读</strong></th>
<th><strong>幻读</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>read uncommitted</td>
<td>未解决</td>
<td>未解决</td>
<td>未解决</td>
<td>允许事务读取未被其他事务提交的更改</td>
</tr>
<tr>
<td>read committed</td>
<td>解决</td>
<td>未解决</td>
<td>未解决</td>
<td>只允许事务读取已经被其它事务提交的更改。<strong>Oracle的默认隔离级别</strong></td>
</tr>
<tr>
<td>repeatable read</td>
<td>解决</td>
<td>解决</td>
<td>未解决</td>
<td>确保事务可以多次从一个字段中读取相同的值，事务持续期间，禁止其他事务对这个字段更新。<strong>MySQL的默认隔离级别</strong></td>
</tr>
<tr>
<td>serializable</td>
<td>解决</td>
<td>解决</td>
<td>解决</td>
<td>确保事务可以多次从一个表中读取相同的行，事务持续期间，禁止其他事务对该表执行插入、更新和删除操作。可以避免所有并发问题，性能最差。</td>
</tr>
</tbody>
</table>
<p>上述四种隔离级别，MySQL全部支持，Oracle只支持<code>read committed</code>和<code>serializable</code>。</p>
<h2 id="设置隔离级别">设置隔离级别</h2>
<p>事务的隔离级别包括<strong>全局级别</strong>和<strong>会话级别</strong>：</p>
<ul>
<li>全局级别：对后续新的所有会话连接有效，对已经存在的会话连接无效。</li>
<li>会话级别：对数据库会话连接的<strong>后续新发起或当前未提交</strong>的事务有效。如果没有session关键字的话，只对当前数据库会话连接的<strong>后续新发起</strong>的事务有效，当前未提交的事务，还是继续使用之前的事务隔离级别。</li>
</ul>
<p>设置隔离级别的语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置全局隔离级别set global transaction isolation level 隔离级别名;# 设置当前会话连接的隔离级别set [session] transaction isolation level 隔离级别名;</span><br></pre></td></tr></table></figure>
<p>查看隔离级别：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看当前会话隔离级别</span><br><span class="line">select @@tx_isolation;</span><br><span class="line">#查看全局隔离级别</span><br><span class="line">select @@global.tx_isolation;</span><br></pre></td></tr></table></figure>
<h2 id="MyISAM引擎和InnoDB引擎对比">MyISAM引擎和InnoDB引擎对比</h2>
<p>InnoDB引擎是MySQL5.5开始引入的。InnoDB和MyISAM引擎的对比：</p>
<ul>
<li><strong>是否支持行级锁</strong>。MyISAM只支持表锁，而InnoDB支持表锁和行锁，且默认为行锁。</li>
<li><strong>是否支持事务</strong>。MyISAM不支持事务，InnoDB支持事务，具有提交和回滚事务的能力。</li>
<li><strong>是否支持外键</strong>。MyISAM不支持外键，InnoDB支持外键。</li>
<li><strong>是否支持数据库异常崩溃后的安全恢复</strong>。MyISAM不支持，InnoDB支持。InnoDB引擎能够保证，在数据库异常崩溃后，数据库重新启动的时候会保证数据库恢复到崩溃前的状态，恢复的过程依赖于<code>redo log</code></li>
</ul>
<p>扩展：InnoDB是如何保证ACID特性的？</p>
<p>1、InnoDB引擎使用<strong>redo log(重做日志)<strong>保证事务的</strong>持久性</strong></p>
<p>2、InnoDB引擎使用<strong>undo log(回滚日志)<strong>保证事务的</strong>原子性</strong></p>
<p>3、InnoDB引擎使用<strong>锁机制</strong>、<strong>MVCC</strong>等手段保证事务的<strong>隔离性</strong></p>
<p>4、保证了上述三个特性后，<strong>一致性</strong>才得以保障。</p>
<h1>视图</h1>
<h2 id="概述">概述</h2>
<p>视图是MySQL 5.1的新特性。视图是一张<strong>虚拟的表</strong>，它的数据来自于表，通过执行时动态生成。视图的用法和表相同。视图只保存了SQL逻辑，没有保存查询结果，因此其几乎不占用物理空间，视图一般仅用于查询，仅仅少数情况下才能修改数据。</p>
<p>视图的优势：</p>
<ul>
<li>提高SQL语句的重用性，简化了复杂的SQL操作，提高了效率</li>
<li>和表实现了分离，提高了安全性</li>
</ul>
<h2 id="创建视图">创建视图</h2>
<p>创建视图：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create [or replace] view 视图名 as 查询语句;# 使用or replace还可以用于视图的修改</span><br></pre></td></tr></table></figure>
<p>使用案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用视图，查询各部门的平均工资级别# 1.创建视图查看每个部门的平均工资CREATE VIEW myview ASSELECT AVG(salary) ag,department_idFROM employeesGROUP BY department_id;# 2.使用创建的视图查询SELECT myview.`ag`,g.grade_levelFROM myviewJOIN job_grades gON myview.`ag` BETWEEN g.`lowest_sal` AND g.`highest_sal`;</span><br></pre></td></tr></table></figure>
<h2 id="删除视图">删除视图</h2>
<p>删除视图：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop view 视图名,视图名,...;  # 可以一次删除多个视图#案例：删除myv1，myv2，myv3三个视图DROP VIEW myv1,myv2,myv3;</span><br></pre></td></tr></table></figure>
<h2 id="查看视图">查看视图</h2>
<p>查看视图有两种方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#方式一：</span><br><span class="line">DESC 视图名;</span><br><span class="line"></span><br><span class="line">#方式二：</span><br><span class="line">SHOW CREATE VIEW 视图名;</span><br></pre></td></tr></table></figure>
<h2 id="更新视图">更新视图</h2>
<p>和修改表相似，更新视图包括修改视图本身，和修改视图中的内容两部分。</p>
<p><strong>修改视图本身</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#方式一：可用于修改和创建视图</span><br><span class="line">create or replace view  视图名</span><br><span class="line">as 查询语句;</span><br><span class="line"></span><br><span class="line"># 方式二：</span><br><span class="line">alter view 视图名</span><br><span class="line">as 查询语句;</span><br></pre></td></tr></table></figure>
<p><strong>修改视图的内容</strong></p>
<p>一般的视图只用来查询，对视图进行插入、删除、修改数据，如果能操作成功，则会对源表中的数据也会进行修改。但是绝大多数情况下无法对视图进行修改，而且也不建议对视图进行修改。</p>
<p>以下情况的视图无法更新：</p>
<ul>
<li>SQL语句包含<code>分组函数</code>、<code>distinct</code>、<code>group by</code>、<code>having</code>、<code>union</code>或者<code>union all</code>的视图</li>
<li>常量视图</li>
<li><code>select</code>中包含子查询的视图</li>
<li>包含<code>join</code>的视图</li>
<li><code>from</code>一个不能更新的视图</li>
<li><code>where</code>子句的子查询引用了<code>from</code>子句中的表</li>
</ul>
<h1>变量</h1>
<p>变量包括：</p>
<ul>
<li>系统变量
<ul>
<li>全局变量</li>
<li>会话变量</li>
</ul>
</li>
<li>自定义变量
<ul>
<li>用户变量</li>
<li>局部变量</li>
</ul>
</li>
</ul>
<h2 id="系统变量">系统变量</h2>
<p><strong>系统变量</strong>：变量由系统定义，不是用户定义，属于服务器层面。必须拥有super权限才能修改系统变量。</p>
<p>系统变量分为<strong>全局变量</strong>和<strong>会话变量</strong>。全局变量需要添加global关键字，会话变量需要添加session关键字，如果不写，默认为会话级别。</p>
<p><strong>全局变量</strong></p>
<p>作用域：服务器每次启动将为所有的全局变量赋初始值，针对于所有会话（连接）有效，但不能跨重启。</p>
<p>查看全局变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看所有全局变量</span><br><span class="line">SHOW GLOBAL VARIABLES;</span><br><span class="line"></span><br><span class="line"># 查看满足条件的部分系统变量</span><br><span class="line">SHOW GLOBAL VARIABLES LIKE &#x27;xxx&#x27;;</span><br><span class="line"></span><br><span class="line"># 查看指定的系统变量的值，</span><br><span class="line">SELECT @@global.变量名</span><br></pre></td></tr></table></figure>
<p>设置全局变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 以autocommit为例</span><br><span class="line"># 方式一：</span><br><span class="line">SET @@global.变量名=值;</span><br><span class="line"># 方式二：</span><br><span class="line">SET GLOBAL 变量名=值;</span><br></pre></td></tr></table></figure>
<p><strong>会话变量</strong></p>
<p>作用域：针对于当前会话（连接）有效</p>
<p>查看会话变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看所有会话变量</span><br><span class="line">SHOW [SESSION] VARIABLES;</span><br><span class="line"></span><br><span class="line"># 查看满足条件的部分会话变量</span><br><span class="line">SHOW [SESSION] VARIABLES LIKE &#x27;xxx&#x27;;</span><br><span class="line"></span><br><span class="line"># 查看指定的会话变量的值</span><br><span class="line">#SELECT @@[session.]变量名;</span><br><span class="line"># 例：</span><br><span class="line">SELECT @@autocommit;</span><br><span class="line"># 或写成</span><br><span class="line">SELECT @@session.autocommit;</span><br></pre></td></tr></table></figure>
<p>设置会话变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET @@session.变量名=值;SET [SESSION] 变量名=值;</span><br></pre></td></tr></table></figure>
<h2 id="自定义变量">自定义变量</h2>
<p><strong>自定义变量</strong>是由用户自定义，而不是系统提供的。其分为<strong>用户变量</strong>和<strong>局部变量</strong>。</p>
<p>自定义变量的使用一般都有<strong>声明、赋值、使用</strong>（查看、比较、运算等）三个步骤。</p>
<p><strong>用户变量</strong></p>
<p>作用域：和会话变量的作用域相同，对于当前会话（连接）有效。在<code>begin end</code>里面和外面都可以使用。</p>
<p>声明用户变量，要求声明时必须初始化值。有两种赋值操作符：<code>=</code>和<code>:=</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#方式一</span><br><span class="line">SET @变量名=值;</span><br><span class="line"></span><br><span class="line">#方式二</span><br><span class="line">SET @变量名:=值;</span><br><span class="line"></span><br><span class="line">#方式三</span><br><span class="line">SELECT @变量名:=值;</span><br></pre></td></tr></table></figure>
<p>为用户变量赋值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 方式一，和初始化时相同：</span><br><span class="line">SET @变量名=值;</span><br><span class="line">SET @变量名:=值;</span><br><span class="line">SELECT @变量名:=值;</span><br><span class="line"></span><br><span class="line"># 方式二：</span><br><span class="line">SELECT 字段 INTO @变量名 FROM 表;</span><br></pre></td></tr></table></figure>
<p>查看用户变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT @变量名;</span><br></pre></td></tr></table></figure>
<p><strong>局部变量</strong></p>
<p>作用域：仅在定义它的<code>begin end</code>块中有效。</p>
<p>声明局部变量必须在<code>begin end</code>块中的最前面部分。</p>
<p>局部变量一般不用加<code>@</code>符号，但是声明时需要指定类型，用户变量不需要指定类型。</p>
<p>声明局部变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DECLARE 变量名 类型 [DEFAULT 值];</span><br></pre></td></tr></table></figure>
<p>为局部变量赋值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#方式一，同样是三种：</span><br><span class="line">SET 局部变量名=值;</span><br><span class="line">SET 局部变量名:=值;</span><br><span class="line">SELECT @局部变量名:=值;</span><br><span class="line"></span><br><span class="line">#方式二：</span><br><span class="line">SELECT 字段 INTO 局部变量名 FROM 表;</span><br></pre></td></tr></table></figure>
<p>查看局部变量的值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 局部变量名;</span><br></pre></td></tr></table></figure>
<h1>存储过程和函数</h1>
<p>存储过程和函数都是事先经过编译 并存储在数据库中的一段SQL语句的集合。</p>
<p>优势：</p>
<ul>
<li>提高了sql语句的重用性，减少了开发人员的压力</li>
<li>提高了数据处理的效率</li>
<li>减少数据在数据库和应用服务器之间的传输次数</li>
</ul>
<h2 id="存储过程">存储过程</h2>
<p><strong>创建存储过程</strong></p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create procedure 存储过程名(参数模式 参数名 参数类型,...)begin	存储过程体(一条或多条合法的SQL语句);end 结束符</span><br></pre></td></tr></table></figure>
<p>参数可以有0个（比如只有插入语句）或多个。参数模式包括三种：</p>
<ul>
<li><code>IN</code>：表示该参数可以作为输入，即该参数需要调用方传入值</li>
<li><code>OUT</code>：表示该参数可以作为输出，即该参数可以作为返回值</li>
<li><code>INOUT</code>：表示该参数既可以作为输入又可以作为输出，即该参数既需要传入值，又可以返回值</li>
</ul>
<p>存储过程体如果只有一个SQL语句，可以省略<code>begin</code>和<code>end</code>，如果有多个SQL语句，<strong>每条SQL语句必须需要使用<code>;</code>结尾</strong>。</p>
<p>MySQL默认将<code>;</code>作为结束符，所以如果存储过程中有多个语句，但又希望将多个语句都执行，因此创建存储过程之前需要将修改默认的结束符。使用 <code>delimiter</code>重新设置结束符，保证过程体中的<code>;</code>被直接传递到服务器，而不会被客户端解释。例如，将<code>//</code>设置结束符的语句为：<code>delimiter //</code></p>
<p>SQLyog 10.0，定义存储过程前必须要设置结束符，生成的存储过程会自动将结束符设置为<code>$$</code>，如果没有手动将结束符改为<code>;</code>，系统会自动添加<code>delimiter ;</code>语句，因此每次创建存储过程都要重新设置结束符。</p>
<p>手写存储过程，建议在开头设置结束符，在末尾将结束符重新设置为<code>;</code></p>
<p><strong>调用存储过程</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">call 存储结构名(实参);</span><br><span class="line"># 如果是in模式的参数，可以直接传入值</span><br><span class="line"># 如果是out或inout模式的参数，必须预先定义变量，然后作为参数传入。</span><br></pre></td></tr></table></figure>
<p><strong>删除存储过程</strong></p>
<p>存储过程不能修改，一般做法是将原来的删除，然后新建。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 每次只能删除一个，不能删除多个</span><br><span class="line">DROP PROCEDURE [IF EXISTS] 存储过程名;</span><br></pre></td></tr></table></figure>
<p><strong>查看存储过程</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW CREATE PROCEDURE 存储过程名;</span><br></pre></td></tr></table></figure>
<p>例：创建存储过程，输入员工id，输出其管理者的id和名字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 声明存储结构</span><br><span class="line">*/</span><br><span class="line">DELIMITER @@  # 设置结束符为@@</span><br><span class="line"># 确保存储过程能正确创建，如果已经存在，删除原有的</span><br><span class="line">DROP PROCEDURE IF EXISTS `myp`@@</span><br><span class="line">CREATE PROCEDURE myp(IN id INT,</span><br><span class="line">                     OUT managerId INT,</span><br><span class="line">                     OUT managerName VARCHAR(20))</span><br><span class="line">BEGIN</span><br><span class="line">	# 将查询的结果值赋给输出变量，这里参数为局部变量</span><br><span class="line">	SELECT m.`employee_id`,m.`last_name` INTO managerId,managerName</span><br><span class="line">	FROM employees m </span><br><span class="line">	INNER JOIN employees e</span><br><span class="line">	ON m.`employee_id`=e.`manager_id`</span><br><span class="line">	WHERE e.`employee_id`=id;</span><br><span class="line">END @@  # end后面要加设置的结束符</span><br><span class="line">DELIMITER ;  # 将结束符改回分号</span><br><span class="line"></span><br><span class="line">/*调用存储结构</span><br><span class="line">in模式参数直接传入值，</span><br><span class="line">out模式的参数要先声明，或者传入的时候指定名字</span><br><span class="line">*/</span><br><span class="line">CALL myp (110,@mid,@mname);  # 调用存储结构，传入参数</span><br><span class="line">SELECT @mid,@mname;  # 查看结果值</span><br></pre></td></tr></table></figure>
<h2 id="函数">函数</h2>
<p>函数和存储过程相似，唯一的区别是，<strong>存储过程可以有0个返回值</strong>，也可以有多个返回，适合做批量插入、批量更新；而<strong>函数有且仅有1个返回值</strong>，适合做处理数据后返回一个结果的情况。</p>
<p><strong>创建函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE FUNCTION 函数名(参数名 参数类型,...) RETURNS 返回类型BEGIN	函数体;	RETURN xx;  #必须有返回值END 结束符</span><br></pre></td></tr></table></figure>
<p>和存储过程相同，函数的参数也可是是0个或多个；结束符和存储过程的用法也相同；如果函数体只有一句，同样可以省略<code>begin end</code>语句。</p>
<p><strong>调用函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 函数名(参数列表);  # 存储过程用的是CALL</span><br></pre></td></tr></table></figure>
<p><strong>删除函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 同样每次只能删除一个DROP FUNCTION [IF EXISTS] 函数名; </span><br></pre></td></tr></table></figure>
<p><strong>查看函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW CREATE FUNCTION 函数名;</span><br></pre></td></tr></table></figure>
<p>函数使用案例：根据部门名，返回该部门的平均工资</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*创建函数*/DELIMITER @@   # 先将分隔符设置为@@DROP FUNCTION IF EXISTS `myf`@@CREATE FUNCTION myf(deptName VARCHAR(20)) RETURNS DOUBLEBEGIN	#声明一个局部变量，用于接收查询结果，并返回	DECLARE sal DOUBLE ;	SELECT AVG(salary) INTO sal	FROM employees e	JOIN departments d ON e.department_id = d.department_id	WHERE d.department_name=deptName;	RETURN sal;  # 返回结果值END @@DELIMITER ;  # 将分隔符重新设置为分号/*调用函数*/SELECT myf(&#x27;IT&#x27;);</span><br></pre></td></tr></table></figure>
<h1>流程控制结构</h1>
<p>流程控制结构包括以下三种：</p>
<ul>
<li>顺序结构：程序从上到下依次执行</li>
<li>分支结构：程序从两条或多条路径中选择一条去执行，比如<code>if</code>、<code>case</code>结构</li>
<li>循环结构：程序在满足一定条件的基础上，重复执行一段代码，比如<code>while</code>、<code>loop</code>、<code>repeat</code></li>
</ul>
<h2 id="分支结构">分支结构</h2>
<p>分支结构包括<code>if结构</code>和<code>case结构</code>，只能用于<code>begin end</code>中，要和<code>if函数</code>、<code>case函数</code>区分开，<a href="https://kangshitao.github.io/2021/04/26/mysql-basis/#refer2">流程控制函数</a>既可以用在<code>begin end</code>里面，也可以用在外面。<code>if函数</code>适用于简单双分支，而<code>if结构</code>适用于区间判断的多分支，<code>case</code>适用于等值判断。</p>
<p><strong>if结构</strong></p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if 条件1 then 语句1;</span><br><span class="line">elseif 条件1 then 语句2;</span><br><span class="line">...</span><br><span class="line">else 语句n;</span><br><span class="line">end if;</span><br></pre></td></tr></table></figure>
<p><strong>case结构</strong></p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 方式一：类似于switch</span><br><span class="line">case 表达式</span><br><span class="line">when 值1 then 语句1;</span><br><span class="line">when 值2 then 语句2;</span><br><span class="line">...</span><br><span class="line">else 语句n;</span><br><span class="line">end case;</span><br><span class="line"></span><br><span class="line"># 方式二：类似于多重if</span><br><span class="line">case </span><br><span class="line">when 条件1 then 语句1;</span><br><span class="line">when 条件2 then 语句2;</span><br><span class="line">...</span><br><span class="line">else 语句n;</span><br><span class="line">end case;</span><br></pre></td></tr></table></figure>
<p><strong>分支结构使用案例</strong></p>
<p>创建函数，实现传入成绩返回等级的功能。如果成绩&gt;90，返回A，如果成绩&gt;80，返回B，如果成绩&gt;60，返回C，否则返回D。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 方式一：使用if结构</span><br><span class="line">DELIMITER @@   # 先将分隔符设置为@@</span><br><span class="line">DROP FUNCTION IF EXISTS `myf_if`@@</span><br><span class="line">CREATE FUNCTION myf_if(score FLOAT) RETURNS CHAR</span><br><span class="line">BEGIN</span><br><span class="line">	# 设置局部变量保存结果</span><br><span class="line">	DECLARE ch CHAR DEFAULT &#x27;A&#x27;;</span><br><span class="line">	IF score&gt;90 THEN SET ch=&#x27;A&#x27;;</span><br><span class="line">	ELSEIF score&gt;80 THEN SET ch=&#x27;B&#x27;;</span><br><span class="line">	ELSEIF score&gt;60 THEN SET ch=&#x27;C&#x27;;</span><br><span class="line">	ELSE ch=&#x27;D&#x27;;</span><br><span class="line">	END IF;</span><br><span class="line">	RETURN ch;</span><br><span class="line">END @@</span><br><span class="line">DELIMITER ;</span><br><span class="line">#调用函数</span><br><span class="line">SELECT myf_if(87);</span><br><span class="line"></span><br><span class="line"># 方式二：使用case结构</span><br><span class="line">DELIMITER @@   # 先将分隔符设置为@@</span><br><span class="line">DROP FUNCTION IF EXISTS `myf_case`@@</span><br><span class="line">CREATE FUNCTION myf_case(score FLOAT) RETURNS CHAR</span><br><span class="line">BEGIN </span><br><span class="line">	#设置局部变量保存结果</span><br><span class="line">	DECLARE ch CHAR DEFAULT &#x27;A&#x27;;</span><br><span class="line">	CASE </span><br><span class="line">	WHEN score&gt;90 THEN SET ch=&#x27;A&#x27;;</span><br><span class="line">	WHEN score&gt;80 THEN SET ch=&#x27;B&#x27;;</span><br><span class="line">	WHEN score&gt;60 THEN SET ch=&#x27;C&#x27;;</span><br><span class="line">	ELSE SET ch=&#x27;D&#x27;;</span><br><span class="line">	END CASE;</span><br><span class="line">	RETURN ch;</span><br><span class="line">END @@</span><br><span class="line">DELIMITER ;</span><br><span class="line">#调用函数</span><br><span class="line">SELECT myf_case(56);</span><br></pre></td></tr></table></figure>
<h2 id="循环结构">循环结构</h2>
<p>循环结构包括<code>while</code>，<code>loop</code>，<code>repeat</code>三种。</p>
<p>同样，循环结构只能在<code>begin end</code>中使用。</p>
<p>循环结构中，包括两个循环控制语句：</p>
<ul>
<li><code>iterate</code>：类似于java中的continue，结束本次循环，进入下一次循环。</li>
<li><code>leave</code>：类似于java中的breek，跳出当前循环体。</li>
</ul>
<p><strong>循环控制语句后面必须有循环结构的标签名</strong>，也就是说，如果循环结构中使用了循环控制语句，此循环结构必须添加标签。</p>
<p><strong>while结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[标签:] WHILE 循环条件 DO</span><br><span class="line">	循环体</span><br><span class="line">END WHILE [标签];</span><br></pre></td></tr></table></figure>
<p><strong>loop结构</strong></p>
<p><code>loop</code>结构没有循环条件，想要结束循环必须使用<code>leave</code>语句，<code>loop</code>结构可以用于模拟简单的死循环。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[标签:] loop</span><br><span class="line">	循环体;</span><br><span class="line">end loop [标签];</span><br></pre></td></tr></table></figure>
<p><strong>repeat结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[标签:] repeat</span><br><span class="line">	循环体;</span><br><span class="line">until 结束循环条件</span><br><span class="line">end repeat [标签];</span><br></pre></td></tr></table></figure>
<p>使用循环结构的案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用存储结构和循环结构，实现批量插入，要求只插入偶数次的记录</span><br><span class="line">DELIMITER @@   # 先将分隔符设置为@@</span><br><span class="line">DROP PROCEDURE IF EXISTS test_while@@</span><br><span class="line">CREATE PROCEDURE test_while(IN insertCount INT)</span><br><span class="line">BEGIN</span><br><span class="line">	DECLARE i INT DEFAULT 0;</span><br><span class="line">	a: WHILE i&lt;=insertCount DO</span><br><span class="line">		SET i=i+1;</span><br><span class="line">		IF MOD(i,2)!=0 THEN ITERATE a;</span><br><span class="line">		END IF;</span><br><span class="line">		INSERT INTO admin(username,`password`) </span><br><span class="line">		VALUES(CONCAT(&#x27;xiaohua&#x27;,i),&#x27;0000&#x27;);</span><br><span class="line">	END WHILE a;</span><br><span class="line">END @@</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"># 传入100，只会插入偶数时的记录</span><br><span class="line">CALL test_while1(100);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>查询/删除给定目录下的所有文件</title>
    <url>/2022/01/18/%E6%9F%A5%E8%AF%A2-%E5%88%A0%E9%99%A4%E7%BB%99%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>需求：</p>
<ul>
<li>查看给定目录下所有文件</li>
<li>通过递归的方式删除给定文件及所有的子文件</li>
</ul>
<p>解决：</p>
<ul>
<li>递归</li>
<li>File类，listFile() 方法、isDirectory() 方法、delete() 方法</li>
</ul>
<h1>查看所有文件</h1>
<p>查看给定目录下的所有文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> JSONArray <span class="title">getLocalFiles</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">    JSONArray files = <span class="keyword">new</span> JSONArray();</span><br><span class="line">    <span class="keyword">if</span> (dir.isDirectory()) &#123;</span><br><span class="line">        File[] fs = dir.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (fs != <span class="keyword">null</span> &amp;&amp; fs.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File f : fs) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!f.isDirectory()) &#123;</span><br><span class="line">                    JSONObject file = <span class="keyword">new</span> JSONObject();</span><br><span class="line">                    file.put(<span class="string">&quot;name&quot;</span>, f.getName());</span><br><span class="line">                    file.put(<span class="string">&quot;size&quot;</span>, String.format(<span class="string">&quot;%.2f&quot;</span>, (<span class="keyword">float</span>) f.length() / <span class="number">1024</span>));</span><br><span class="line">                    files.add(file);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> files;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>删除所有文件</h1>
<p>通过递归，删除所有文件及子目录下的所有文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归删除目录下的所有文件及子目录下所有文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dir 将要删除的文件目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean Returns &quot;true&quot; if all deletions were successful.</span></span><br><span class="line"><span class="comment"> * If a deletion fails, the method stops attempting to</span></span><br><span class="line"><span class="comment"> * delete and returns &quot;false&quot;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteDir</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dir.isDirectory()) &#123;</span><br><span class="line">        File[] children = dir.listFiles();</span><br><span class="line">        <span class="comment">//递归删除目录中的子目录下</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> success = deleteDir(children[i]);</span><br><span class="line">            <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 目录此时为空，可以删除</span></span><br><span class="line">    <span class="keyword">return</span> dir.delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>仿牛客网论坛网站项目</title>
    <url>/2021/10/01/%E4%BB%BF%E7%89%9B%E5%AE%A2%E7%BD%91%E8%AE%BA%E5%9D%9B%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>仿照牛客网做一个论坛网站系统。</p>
<p>技术栈：SpringBoot+Mybatis+MySQL+Redis+swagger+kafka</p>
<span id="more"></span>
<h1>主页</h1>
<h2 id="编写主页后台控制代码。">编写主页后台控制代码。</h2>
<p>要求在主页中显示10条数据</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211201202816212.png" alt="image-20211201202816212"></p>
<h2 id="分页功能">分页功能</h2>
<h3 id="封装分页功能到分页类中。">封装分页功能到分页类中。</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kai.community.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装分页相关的信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当前页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> current = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//显示上限；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> limit = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//数据总数（用于计算总的页数）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rows;</span><br><span class="line">    <span class="comment">//查询路径（复用分页的链接）</span></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrent</span><span class="params">(<span class="keyword">int</span> current)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.current = current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> limit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLimit</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (limit&gt;=<span class="number">1</span> &amp;&amp; limit&lt;=<span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.limit = limit;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRows</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRows</span><span class="params">(<span class="keyword">int</span> rows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rows&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.rows = rows;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.path = path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前页的起始行。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOffset</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (current - <span class="number">1</span>) * limit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取总页数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// rows/limit</span></span><br><span class="line">        <span class="keyword">if</span> (rows % limit == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> rows / limit;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> rows / limit + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 獲取起始頁碼</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFrom</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> from = current - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> from &lt; <span class="number">1</span> ? <span class="number">1</span> : from;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取终止页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> to = current + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> total = getTotal();</span><br><span class="line">        <span class="keyword">return</span> to &gt; total ? total : to;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="在控制器中调用分页类。">在控制器中调用分页类。</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(path = &quot;/index&quot;,method = RequestMethod.GET)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getIndexPage</span><span class="params">(Model model, Page page)</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;************************************&quot;</span>);</span><br><span class="line">       <span class="comment">//设置分页对象。</span></span><br><span class="line">       <span class="comment">//方法调用之前，springMVC会自动实例化model和page，并将page注入到model中，</span></span><br><span class="line">       <span class="comment">// 所以thymeleaf可以直接访问page对象中的数据</span></span><br><span class="line">       page.setRows(discussPostService.selectDiscussPostRows(<span class="number">0</span>));</span><br><span class="line">       page.setPath(<span class="string">&quot;/index&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//查询到的数据中有一个userId，要根据这个userId找到这个用户，然后再返回到前端页面。</span></span><br><span class="line">       List&lt;DiscussPost&gt; list = discussPostService.selectDiscussPosts(<span class="number">0</span>, page.getOffset(), page.getLimit());</span><br><span class="line">       List&lt;Map&lt;String,Object&gt;&gt; discussPosts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">if</span> (list!=<span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">for</span> (DiscussPost post:list) &#123;</span><br><span class="line">               Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">               map.put(<span class="string">&quot;post&quot;</span>,post);</span><br><span class="line">               User user = userService.selectById(post.getUserId());</span><br><span class="line">               map.put(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">               discussPosts.add(map);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       model.addAttribute(<span class="string">&quot;discussPosts&quot;</span>,discussPosts);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="前端页面通过thymeleaf编码风格显示">前端页面通过thymeleaf编码风格显示</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;mt-5&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.rows&gt;0&#125;&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination justify-content-center&quot;</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item&quot;</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;$&#123;page.path&#125;(current=1)&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span> <span class="attr">th:class</span>=<span class="string">&quot;|page-item $&#123;page.current==1?&#x27;disabled&#x27;:&#x27;&#x27;&#125;|&quot;</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;$&#123;page.path&#125;(current=$&#123;page.current - 1&#125;)&#125;&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span> <span class="attr">th:class</span>=<span class="string">&quot;|page-item $&#123;i==page.current?&#x27;active&#x27;:&#x27;&#x27;&#125;|&quot;</span> <span class="attr">th:each</span>=<span class="string">&quot;i:$&#123;#numbers.sequence(page.from,page.to)&#125;&quot;</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;i&#125;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span> <span class="attr">th:class</span>=<span class="string">&quot;|page-item $&#123;page.current==page.total?&#x27;disabled&#x27;:&#x27;&#x27;&#125;|&quot;</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;$&#123;page.path&#125;(current=$&#123;page.current+1&#125;)&#125;&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item&quot;</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;$&#123;page.path&#125;(current=$&#123;page.total&#125;)&#125;&quot;</span>&gt;</span>末页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1>登录注册模块设计</h1>
<h2 id="发送验证邮件">发送验证邮件</h2>
<h3 id="编写邮件工具类。">编写邮件工具类。</h3>
<p>核心组件是==JavaMailSender==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kai.community.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.TemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MailClient.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender mailSender;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String from;            <span class="comment">//发送人</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">(String to,String subject,String context)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line">            MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message);</span><br><span class="line">            helper.setFrom(from);     <span class="comment">//发送人</span></span><br><span class="line">            helper.setTo(to);         <span class="comment">//收件人</span></span><br><span class="line">            helper.setSubject(subject);      <span class="comment">//主题</span></span><br><span class="line">            helper.setText(context,<span class="keyword">true</span>);           <span class="comment">//内容，第二个参数表示允许支持html</span></span><br><span class="line">            mailSender.send(helper.getMimeMessage());    <span class="comment">//发送</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;邮件发送失败&quot;</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="验证">验证</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kai.community.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kai.SpringbootNewCoderApplication;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.TemplateEngine;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.context.Context;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringbootNewCoderApplication.class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailClientTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MailClient mailClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTextMail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        mailClient.sendMail(<span class="string">&quot;329129866@qq.com&quot;</span>,<span class="string">&quot;test&quot;</span>,<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="通过thymeleaf编码风格发送HTML邮件">通过thymeleaf编码风格发送HTML邮件</h3>
<p>注册邮件demo页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>邮件示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>欢迎你，<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过thymeleaf模板引擎（TemplateEngine），将后台的数据传递到邮件demo页面，动态组装之后，通过HTML邮件的方式进行发送。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kai.community.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kai.SpringbootNewCoderApplication;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.TemplateEngine;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.context.Context;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringbootNewCoderApplication.class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailClientTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MailClient mailClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;     <span class="comment">//自动注入模板引擎。这里是因为运行之后他才能自动注入</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//发送邮件功能简单实现</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTextMail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        mailClient.sendMail(<span class="string">&quot;329129866@qq.com&quot;</span>,<span class="string">&quot;test&quot;</span>,<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过thymeleaf发送HTML邮件</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHtmlMail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context();</span><br><span class="line">        context.setVariable(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;sunday&quot;</span>);</span><br><span class="line">        <span class="comment">//模板引擎，将username传递到页面中，然后以HTML网页的形式发送邮件。</span></span><br><span class="line">        String content = templateEngine.process(<span class="string">&quot;/mail/demo&quot;</span>,context);</span><br><span class="line">        System.out.println(content);</span><br><span class="line">        <span class="comment">//发送邮件</span></span><br><span class="line">        mailClient.sendMail(<span class="string">&quot;329129866@qq.com&quot;</span>,<span class="string">&quot;HTML&quot;</span>,content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="开发注册功能">开发注册功能</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211201202922628.png" alt="image-20211201202922628"></p>
<h3 id="访问注册页面">访问注册页面</h3>
<p>点击主页上面的注册按钮，跳转到注册页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 访问注册页面</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping(path = &quot;/register&quot;,method = RequestMethod.GET)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getRegisterPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;/site/register&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="提交注册数据">提交注册数据</h3>
<p>通过表单往后台提交数据，通过post方法提交</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;mt-5&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/register&#125;&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group row&quot;</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 col-form-label text-right&quot;</span>&gt;</span>账号:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">								   <span class="attr">th:class</span>=<span class="string">&quot;|form-control $&#123;usernameMsg!=null?&#x27;is-invalid&#x27;:&#x27;&#x27;&#125;|&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span></span></span><br><span class="line"><span class="tag">								   <span class="attr">th:value</span>=<span class="string">&quot;$&#123;user!=null?user.username:&#x27;&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">								   <span class="attr">placeholder</span>=<span class="string">&quot;请输入您的账号!&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;invalid-feedback&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;usernameMsg&#125;&quot;</span>&gt;</span></span><br><span class="line">								该账号已存在!</span><br><span class="line">							<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group row mt-4&quot;</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 col-form-label text-right&quot;</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">								   <span class="attr">th:class</span>=<span class="string">&quot;|form-control $&#123;passwordMsg!=null?&#x27;is-invalid&#x27;:&#x27;&#x27;&#125;|&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">								   <span class="attr">th:value</span>=<span class="string">&quot;$&#123;user!=null?user.password:&#x27;&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">								   <span class="attr">placeholder</span>=<span class="string">&quot;请输入您的密码!&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;invalid-feedback&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;passwordMsg&#125;&quot;</span>&gt;</span></span><br><span class="line">								密码长度不能小于8位!</span><br><span class="line">							<span class="tag">&lt;/<span class="name">div</span>&gt;</span>							</span><br><span class="line">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group row mt-4&quot;</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;confirm-password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 col-form-label text-right&quot;</span>&gt;</span>确认密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;confirm-password&quot;</span></span></span><br><span class="line"><span class="tag">								   <span class="attr">th:value</span>=<span class="string">&quot;$&#123;user!=null?user.password:&#x27;&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">								   <span class="attr">placeholder</span>=<span class="string">&quot;请再次输入密码!&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;invalid-feedback&quot;</span>&gt;</span></span><br><span class="line">								两次输入的密码不一致!</span><br><span class="line">							<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group row&quot;</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 col-form-label text-right&quot;</span>&gt;</span>邮箱:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span></span></span><br><span class="line"><span class="tag">								   <span class="attr">th:class</span>=<span class="string">&quot;|form-control $&#123;emailMsg!=null?&#x27;is-invalid&#x27;:&#x27;&#x27;&#125;|&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span></span></span><br><span class="line"><span class="tag">								   <span class="attr">th:value</span>=<span class="string">&quot;$&#123;user!=null?user.email:&#x27;&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">								   <span class="attr">placeholder</span>=<span class="string">&quot;请输入您的邮箱!&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;invalid-feedback&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emailMsg&#125;&quot;</span>&gt;</span></span><br><span class="line">								该邮箱已注册!</span><br><span class="line">							<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group row mt-4&quot;</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10 text-center&quot;</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info text-white form-control&quot;</span>&gt;</span>立即注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码解读：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">||中第一个块必须执行，然后后面的根据判断条件执行</span><br><span class="line">th:class=&quot;|form-control $&#123;emailMsg!=null?&#x27;is-invalid&#x27;:&#x27;&#x27;&#125;|&quot;</span><br><span class="line"></span><br><span class="line">usernameMsg是后台往前传递的数据，里面存储了关于username的异常因信息</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;invalid-feedback&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;usernameMsg&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>==验证用户信息==</p>
<p>service层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">register</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//空值处理</span></span><br><span class="line">        <span class="keyword">if</span> (user==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;参数不允许为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(user.getUsername()))&#123;</span><br><span class="line">            map.put(<span class="string">&quot;usernameMsg&quot;</span>,<span class="string">&quot;账号不能为空！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(user.getPassword()))&#123;</span><br><span class="line">            map.put(<span class="string">&quot;passwordMsg&quot;</span>,<span class="string">&quot;密码不能为空！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(user.getEmail()))&#123;</span><br><span class="line">            map.put(<span class="string">&quot;usernameMsg&quot;</span>,<span class="string">&quot;邮箱不能为空！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//验证邮箱</span></span><br><span class="line">        User u = userDao.selectByName(user.getUsername());</span><br><span class="line">        <span class="keyword">if</span> (u != <span class="keyword">null</span>)&#123;</span><br><span class="line">            map.put(<span class="string">&quot;usernameMsg&quot;</span>,<span class="string">&quot;该用户已存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//验证账号</span></span><br><span class="line">        u = userDao.selectByEmail(user.getEmail());</span><br><span class="line">        <span class="keyword">if</span> (u != <span class="keyword">null</span>)&#123;</span><br><span class="line">            map.put(<span class="string">&quot;emailMsg&quot;</span>,<span class="string">&quot;该邮箱已被注册！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 注册新用户</span></span><br><span class="line"><span class="comment">         * Salt:随机字符串</span></span><br><span class="line"><span class="comment">         * password:密码</span></span><br><span class="line"><span class="comment">         * activationCode:激活码</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        user.setSalt(CommunityUtil.generateUUID().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">        user.setPassword(CommunityUtil.md5(user.getPassword()+user.getSalt()));</span><br><span class="line">        user.setType(<span class="number">0</span>);</span><br><span class="line">        user.setStatus(<span class="number">0</span>);</span><br><span class="line">        user.setActivationCode(CommunityUtil.generateUUID());</span><br><span class="line">        user.setHeaderUrl(String.format(<span class="string">&quot;http://images.nowcoder.com/head/%dt.png&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>)));</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        userDao.insertUser(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//激活邮件</span></span><br><span class="line">        Context context = <span class="keyword">new</span> Context();</span><br><span class="line">        context.setVariable(<span class="string">&quot;email&quot;</span>,user.getEmail());</span><br><span class="line">        <span class="comment">//拼接激活地址：http://localhost:8080/community/activation/101/code</span></span><br><span class="line">        String url = domain + contextPath + <span class="string">&quot;/activation/&quot;</span> +</span><br><span class="line">                user.getId() + <span class="string">&quot;/&quot;</span> + user.getActivationCode();</span><br><span class="line">        context.setVariable(<span class="string">&quot;url&quot;</span>,url);</span><br><span class="line">        String content = templateEngine.process(<span class="string">&quot;/mail/activation&quot;</span>,context);</span><br><span class="line">        mailClient.sendMail(user.getEmail(),<span class="string">&quot;激活邮件&quot;</span>,content);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>如果填写的用户信息正确，就给用户发送一封激活邮件（thymeleaf发送HTML邮件）。</p>
<h5 id="加密操作：">加密操作：</h5>
<p>使用MD5进行加密</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommunityUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//生成随机字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateUUID</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//s随机生成的字符串是由字母和‘-’生成的，我们不想要‘-’，使用空字符串进行替换</span></span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//MD5加密</span></span><br><span class="line">    <span class="comment">//只能加密，但是不能解密</span></span><br><span class="line">    <span class="comment">//MD5进行加密是，加密之后的结果是一样的，我们通过使用在 原字符串后+随机字符串 的方式进行加密。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(key))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//加密成16位的字符串。输入要求是byte。</span></span><br><span class="line">        <span class="keyword">return</span> DigestUtils.md5DigestAsHex(key.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>==发送邮件成功，跳转到已发送邮件页面==</p>
<p>控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(path = &quot;/register&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(Model model, User user)</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = userService.register(user);</span><br><span class="line">        <span class="keyword">if</span> (map == <span class="keyword">null</span> || map.isEmpty())&#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;注册成功，我们已经向您发送了一封激活邮件，请尽快激活！&quot;</span>);</span><br><span class="line">            model.addAttribute(<span class="string">&quot;target&quot;</span>,<span class="string">&quot;/index&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">&quot;/site/operate-result&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;usernameMsg&quot;</span>,map.get(<span class="string">&quot;usernameMsg&quot;</span>));</span><br><span class="line">            model.addAttribute(<span class="string">&quot;emailMsg&quot;</span>,map.get(<span class="string">&quot;emailMsg&quot;</span>));</span><br><span class="line">            model.addAttribute(<span class="string">&quot;passwordMsg&quot;</span>,map.get(<span class="string">&quot;passwordMsg&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/site/register&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="用户激活">用户激活</h3>
<p>点击邮箱里面的链接，自动跳转到注册页面，如果重复点击，会出现已经注册过了的提示。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210901192728014.png" alt="image-20210901192728014"></p>
<p>service层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过邮箱里面的激活链接点击激活</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">activation</span><span class="params">(<span class="keyword">int</span> userId,String code)</span></span>&#123;</span><br><span class="line">        User user = userDao.selectById(userId);</span><br><span class="line">        <span class="keyword">if</span> (user.getStatus() == <span class="number">1</span>)&#123;     <span class="comment">//status初始化为0，等于1说明已经激活</span></span><br><span class="line">            <span class="keyword">return</span> ACTIVATION_REPEAT;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (user.getActivationCode().equals(code))&#123;     <span class="comment">//激活</span></span><br><span class="line">            userDao.updateStatus(userId,<span class="number">1</span>);      <span class="comment">//更新用户的状态。</span></span><br><span class="line">            <span class="keyword">return</span> ACTIVATION_SUCCESS;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ACTIVATION_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>controller层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问激活地址：http://localhost:8080/community/activation/101/code</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;activation/&#123;userId&#125;/&#123;code&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">activation</span><span class="params">(Model model, <span class="meta">@PathVariable(&quot;userId&quot;)</span> <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="meta">@PathVariable(&quot;code&quot;)</span> String code)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = userService.activation(userId,code);</span><br><span class="line">        <span class="keyword">if</span> (result == ACTIVATION_SUCCESS)&#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;激活成功，您的账号已经可以正常使用了！&quot;</span>);</span><br><span class="line">            model.addAttribute(<span class="string">&quot;target&quot;</span>,<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result == ACTIVATION_REPEAT)&#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;无效操作，该账号已经激活过了!&quot;</span>);</span><br><span class="line">            model.addAttribute(<span class="string">&quot;target&quot;</span>,<span class="string">&quot;/index&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;激活失败，提供的激活码不正确！&quot;</span>);</span><br><span class="line">            model.addAttribute(<span class="string">&quot;target&quot;</span>,<span class="string">&quot;/index&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&quot;/site/operate-result&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="会话管理">会话管理</h2>
<h3 id="HTTP的基本特性">HTTP的基本特性</h3>
<ul>
<li>HTTP是可扩展的</li>
<li>HTTP是无状态的，有会话的：在同一个连接中，两次相同的请求之间是没有关系的。存在一个问题，用户没有办法在同一个网站上进行连续的交互。==HTTP是无状态的，使用cookie可以建立有状态的连接。==</li>
</ul>
<h3 id="Cookie">Cookie</h3>
<p>可以弥补HTTP请求无状态的缺点。</p>
<ul>
<li>是服务器发送到浏览器中，并保存在浏览器中的一小部分数据。</li>
<li>浏览器下次访问该服务器时，会自动的携带块该数据，将其发送给服务器。</li>
</ul>
<p>缺点：</p>
<p>存在客户端中，不太安全，不能保存敏感的信息（密码等）</p>
<p>每次发送相同的数据，耗费流量。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210902090254545.png" alt="image-20210902090254545"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/alpha&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlphaController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cookie实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;/cookie/set&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">setCookie</span><span class="params">(HttpServletResponse httpServletResponse)</span></span>&#123;    <span class="comment">//将数据传递到前端。  </span></span><br><span class="line">         <span class="comment">//创建cookie</span></span><br><span class="line">         Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;code&quot;</span>, CommunityUtil.generateUUID());</span><br><span class="line">         <span class="comment">//设置cookie的生效范围(此路径下面的会给他添加上cookie数据)</span></span><br><span class="line">         cookie.setPath(<span class="string">&quot;/community/alpha&quot;</span>);</span><br><span class="line">         <span class="comment">//设置cookie的生存时间</span></span><br><span class="line">         cookie.setMaxAge(<span class="number">60</span> * <span class="number">10</span>);</span><br><span class="line">         <span class="comment">//发送cookie</span></span><br><span class="line">         httpServletResponse.addCookie(cookie);</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;set cookie&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在其他页面中使用cookie携带的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code：cookie携带的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;/cookie/get&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCookie</span><span class="params">(<span class="meta">@CookieValue(&quot;code&quot;)</span> String code)</span></span>&#123;</span><br><span class="line">        System.out.println(code);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;get cookie&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="session">session</h3>
<ul>
<li>
<p>session执行的是JavaEE的标准，将用户信息存放到服务端</p>
</li>
<li>
<p>数据存放在服务端更加的安全，但是会增加服务端的压力。</p>
</li>
</ul>
<p>session依赖于cookie实现的。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210902095510262.png" alt="image-20210902095510262"></p>
<p>==session存在的问题（为什么在分布式中很少使用session）==</p>
<p>session数据可能保存在某一个服务器中，但是下一次请求不一定会到这个服务器中进行处理，所以就可能拿不到数据。</p>
<p>解决方法：</p>
<ul>
<li>粘性session：让某个请求访问对应的服务器。但是有负载均衡问题。</li>
<li>同步session：给每个服务器同步session。但是会造成服务器之间耦合，不是独立的</li>
<li>共享session：一个服务器单独处理session。但是如果这个session挂了，其他的就没法用了。</li>
</ul>
<p>主流解决方法：能不用session就不用，非要用的话就可以使用数据库（redis数据库，存放到内存中）进行存储session。很好的解决了数据共享。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210902100811010.png" alt="image-20210902100811010"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 浏览器往后端发送请求，然后后端往前穿带session信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping(path = &quot;/session/set&quot;,method = RequestMethod.GET)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">setSession</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">       session.setAttribute(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>);</span><br><span class="line">       session.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;liwenkai&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;set session&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 接受前端发送回来的session信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping(path = &quot;/session/get&quot;,method = RequestMethod.GET)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getSession</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">       System.out.println(session.getAttribute(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">       System.out.println(session.getAttribute(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;get session&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="生成验证码">生成验证码</h2>
<p>使用Kaptcha工具</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210902101754733.png" alt="image-20210902101754733"></p>
<h3 id="导入jar包">导入jar包</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--Kaptcha,生成随机验证码--&gt;</span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/com.github.penggle/kaptcha --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.penggle&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;kaptcha&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.3</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h3 id="编写kaptcha配置类">编写kaptcha配置类</h3>
<p>kaptcha的核心配置类是：Producer。</p>
<p>通过Properties修改配置参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.Producer;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.util.Config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KaptchaConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Producer <span class="title">kaptchaProducer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.image.width&quot;</span>, <span class="string">&quot;100&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.image.height&quot;</span>, <span class="string">&quot;40&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.size&quot;</span>, <span class="string">&quot;32&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.color&quot;</span>, <span class="string">&quot;0,0,0&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.char.string&quot;</span>, <span class="string">&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.char.length&quot;</span>, <span class="string">&quot;4&quot;</span>);    <span class="comment">//长度</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.noise.impl&quot;</span>, <span class="string">&quot;com.google.code.kaptcha.impl.NoNoise&quot;</span>);   <span class="comment">//噪声</span></span><br><span class="line"></span><br><span class="line">        DefaultKaptcha kaptcha = <span class="keyword">new</span> DefaultKaptcha();</span><br><span class="line">        Config config = <span class="keyword">new</span> Config(properties);</span><br><span class="line">        kaptcha.setConfig(config);</span><br><span class="line">        <span class="keyword">return</span> kaptcha;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="生成验证码，并发送回前端页面">生成验证码，并发送回前端页面</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成验证码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/kaptcha&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getKaptcha</span><span class="params">(HttpServletResponse response, HttpSession session)</span></span>&#123;</span><br><span class="line">    <span class="comment">//生成验证码</span></span><br><span class="line">    String text = kaptchaProducer.createText();</span><br><span class="line">    BufferedImage image = kaptchaProducer.createImage(text);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将验证码存入到session中</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;kaptcha&quot;</span>,text);</span><br><span class="line">    <span class="comment">//将图片输出给浏览器,确定图片的格式是png</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//通过OutputStream输出流的方式向前端发回数据。</span></span><br><span class="line">        OutputStream os = response.getOutputStream();</span><br><span class="line">        ImageIO.write(image,<span class="string">&quot;png&quot;</span>,os);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;响应验证码失败：&quot;</span>+e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="前端接收到验证码">前端接收到验证码</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-4&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/kaptcha&#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;kaptcha&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100px;height:40px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mr-2&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:refresh_kaptcha();&quot;</span> <span class="attr">class</span>=<span class="string">&quot;font-size-12 align-bottom&quot;</span>&gt;</span>刷新验证码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过js方法实现刷新验证码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">refresh_kaptcha</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="comment">//声明一个路径，有的浏览器访问同一个路径请求是，可能会把他当成一个静态资源而不去请求，</span></span><br><span class="line">		<span class="comment">// 所以要在后面加一个随机数，欺骗服务器</span></span><br><span class="line">		<span class="keyword">var</span> path = CONTEXT_PATH + <span class="string">&quot;/kaptcha?p=&quot;</span>+<span class="built_in">Math</span>.random();</span><br><span class="line">		$(<span class="string">&quot;#kaptcha&quot;</span>).attr(<span class="string">&quot;src&quot;</span>,path);</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="登录、退出功能">登录、退出功能</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210902113232373.png" alt="image-20210902113232373"></p>
<h3 id="点击访问登录页面">点击访问登录页面</h3>
<p>点击主页上的登录按钮，跳转到登录页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问登录页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;/login&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLoginPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/site/login&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="登录过程">登录过程</h3>
<h5 id="登录凭证类">登录凭证类</h5>
<p>用户成功登录之后，会注册一个登录凭证</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginTicket</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</span><br><span class="line">    <span class="keyword">private</span> String ticket;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> Date expired;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>dao层中调用底层数据库中的方法（这里是使用注解的方式实现的）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kai.community.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kai.community.entity.LoginTicket;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登陆凭证，通过注解写sql语句，不需要再重新创建一个xml文件。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginTicketDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//给用户填加一个登陆凭证</span></span><br><span class="line">    <span class="meta">@Insert(&#123;</span></span><br><span class="line"><span class="meta">            &quot;insert into community.login_ticket(user_id,ticket,status,expired) &quot;,</span></span><br><span class="line"><span class="meta">            &quot;values(#&#123;userId&#125;,#&#123;ticket&#125;,#&#123;status&#125;,#&#123;expired&#125;)&quot;</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertLoginTicket</span><span class="params">(LoginTicket loginTicket)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据ticket查找用户</span></span><br><span class="line">    <span class="meta">@Select(&#123;</span></span><br><span class="line"><span class="meta">            &quot;select id,user_id,ticket,status,expired &quot;,</span></span><br><span class="line"><span class="meta">            &quot;from login_ticket where ticket = #&#123;ticket&#125;&quot;</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function">LoginTicket <span class="title">selectByTicket</span><span class="params">(String ticket)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改状态</span></span><br><span class="line">    <span class="meta">@Update(&#123;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">            &quot;update login_ticket set status = #&#123;status&#125; where ticket=#&#123;ticket&#125;&quot;</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateStatus</span><span class="params">(String ticket,<span class="keyword">int</span> status)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="验证前端传过来的登录信息">验证前端传过来的登录信息</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登陆功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username：用户名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password：登陆密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> expiredSeconds：登陆凭证多久之后会过期</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">login</span><span class="params">(String username,String password,<span class="keyword">int</span> expiredSeconds)</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//空值判断</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(username))&#123;</span><br><span class="line">        map.put(<span class="string">&quot;usernameMsg&quot;</span>,<span class="string">&quot;用户名不能为空！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(password))&#123;</span><br><span class="line">        map.put(<span class="string">&quot;passwordMsg&quot;</span>,<span class="string">&quot;密码不能为空！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证账号</span></span><br><span class="line">    User user = userDao.selectByName(username);</span><br><span class="line">    <span class="keyword">if</span> (user==<span class="keyword">null</span>)&#123;</span><br><span class="line">        map.put(<span class="string">&quot;usernameMsg&quot;</span>,<span class="string">&quot;用户未注册！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证状态，如果status等于0，说明他没有被激活</span></span><br><span class="line">    <span class="keyword">if</span> (user.getStatus() == <span class="number">0</span>)&#123;</span><br><span class="line">        map.put(<span class="string">&quot;usernameMsg&quot;</span>,<span class="string">&quot;该账号没有被激活！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证密码,先获得通过md5加密之后的秘钥</span></span><br><span class="line">    password = CommunityUtil.md5(password+user.getSalt());</span><br><span class="line">    <span class="keyword">if</span> (!user.getPassword().equals(password))&#123;</span><br><span class="line">        map.put(<span class="string">&quot;passwordMsg&quot;</span>,<span class="string">&quot;密码不正确！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录成功，生成一个登陆凭证</span></span><br><span class="line">    LoginTicket loginTicket = <span class="keyword">new</span> LoginTicket();</span><br><span class="line">    loginTicket.setUserId(user.getId());</span><br><span class="line">    loginTicket.setTicket(CommunityUtil.generateUUID());   <span class="comment">//生成一个随机的字符串</span></span><br><span class="line">    loginTicket.setStatus(<span class="number">0</span>);</span><br><span class="line">    loginTicket.setExpired(<span class="keyword">new</span> Date(System.currentTimeMillis()+expiredSeconds*<span class="number">1000</span>));</span><br><span class="line">    loginTicketDao.insertLoginTicket(loginTicket);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;ticket&quot;</span>,loginTicket.getTicket());</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制层处理传入请求</p>
<p>验证码是在这里验证的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code：验证码。跟session中的kaptcha进行比较</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rememberMe：记住我</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/login&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username,String password,String code,<span class="keyword">boolean</span> rememberMe,</span></span></span><br><span class="line"><span class="params"><span class="function">                    Model model,HttpSession session,HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    String kaptcha = (String) session.getAttribute(<span class="string">&quot;kaptcha&quot;</span>);</span><br><span class="line">    <span class="comment">//判断验证码是否正确，忽略大小写equalsIgnoreCase。</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(kaptcha) || StringUtils.isBlank(code) || !kaptcha.equalsIgnoreCase(code))&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;codeMsg&quot;</span>,<span class="string">&quot;验证码不正确！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&quot;/site/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查密码，时间</span></span><br><span class="line">    <span class="keyword">int</span> expiredSeconds = rememberMe ? REMEMBER_EXPIRED_SECONDS : DEFAULT_EXPIRED_SECONDS;</span><br><span class="line">    Map&lt;String,Object&gt; map = userService.login(username,password,expiredSeconds);</span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(<span class="string">&quot;ticket&quot;</span>))&#123;</span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;ticket&quot;</span>,map.get(<span class="string">&quot;ticket&quot;</span>).toString());</span><br><span class="line">        cookie.setPath(contextPath);</span><br><span class="line">        cookie.setMaxAge(expiredSeconds);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//处理错误</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;usernameMsg&quot;</span>,map.get(<span class="string">&quot;usernameMsg&quot;</span>));</span><br><span class="line">        model.addAttribute(<span class="string">&quot;passwordMsg&quot;</span>,map.get(<span class="string">&quot;passwordMsg&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/site/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="退出登录">退出登录</h3>
<p>通过登录凭证修改状态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 退出登录，根据登录凭证ticket，修改status为无效状态。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ticket</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">(String ticket)</span></span>&#123;</span><br><span class="line">    loginTicketDao.updateStatus(ticket,<span class="number">1</span>);   <span class="comment">//1表示无效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>退出登录要跳转到登录页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 退出登录。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ticket：用户凭证。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/logout&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(<span class="meta">@CookieValue(&quot;ticket&quot;)</span> String ticket)</span></span>&#123;</span><br><span class="line">    userService.logout(ticket);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/login&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="显示登录信息">显示登录信息</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210902165023001.png" alt="image-20210902165023001"></p>
<h3 id="拦截器的实现原理">拦截器的实现原理</h3>
<p>这里的Template就是model。</p>
<p>浏览器cookie里面存放着用户登录之后的ticket，浏览器发送ticket到服务端，服务端接受到ticket之后进行处理，再根据这个ticket到login_ticket表中查找数据；通过查找到的数据可以再去user表中得到user相关的信息。</p>
<p>服务器会把这个消息请求进行拦截，然后在template中添加用户信息。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210902171946150.png" alt="image-20210902171946150"></p>
<h5 id="cookie工具类">cookie工具类</h5>
<p>通过request从cookie中获取数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kai.community.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从cookie中找到你想要的数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getValue</span><span class="params">(HttpServletRequest request, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request == <span class="keyword">null</span> || name == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;参数为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span> (cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie:cookies)&#123;</span><br><span class="line">                <span class="keyword">if</span> (cookie.getName().equals(name))&#123;</span><br><span class="line">                    <span class="keyword">return</span> cookie.getValue();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="threadlocal容器类">threadlocal容器类</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kai.community.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kai.community.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 容器的作用，持有用户信息，实现线程隔离，用在多线程的环境下，用于代替session对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HostHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;User&gt; users = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//threadlocal实现线程隔离</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        users.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清理里面的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        users.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="LoginTicketInterceptor登录拦截器">LoginTicketInterceptor登录拦截器</h3>
<p>拦截controller，然后添加一部分的配置信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginTicketInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HostHolder hostHolder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从cookie中获取凭证</span></span><br><span class="line">        String ticket = CookieUtil.getValue(request,<span class="string">&quot;ticket&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (ticket != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//查询凭证</span></span><br><span class="line">            LoginTicket loginTicket = userService.findLoginTicket(ticket);</span><br><span class="line">            <span class="comment">//检查凭证是否有效</span></span><br><span class="line">            <span class="keyword">if</span> (loginTicket!=<span class="keyword">null</span>&amp;&amp;loginTicket.getStatus()==<span class="number">0</span>&amp;&amp;loginTicket.getExpired().after(<span class="keyword">new</span> Date()))&#123;</span><br><span class="line">                <span class="comment">//根据凭证查询用户</span></span><br><span class="line">                User user = userService.selectById(loginTicket.getUserId());</span><br><span class="line">                <span class="comment">//在本次请求中持有用户.threadLocal 线程隔离</span></span><br><span class="line">                hostHolder.setUser(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在模板引擎中用user信息。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = hostHolder.getUser();</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span> &amp;&amp; modelAndView !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;loginUser&quot;</span>,user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在模板运行完之后，要清理对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        hostHolder.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置拦截器">配置拦截器</h3>
<p>配置拦截器对那些请求生效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AlphaInterceptor alphaInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginTicketInterceptor loginTicketInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(alphaInterceptor)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/**/*.css&quot;</span>,<span class="string">&quot;/**/*.js&quot;</span>,<span class="string">&quot;/**/*.png&quot;</span>,<span class="string">&quot;/**/*.jpg&quot;</span>,<span class="string">&quot;/**/*.jpeg&quot;</span>)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/register&quot;</span>,<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">		<span class="comment">//静态资源可以放过</span></span><br><span class="line">        registry.addInterceptor(loginTicketInterceptor)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/**/*.css&quot;</span>,<span class="string">&quot;/**/*.js&quot;</span>,<span class="string">&quot;/**/*.png&quot;</span>,<span class="string">&quot;/**/*.jpg&quot;</span>,<span class="string">&quot;/**/*.jpeg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="效果展示">效果展示</h3>
<p>拦截器生效之后</p>
<p>未登录之前，会显示注册、登录。</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210902193747728.png" alt="image-20210902193747728"></p>
<p>登录之后，显示消息和用户信息</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210902193850314.png" alt="image-20210902193850314"></p>
<h2 id="账号设置">账号设置</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210902200149922.png" alt="image-20210902200149922"></p>
<h3 id="上传头像功能">上传头像功能</h3>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210902210624464.png" alt="image-20210902210624464"></p>
<h5 id="访问账号设置页面">访问账号设置页面</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跳转到设置页面。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/setting&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSettingPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/site/setting&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="上传头像">上传头像</h5>
<p>保存到本地——然后修改数据库中headerUrl</p>
<p>将图片保存到内存中，这里的upload里表示的就是存放的地址。在配置文件中进行配置，方便以后修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;springboot_newCoder.path.upload&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String upload;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;springboot_newCoder.path.domain&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String domain;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.servlet.context-path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String contextPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HostHolder hostHolder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/upload&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">uploadHeader</span><span class="params">(MultipartFile headerImage, Model model)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (headerImage == <span class="keyword">null</span>)&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;您还没有上传图片&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/site/setting&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String filename = headerImage.getOriginalFilename();</span><br><span class="line">    String suffix = filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(suffix))&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;文件格式不正确！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成随机的文件名</span></span><br><span class="line">    filename = CommunityUtil.generateUUID() + suffix;</span><br><span class="line">    <span class="comment">//确定文件存放的路径</span></span><br><span class="line">    File dest = <span class="keyword">new</span> File(upload + <span class="string">&quot;/&quot;</span> + filename);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        headerImage.transferTo(dest);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;上传文件失败，服务器发生异常：&quot;</span>+e.getMessage());</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;上传文件失败，服务器发生异常！&quot;</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新当前用户的头像地址（web访问路径）</span></span><br><span class="line">    <span class="comment">//http://localhost:8080/community/user/header/***.png</span></span><br><span class="line">    User user = hostHolder.getUser();</span><br><span class="line">    String headerUrl = domain + contextPath + <span class="string">&quot;/user/header/&quot;</span> + filename;</span><br><span class="line">    <span class="comment">//跟新数据库中投降文件的地址</span></span><br><span class="line">    userService.updateHeader(user.getId(),headerUrl);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="获取头像">获取头像</h5>
<p>通过IO流的方式读取头像。</p>
<p>先拼接成文件保存的地址，然后再通过IO读取头像。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/header/&#123;filename&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHeader</span><span class="params">(<span class="meta">@PathVariable(&quot;filename&quot;)</span> String filename, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    <span class="comment">//服务器存放的路径</span></span><br><span class="line">    filename = upload + <span class="string">&quot;/&quot;</span> + filename;</span><br><span class="line">    <span class="comment">//文件后缀</span></span><br><span class="line">    String suffix = filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//相应图片</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;image/&quot;</span>+suffix);</span><br><span class="line">    <span class="keyword">try</span> (</span><br><span class="line">            OutputStream os = response.getOutputStream();</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(filename);</span><br><span class="line">            )&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((b = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;读取头像失败：&quot;</span>+e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="修改密码">修改密码</h3>
<h5 id="填写表单">填写表单</h5>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210903094805614.png" alt="image-20210903094805614"></p>
<h5 id="service层">service层</h5>
<p>对表单中的数据进行合法性判断，如果合法就更新数据库。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> oldPassword</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newPassword</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> confirmPassword</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">checkPassword</span><span class="params">(String oldPassword,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        String newPassword, String confirmPassword,User user)</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(oldPassword))&#123;</span><br><span class="line">        map.put(<span class="string">&quot;oldPasswordMsg&quot;</span>,<span class="string">&quot;密码格式不正确&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(newPassword) || newPassword.length()&lt;<span class="number">8</span>)&#123;</span><br><span class="line">        map.put(<span class="string">&quot;newPasswordMsg&quot;</span>,<span class="string">&quot;新密码格式不正确&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(confirmPassword) || confirmPassword.length()&lt;<span class="number">8</span>)&#123;</span><br><span class="line">        map.put(<span class="string">&quot;confirmPasswordMsg&quot;</span>,<span class="string">&quot;新密码格式不正确&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!confirmPassword.equals(newPassword))&#123;</span><br><span class="line">        map.put(<span class="string">&quot;confirmPasswordMsg&quot;</span>,<span class="string">&quot;两次密码不相同&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    oldPassword = CommunityUtil.md5(oldPassword+user.getSalt());</span><br><span class="line">    <span class="keyword">if</span> (!oldPassword.equals(user.getPassword()))&#123;</span><br><span class="line">        map.put(<span class="string">&quot;oldPasswordMsg&quot;</span>,<span class="string">&quot;密码错误！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    String salt = CommunityUtil.generateUUID();</span><br><span class="line">    newPassword = CommunityUtil.md5(newPassword + salt);</span><br><span class="line">    userDao.updatePassword(user.getId(),newPassword,salt);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="controller层">controller层</h5>
<p>对service层发来的处理结果进行分析。如果密码更新成功就跳转到登录页面，如果没有成功就在前端返回msg</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/updatePassword&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updatePassword</span><span class="params">(String oldPassword, String newPassword, String confirmPassword, Model model)</span></span>&#123;</span><br><span class="line">        User user = hostHolder.getUser();          <span class="comment">//从threadlocal中获得user对象。</span></span><br><span class="line">        Map&lt;String,Object&gt; map = userService.checkPassword(oldPassword,newPassword,confirmPassword,user);</span><br><span class="line">        <span class="keyword">if</span> (map == <span class="keyword">null</span> || map.isEmpty())&#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;修改密码成功&quot;</span>);</span><br><span class="line"><span class="comment">//            model.addAttribute(&quot;target&quot;,&quot;/index&quot;);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/login&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;oldPasswordMsg&quot;</span>,map.get(<span class="string">&quot;oldPasswordMsg&quot;</span>));</span><br><span class="line">            model.addAttribute(<span class="string">&quot;newPasswordMsg&quot;</span>,map.get(<span class="string">&quot;newPasswordMsg&quot;</span>));</span><br><span class="line">            model.addAttribute(<span class="string">&quot;confirmPasswordMsg&quot;</span>,map.get(<span class="string">&quot;confirmPasswordMsg&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/site/setting&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="检查登录状态">检查登录状态</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210903094744331.png" alt="image-20210903094744331"></p>
<p>==通过自定义注解进行拦截==</p>
<p>在需要拦截的方法上面添加一个自定义的注解就可以了，这样就省去了在WebMvcConfig中配置路径了。</p>
<h3 id="自定义注解">自定义注解</h3>
<p>相当于一个标记的作用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义注解，打上这么标记之后的方法，只有登录才能访问。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span>       <span class="comment">//目标</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>    <span class="comment">//在什么时候生效。</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LoginRequired &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="设置一个自定义注解的拦截器">设置一个自定义注解的拦截器</h3>
<p>因为他要在controller之前执行，所以使用preHandle。</p>
<p>被拦截的页面，要重定向到login页面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginRequiredInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HostHolder hostHolder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//检查handler能够强转成HandlerMethod类型</span></span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod)&#123;</span><br><span class="line">            HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">            Method method = handlerMethod.getMethod();</span><br><span class="line">            LoginRequired loginRequired = method.getAnnotation(LoginRequired.class);</span><br><span class="line">            <span class="keyword">if</span> (loginRequired != <span class="keyword">null</span> &amp;&amp; hostHolder.getUser() == <span class="keyword">null</span>)&#123;</span><br><span class="line">                response.sendRedirect(request.getContextPath() + <span class="string">&quot;/login&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="在要拦截的controller上打上标记">在要拦截的controller上打上标记</h3>
<p>这里是因为如果用户登录，你是不能访问用户设置页面的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@LoginRequired</span></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/setting&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSettingPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/site/setting&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="在WebMvcConfig里过滤静态资源">在WebMvcConfig里过滤静态资源</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> LoginRequiredInterceptor loginRequiredInterceptor;   <span class="comment">//根据自定义注解拦截</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    registry.addInterceptor(loginRequiredInterceptor)</span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/**/*.css&quot;</span>,<span class="string">&quot;/**/*.js&quot;</span>,<span class="string">&quot;/**/*.png&quot;</span>,<span class="string">&quot;/**/*.jpg&quot;</span>,<span class="string">&quot;/**/*.jpeg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Git管理版本</h1>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210901194014661.png" alt="image-20210901194014661"></p>
<p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init           初始化一个Git文件</span><br><span class="line"></span><br><span class="line">git --list         查看结构</span><br><span class="line"></span><br><span class="line">git add *          添加所有的文件到本地仓库。</span><br><span class="line"></span><br><span class="line">git commit -m &quot;描述此次提交的说明&quot;      提交文件到本地仓库</span><br><span class="line"></span><br><span class="line">git push           提交到远程仓库</span><br><span class="line"></span><br><span class="line">git log            查看分支的提交记录</span><br></pre></td></tr></table></figure>
<h1>社区模块开发</h1>
<h2 id="过滤敏感词">过滤敏感词</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210903110908762.png" alt="image-20210903110908762"></p>
<p>==通过前缀树过滤敏感词。==</p>
<p>前缀树：</p>
<ul>
<li>根节点是空的</li>
<li>除了根节点，每个节点只有一个字符。</li>
<li>从根节点开始，将路径上的每个节点连接起来，就是当前节点的字符串。</li>
<li>每个子节点的字符是不同的，如果相同的话就要合并。</li>
</ul>
<p>例子：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210903112458856.png" alt="image-20210903112458856"></p>
<h2 id="发布帖子">发布帖子</h2>
<p>==异步请求==，更新局部页面，而不是刷新整个页面。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210903153206124.png" alt="image-20210903153206124"></p>
<h3 id="（1）前端页面使用ajax发送请求，在js里面编写">（1）前端页面使用ajax发送请求，在js里面编写</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">   $(<span class="string">&quot;#publishBtn&quot;</span>).click(publish);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">publish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   $(<span class="string">&quot;#publishModal&quot;</span>).modal(<span class="string">&quot;hide&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取标题和内容</span></span><br><span class="line">   <span class="keyword">var</span> title = $(<span class="string">&quot;#recipient-name&quot;</span>).val();</span><br><span class="line">   <span class="keyword">var</span> content = $(<span class="string">&quot;#message-text&quot;</span>).val();</span><br><span class="line">   <span class="comment">//发送异步请求（post）</span></span><br><span class="line">   $.post(</span><br><span class="line">      CONTEXT_PATH + <span class="string">&quot;/discuss/add&quot;</span>,</span><br><span class="line">      &#123;<span class="string">&quot;title&quot;</span>:title,<span class="string">&quot;content&quot;</span>:content&#125;,</span><br><span class="line">      function (data)&#123;</span><br><span class="line">         data = $.parseJSON(data);</span><br><span class="line">         console.log(data);</span><br><span class="line">         <span class="comment">//在提示框中显示返回消息</span></span><br><span class="line">         $(<span class="string">&quot;#hintBody&quot;</span>).text(data.msg);</span><br><span class="line">         <span class="comment">//显示提示框</span></span><br><span class="line">         $(<span class="string">&quot;#hintModal&quot;</span>).modal(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">         <span class="comment">//2秒后，自动隐藏提示框</span></span><br><span class="line">         setTimeout(function()&#123;</span><br><span class="line">            $(<span class="string">&quot;#hintModal&quot;</span>).modal(<span class="string">&quot;hide&quot;</span>);</span><br><span class="line">            <span class="comment">//刷新页面</span></span><br><span class="line">            <span class="keyword">if</span> (data.code == <span class="number">0</span>)&#123;</span><br><span class="line">               window.location.reload();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">   );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="（2）service层">（2）service层</h3>
<p>底层逻辑判断，把前端的帖子通过controller层发送到这里，然后service层对发送来的数据进行判断，转义HTML标记、过滤敏感词等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增加帖子的功能，将敏感词过滤掉</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addDiscussPost</span><span class="params">(DiscussPost post)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (post == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;参数不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转义HTML标记</span></span><br><span class="line">    post.setTitle(HtmlUtils.htmlEscape(post.getTitle()));</span><br><span class="line">    post.setContent(HtmlUtils.htmlEscape(post.getContent()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//过滤敏感词</span></span><br><span class="line">    post.setTitle(sensitiveFilter.filter(post.getTitle()));</span><br><span class="line">    post.setContent(sensitiveFilter.filter(post.getContent()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> discussPostDao.insertDiscussPost(post);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="（3）controller层">（3）controller层</h3>
<p>接收到前端发送来的请求之后，对数据封装到一个discussPost里面。再把这个discussPost对象发送到service层进行处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/discuss&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscussPostController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscussPostService discussPostService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HostHolder hostHolder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;/add&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addDiscussPost</span><span class="params">(String title,String content)</span></span>&#123;</span><br><span class="line">        User user = hostHolder.getUser();</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> CommunityUtil.getJSONString(<span class="number">404</span>,<span class="string">&quot;你还没有登录哦！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置帖子信息</span></span><br><span class="line">        DiscussPost post = <span class="keyword">new</span> DiscussPost();</span><br><span class="line">        post.setUserId(user.getId());</span><br><span class="line">        post.setTitle(title);</span><br><span class="line">        post.setContent(content);</span><br><span class="line">        post.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        discussPostService.addDiscussPost(post);</span><br><span class="line">        <span class="comment">//这里报错没有处理，等后面统一处理。</span></span><br><span class="line">        <span class="keyword">return</span> CommunityUtil.getJSONString(<span class="number">0</span>,<span class="string">&quot;发布成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="帖子详情">帖子详情</h2>
<p>点击帖子，跳转到查看帖子的详细内容。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210903191923838.png" alt="image-20210903191923838"></p>
<h4 id="（1）service层">（1）service层</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个帖子详情</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DiscussPost <span class="title">findDiscussPostById</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> discussPostDao.selectDiscussPostById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="（2）controller层">（2）controller层</h4>
<p>将帖子内容跟对象返回到前端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(path = &quot;/detail/&#123;discussPostId&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDiscussPost</span><span class="params">(<span class="meta">@PathVariable(&quot;discussPostId&quot;)</span> <span class="keyword">int</span> discussPostId, Model model)</span></span>&#123;</span><br><span class="line">    <span class="comment">//帖子</span></span><br><span class="line">    DiscussPost post = discussPostService.findDiscussPostById(discussPostId);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;post&quot;</span>,post);</span><br><span class="line">    <span class="comment">//作者</span></span><br><span class="line">    User user = userService.selectById(post.getUserId());</span><br><span class="line">    model.addAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/site/discuss-detail&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="事务管理">事务管理</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210903195107911.png" alt="image-20210903195107911"></p>
<p>注解式事务：</p>
<p>使用@Transactional注解实现，通过参数可以实现不同的隔离级别。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscussPostDao discussPostDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注释性事务</span></span><br><span class="line"><span class="comment">//REQUIRED:支持当前事务（外部事务），如果不存在就创建新事务</span></span><br><span class="line"><span class="comment">//REQUIRED_NEW:创建一个新事务，并且暂停当前事务（外部事务）</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED,propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">save1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">&quot;alpha&quot;</span>);</span><br><span class="line">    user.setSalt(CommunityUtil.generateUUID().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">    user.setPassword(CommunityUtil.md5(<span class="string">&quot;123&quot;</span>+user.getSalt()));</span><br><span class="line">    user.setEmail(<span class="string">&quot;123@qq.com&quot;</span>);</span><br><span class="line">    user.setHeaderUrl(<span class="string">&quot;http://images.nowcoder.com/head/25t.png&quot;</span>);</span><br><span class="line">    user.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    userDao.insertUser(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增帖子</span></span><br><span class="line">    DiscussPost discussPost = <span class="keyword">new</span> DiscussPost();</span><br><span class="line">    discussPost.setUserId(user.getId());</span><br><span class="line">    discussPost.setTitle(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    discussPost.setContent(<span class="string">&quot;新人报道&quot;</span>);</span><br><span class="line">    discussPost.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    discussPostDao.insertDiscussPost(discussPost);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="私信设置">私信设置</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210905221331642.png" alt="image-20210905221331642"></p>
<p>发送私信功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送私信功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> toName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/letter/send&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sendLetter</span><span class="params">(String toName,String content)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">    User target = userService.selectByName(toName);</span><br><span class="line">    <span class="keyword">if</span> (target == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> CommunityUtil.getJSONString(<span class="number">1</span>,<span class="string">&quot;目标用户不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Message message = <span class="keyword">new</span> Message();</span><br><span class="line">    message.setFromId(hostHolder.getUser().getId());</span><br><span class="line">    message.setToId(target.getId());</span><br><span class="line">    <span class="keyword">if</span> (message.getFromId() &lt; message.getToId())&#123;</span><br><span class="line">        message.setConversationId(message.getFromId()+<span class="string">&quot;_&quot;</span>+message.getToId());</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        message.setConversationId(message.getToId()+<span class="string">&quot;_&quot;</span>+message.getFromId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    message.setContent(content);</span><br><span class="line">    message.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    messageService.addMessage(message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> CommunityUtil.getJSONString(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更新状态（未读—已读）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">getLetterIds</span><span class="params">(List&lt;Message&gt; letterList)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (letterList != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Message message : letterList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hostHolder.getUser().getId() == message.getToId() &amp;&amp; message.getStatus() == <span class="number">0</span>) &#123;</span><br><span class="line">                ids.add(message.getId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ids;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置已读</span></span><br><span class="line">        List&lt;Integer&gt; ids = getLetterIds(letterList);</span><br><span class="line">        <span class="keyword">if</span> (!ids.isEmpty()) &#123;</span><br><span class="line">            messageService.readMessage(ids);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>前端页面点击发送私信按钮之后的事件。</p>
<p>把发送给谁，内容发送到后端，后端进行处理之后再发回一个 json数据。然后前端会接收到这个json数据，再刷新页面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send_letter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   $(<span class="string">&quot;#sendModal&quot;</span>).modal(<span class="string">&quot;hide&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> toName = $(<span class="string">&quot;#recipient-name&quot;</span>).val();</span><br><span class="line">   <span class="keyword">var</span> content = $(<span class="string">&quot;#message-text&quot;</span>).val();</span><br><span class="line"></span><br><span class="line">   $.post(</span><br><span class="line">      CONTEXT_PATH + <span class="string">&quot;/letter/send&quot;</span>,</span><br><span class="line">      &#123;<span class="string">&quot;toName&quot;</span>:toName,<span class="string">&quot;content&quot;</span>:content&#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line">         data = $.parseJSON(data);</span><br><span class="line">         <span class="keyword">if</span> (data.code==<span class="number">0</span>)&#123;</span><br><span class="line">            $(<span class="string">&quot;#hintBody&quot;</span>).text(<span class="string">&quot;发送成功&quot;</span>);</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">&quot;#hintBody&quot;</span>).text(data.msg);</span><br><span class="line">         &#125;</span><br><span class="line">         $(<span class="string">&quot;#hintModal&quot;</span>).modal(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">         <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $(<span class="string">&quot;#hintModal&quot;</span>).modal(<span class="string">&quot;hide&quot;</span>);</span><br><span class="line">            location.reload();</span><br><span class="line">         &#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">   );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="统一处理异常">统一处理异常</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210906163407082.png" alt="image-20210906163407082"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一异常处理</span></span><br><span class="line"><span class="comment"> * 处理controller层中出现的异常。写到logger日志中。当服务器出现错误时，在前端页面会提醒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice(annotations = Controller.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ExceptionAdvice.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;Exception.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleException</span><span class="params">(Exception e, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        logger.error(<span class="string">&quot;服务器发生异常&quot;</span>+e.getMessage());</span><br><span class="line">        <span class="keyword">for</span> (StackTraceElement element : e.getStackTrace())&#123;</span><br><span class="line">            logger.error(element.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        String xRequestedWith = request.getHeader(<span class="string">&quot;x-requested-with&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;XMLHttpRequest&quot;</span>.equals(xRequestedWith))&#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/plain;charset=utf-8&quot;</span>);</span><br><span class="line">            PrintWriter writer = response.getWriter();</span><br><span class="line">            writer.write(CommunityUtil.getJSONString(<span class="number">1</span>,<span class="string">&quot;服务器异常&quot;</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            response.sendRedirect(request.getContextPath()+ <span class="string">&quot;/error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="统一记录日志">统一记录日志</h2>
<p>针对业务模块记录日志。</p>
<p>实现：spring AOP。</p>
<p>AOP：是一种编程思想，是面向切面编程。是对OOP的互补</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210906171647897.png" alt="image-20210906171647897"></p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210906171811642.png" alt="image-20210906171811642"></p>
<ul>
<li>aspect： 切面。我们的编程都是在aspect中进行的。AOP统一处理这些bean中的某些功能。</li>
<li>pointcut：切入点：表示我们的设计的切面要切入到哪里。</li>
<li>target：要切入的目标，程序中已经开发好了，要处理业务逻辑的一些bean。</li>
<li>Joinpoint：连接点，target中能够植入代码的地方。</li>
<li>advice：通知，声明这个切面到底要处理什么样的逻辑。</li>
</ul>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210906172639880.png" alt="image-20210906172639880"></p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210906172903889.png" alt="image-20210906172903889"></p>
<h1>Redis</h1>
<h2 id="帖子点赞">帖子点赞</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210908085148874.png" alt="image-20210908085148874"></p>
<h3 id="（1）生成redis中key的方法">（1）生成redis中key的方法</h3>
<p>like:entity:entityType:entityId</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成redis的key的方法，用set进行保存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisKeyUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPLIT = <span class="string">&quot;:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFIX_ENTITY_LIKE = <span class="string">&quot;like:entity&quot;</span>;</span><br><span class="line">    <span class="comment">//某个实体的赞</span></span><br><span class="line">    <span class="comment">//拼接变量，从而得到一个完整的key</span></span><br><span class="line">    <span class="comment">//like:entity:entityType:entityId</span></span><br><span class="line">    <span class="comment">// -&gt;   保存在set(userId)，谁给帖子点了赞，就保存到set中，方面后面统计用户点赞数量。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getEntityLikeKey</span><span class="params">(<span class="keyword">int</span> entityType,<span class="keyword">int</span> entityId)</span></span>&#123;</span><br><span class="line">        <span class="comment">//实体的key</span></span><br><span class="line">        <span class="keyword">return</span> PREFIX_ENTITY_LIKE + SPLIT +entityType + SPLIT +entityId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="（2）业务逻辑层">（2）业务逻辑层</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LikeServiceImpl</span> <span class="keyword">implements</span> <span class="title">LikeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点赞,一次是点赞，两次取消点赞</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">like</span><span class="params">(<span class="keyword">int</span> userId,<span class="keyword">int</span> entityType, <span class="keyword">int</span> entityId)</span></span>&#123;</span><br><span class="line">        String entityLikeKey = RedisKeyUtil.getEntityLikeKey(entityType,entityId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isMember = redisTemplate.opsForSet().isMember(entityLikeKey, userId);</span><br><span class="line">        <span class="keyword">if</span> (isMember)&#123;</span><br><span class="line">            redisTemplate.opsForSet().remove(entityLikeKey,userId);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            redisTemplate.opsForSet().add(entityLikeKey,userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询某实体点赞的数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">findEntityLikeCount</span><span class="params">(<span class="keyword">int</span> entityType, <span class="keyword">int</span> entityId)</span></span>&#123;</span><br><span class="line">        String entityLikeKey = RedisKeyUtil.getEntityLikeKey(entityType,entityId);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().size(entityLikeKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询某人对某实体的点赞状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findEntityLikeStatus</span><span class="params">(<span class="keyword">int</span> userId,<span class="keyword">int</span> entityType, <span class="keyword">int</span> entityId)</span></span>&#123;</span><br><span class="line">        String entityLikeKey = RedisKeyUtil.getEntityLikeKey(entityType,entityId);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().isMember(entityLikeKey,userId) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="（3）控制层">（3）控制层</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LikeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LikeService likeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HostHolder hostHolder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;/like&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">like</span><span class="params">(<span class="keyword">int</span> entityType,<span class="keyword">int</span> entityId)</span></span>&#123;</span><br><span class="line">        User user = hostHolder.getUser();</span><br><span class="line">        <span class="comment">//点赞</span></span><br><span class="line">        likeService.like(user.getId(),entityType,entityId);</span><br><span class="line">        <span class="comment">//点赞的数量</span></span><br><span class="line">        Long likeCount = likeService.findEntityLikeCount(entityType, entityId);</span><br><span class="line">        <span class="comment">//状态</span></span><br><span class="line">        <span class="keyword">int</span> likeStatus = likeService.findEntityLikeStatus(user.getId(), entityType, entityId);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将返回的结果封装到map中，方便传递数据</span></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;likeCount&quot;</span>,likeCount);</span><br><span class="line">        map.put(<span class="string">&quot;likeStatus&quot;</span>,likeStatus);</span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        System.out.println(likeStatus);</span><br><span class="line">        <span class="comment">//通过json数据进行传递。</span></span><br><span class="line">        <span class="keyword">return</span> CommunityUtil.getJSONString(<span class="number">0</span>,map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="（4）前端js">（4）前端js</h3>
<p>使用ajax刷新局部页面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">like</span>(<span class="params">btn,entityType,entityId</span>)</span>&#123;</span><br><span class="line">    $.post(</span><br><span class="line">        CONTEXT_PATH + <span class="string">&quot;/like&quot;</span>,</span><br><span class="line">        &#123;<span class="string">&quot;entityType&quot;</span>:entityType,<span class="string">&quot;entityId&quot;</span>:entityId&#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line">            data = $.parseJSON(data);</span><br><span class="line">            <span class="keyword">if</span> (data.code == <span class="number">0</span>)&#123;</span><br><span class="line">                $(btn).children(<span class="string">&quot;i&quot;</span>).text(data.likeCount);</span><br><span class="line">                $(btn).children(<span class="string">&quot;b&quot;</span>).text(data.likeStatus==<span class="number">1</span>?<span class="string">&#x27;已赞&#x27;</span>:<span class="string">&quot;赞&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                alert(data.msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="我收到的赞">我收到的赞</h2>
<p>查询某个人的赞。</p>
<img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210908150640629.png" alt="image-20210908150640629" style="zoom:33%;" />
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LikeServiceImpl</span> <span class="keyword">implements</span> <span class="title">LikeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点赞,一次是点赞，两次取消点赞</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">like</span><span class="params">(<span class="keyword">int</span> userId,<span class="keyword">int</span> entityType, <span class="keyword">int</span> entityId,<span class="keyword">int</span> entityUserId)</span></span>&#123;</span><br><span class="line"><span class="comment">//        String entityLikeKey = RedisKeyUtil.getEntityLikeKey(entityType,entityId);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        boolean isMember = redisTemplate.opsForSet().isMember(entityLikeKey, userId);</span></span><br><span class="line"><span class="comment">//        if (isMember)&#123;</span></span><br><span class="line"><span class="comment">//            redisTemplate.opsForSet().remove(entityLikeKey,userId);</span></span><br><span class="line"><span class="comment">//        &#125;else&#123;</span></span><br><span class="line"><span class="comment">//            redisTemplate.opsForSet().add(entityLikeKey,userId);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        redisTemplate.execute(<span class="keyword">new</span> SessionCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(RedisOperations operations)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">                String entityLikeKey = RedisKeyUtil.getEntityLikeKey(entityType,entityId);</span><br><span class="line">                String userLikeKey = RedisKeyUtil.getUserLikeKey(entityUserId);</span><br><span class="line">                <span class="keyword">boolean</span> isMember = operations.opsForSet().isMember(entityLikeKey, userId);</span><br><span class="line">                <span class="comment">//开启事务</span></span><br><span class="line">                operations.multi();</span><br><span class="line">                <span class="keyword">if</span> (isMember)&#123;</span><br><span class="line">                    operations.opsForSet().remove(entityLikeKey,userId);</span><br><span class="line">                    operations.opsForValue().decrement(userLikeKey);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    operations.opsForSet().add(entityLikeKey,userId);</span><br><span class="line">                    operations.opsForValue().increment(userLikeKey);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> operations.exec();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询某实体点赞的数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">findEntityLikeCount</span><span class="params">(<span class="keyword">int</span> entityType, <span class="keyword">int</span> entityId)</span></span>&#123;</span><br><span class="line">        String entityLikeKey = RedisKeyUtil.getEntityLikeKey(entityType,entityId);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().size(entityLikeKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询某人对某实体的点赞状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findEntityLikeStatus</span><span class="params">(<span class="keyword">int</span> userId,<span class="keyword">int</span> entityType, <span class="keyword">int</span> entityId)</span></span>&#123;</span><br><span class="line">        String entityLikeKey = RedisKeyUtil.getEntityLikeKey(entityType,entityId);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().isMember(entityLikeKey,userId) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询某个用户获得的赞</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findUserLikeCount</span><span class="params">(<span class="keyword">int</span> userId)</span></span>&#123;</span><br><span class="line">        String userLikeKey = RedisKeyUtil.getUserLikeKey(userId);</span><br><span class="line">        Integer count =(Integer) redisTemplate.opsForValue().get(userLikeKey);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="keyword">null</span> ? <span class="number">0</span> : count.intValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="关注列表">关注列表</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210914102755729.png" alt="image-20210914102755729"></p>
<h2 id="使用redis优化登录模块">使用redis优化登录模块</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210914102952962.png" alt="image-20210914102952962"></p>
<h3 id="（1）使用redis存储验证码">（1）使用redis存储验证码</h3>
<p>重构了生成验证码的模块</p>
<p>重点：生成验证码发送给浏览器，此时验证码信息保存在cookie中，60s之后过期。</p>
<p>验证码还要保存到redis中，用于后台验证验证码是否正确。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;/kaptcha&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getKaptcha</span><span class="params">(HttpServletResponse response<span class="comment">/*HttpSession session*/</span>)</span></span>&#123;</span><br><span class="line">        <span class="comment">//生成验证码</span></span><br><span class="line">        String text = kaptchaProducer.createText();</span><br><span class="line">        BufferedImage image = kaptchaProducer.createImage(text);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将验证码存入到session中</span></span><br><span class="line"><span class="comment">//        session.setAttribute(&quot;kaptcha&quot;,text);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//验证码的归属，将验证码的信息发送给浏览器，保存到cookie中。</span></span><br><span class="line">        String kaptchaOwner = CommunityUtil.generateUUID();</span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;kaptchaOwner&quot;</span>,kaptchaOwner);</span><br><span class="line">        cookie.setMaxAge(<span class="number">60</span>);</span><br><span class="line">        cookie.setPath(contextPath);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将验证码存储到redis中。</span></span><br><span class="line">        String redisKey = RedisKeyUtil.getKaptchaKey(kaptchaOwner);</span><br><span class="line">        redisTemplate.opsForValue().set(redisKey,text,<span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将图片输出给浏览器,确定图片的格式是png</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过OutputStream输出流的方式向前端发回数据。</span></span><br><span class="line">            OutputStream os = response.getOutputStream();</span><br><span class="line">            ImageIO.write(image,<span class="string">&quot;png&quot;</span>,os);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;响应验证码失败：&quot;</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>登录的时候，将cookie中的验证码信息跟redis数据库中的验证码信息进行比较，进行登录验证。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(path = &quot;/login&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username,String password,String code,<span class="keyword">boolean</span> rememberMe,</span></span></span><br><span class="line"><span class="params"><span class="function">                    Model model<span class="comment">/*HttpSession session*/</span>,HttpServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="meta">@CookieValue(&quot;kaptchaOwner&quot;)</span> String kaptchaOwner)</span></span>&#123;</span><br><span class="line">    <span class="comment">//String kaptcha = (String) session.getAttribute(&quot;kaptcha&quot;);</span></span><br><span class="line">    String kaptcha = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(kaptchaOwner))&#123;</span><br><span class="line">        String redisKey = RedisKeyUtil.getKaptchaKey(kaptchaOwner);</span><br><span class="line">        kaptcha = (String) redisTemplate.opsForValue().get(redisKey);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="（2）使用redis存储登录凭证">（2）使用redis存储登录凭证</h3>
<p>登录时候会生成一个ticket</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成一个ticket的key，然后保存到redis中</span></span><br><span class="line">String redisKey = RedisKeyUtil.getTicket(loginTicket.getTicket());</span><br><span class="line">redisTemplate.opsForValue().set(redisKey, loginTicket);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">(String ticket)</span></span>&#123;</span><br><span class="line"><span class="comment">//        loginTicketDao.updateStatus(ticket,1);   //1表示无效</span></span><br><span class="line">        <span class="comment">//先从redis中获取，然后把状态修改为1，再存进去</span></span><br><span class="line">        String redisKey = RedisKeyUtil.getTicket(ticket);</span><br><span class="line">        LoginTicket loginTicket = (LoginTicket) redisTemplate.opsForValue().get(redisKey);</span><br><span class="line">        loginTicket.setStatus(<span class="number">1</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(redisKey,loginTicket);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>（3）使用redis缓存用户信息</p>
<p>进行查询用户操作时，先去缓存中查找有没有user（1）。如果没有的话就去数据库中进行查找，查找到对应的user信息并将其写入到缓存中（2）。</p>
<p>如果用户信息信息发生改变就删除缓存中的用户信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//根据id查找用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        User user = userDao.selectById(id);</span></span><br><span class="line"><span class="comment">//        return user;</span></span><br><span class="line">        <span class="comment">//先去缓存中去user数据，如果没有的话就去数据库中找，并在缓存中初始化一个数据。</span></span><br><span class="line">        User user = getCache(id);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            user = initCache(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.优先从缓存中取值</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">getCache</span><span class="params">(<span class="keyword">int</span> userId)</span></span>&#123;</span><br><span class="line">    String redisKey = RedisKeyUtil.getUserKey(userId);</span><br><span class="line">    <span class="keyword">return</span> (User) redisTemplate.opsForValue().get(redisKey);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.取不到时初始化缓存数据</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">initCache</span><span class="params">(<span class="keyword">int</span> userId)</span></span>&#123;</span><br><span class="line">    User user = userDao.selectById(userId);</span><br><span class="line">    String redisKey = RedisKeyUtil.getUserKey(userId);</span><br><span class="line">    redisTemplate.opsForValue().set(redisKey,user,<span class="number">3600</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.数据变更时清除缓存数据</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearCache</span><span class="params">(<span class="keyword">int</span> userId)</span></span>&#123;</span><br><span class="line">    String redisKey = RedisKeyUtil.getUserKey(userId);</span><br><span class="line">    redisTemplate.delete(redisKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>Kafka，构架TB级一步消息系统</h1>
<h2 id="阻塞队列">阻塞队列</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210914151551505.png" alt="image-20210914151551505"></p>
<p>调用Java中的API接口：==BlockingQueue==</p>
<p>测试例子（生产者消费者）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kai.community.testBlocking;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingQueueTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BlockingQueue queue = <span class="keyword">new</span> ArrayBlockingQueue&lt;Integer&gt;(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread( <span class="keyword">new</span> Produce(queue)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread( <span class="keyword">new</span> Consumer(queue)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread( <span class="keyword">new</span> Consumer(queue)).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Produce</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;Integer&gt; blockingQueue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Produce</span><span class="params">(BlockingQueue&lt;Integer&gt; blockingQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.blockingQueue = blockingQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">20</span>);</span><br><span class="line">                blockingQueue.put(i);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;生产&quot;</span> + blockingQueue.size());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;Integer&gt; blockingQueue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(BlockingQueue&lt;Integer&gt; blockingQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.blockingQueue = blockingQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));</span><br><span class="line">                blockingQueue.take();       <span class="comment">//消费</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;消费&quot;</span> +blockingQueue.size());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="kafka入门">kafka入门</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20210915104045480.png" alt="image-20210915104045480"></p>
<h3 id="（1）kafka用于消息队列">（1）kafka用于消息队列</h3>
<ul>
<li>消息持久化：数据放到硬盘中，硬盘中的顺序读取会高于内存中的随机读取。</li>
</ul>
<p>Broker：kafka的服务器</p>
<p>Zookeeper：管理集群。</p>
<p>Topic：主题。文件夹，用来存放消息的位置。</p>
<p>partition：分区。</p>
<p>leader replica：主副本。</p>
<p>follower replica：随从副本。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringbootNewCoderApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaProducer kafkaProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testKafka</span><span class="params">()</span></span>&#123;</span><br><span class="line">        kafkaProducer.sendMessage(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        kafkaProducer.sendMessage(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">10</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KafkaProducer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate kafkaTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String topic,String content)</span></span>&#123;</span><br><span class="line">        kafkaTemplate.send(topic,content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumer</span></span>&#123;</span><br><span class="line">    <span class="meta">@KafkaListener(topics = &#123;&quot;test&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(ConsumerRecord record)</span></span>&#123;</span><br><span class="line">        System.out.println(record.value());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka</title>
    <url>/2021/11/02/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%9AKafka/</url>
    <content><![CDATA[<p>Kafka是一个分布式的基于发布、订阅模式的消息队列（Message Queue），主要应用于大数据实时处理领域。</p>
<span id="more"></span>
<h1>Kafka概述</h1>
<p>Kafka是一个分布式的基于发布、订阅模式的消息队列（Message Queue），主要应用于大数据实时处理领域。</p>
<p>中间件。常用于做消息队列，处理实时问题。例如：</p>
<ul>
<li>实时支付和金融交易。</li>
<li>实时跟踪和监控汽车。</li>
<li>监测住院病人并预测病情变化。</li>
<li>收集客户互动信息和订单信息并作出反应。</li>
</ul>
<p>关键字：中间件，解耦，实时。</p>
<h2 id="消息队列">消息队列</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211227144038229.png" alt="image-20211227144038229"></p>
<h3 id="使用消息队列的好处：">使用消息队列的好处：</h3>
<p>（1）解耦</p>
<p>（2）可恢复性：系统中的一部分失效，不会影响到整个系统。</p>
<p>（3）缓冲：有助于控制和延缓数据流经过系统的速度，解决生产消息和消费消息处理速度不一致的情况。</p>
<p>（4）灵活性 &amp; 峰值处理能力。</p>
<p>（5）异步通信。</p>
<h3 id="消息队列的两种模式：">消息队列的两种模式：</h3>
<p>（1）点对点模式（<strong>一对一</strong>，消费者主动拉取数据，消息收到后消息清除）</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211227144055848.png" alt="image-20211227144055848"></p>
<p>缺点：不可复用。</p>
<p>（2）发布订阅模式（<strong>一对多</strong>，消费者消费数据之后不会清除消息）</p>
<p>消息发布者将消息发布到topic（主题）中，同时多个消费者（订阅）消费该消息。但是topic中的消息是有一个过期时间的。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211227144107611.png" alt="image-20211227144107611"></p>
<p>有两种方式：</p>
<ol>
<li>消息队列主动推送消息（消费者是被动接收的）</li>
<li>消费者主动拉取消息。</li>
</ol>
<h1>Kafka架构</h1>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20211227144630233.png" alt="image-20211227144630233"></p>
<p>1）<strong>Producer</strong> ：消息生产者，就是向Kafka broker发消息的客户端；</p>
<p>2）<strong>Consumer</strong> ：消息消费者，向Kafka broker取消息的客户端；</p>
<p>3） <strong>Consumer Group</strong> （CG）：消费者组</p>
<p>4）<strong>Broker</strong> ：kafka实例，每台服务器上可以有一个或者多个实例。一个集群由多个broker组成。一个broker可以容纳多个topic；</p>
<p>5）<strong>Topic</strong> ：消息的主题。kafka中的所有数据都保存在topic中</p>
<p>6）<strong>Partition</strong>：Topic的分区，每个Topic有多个分区，分区的目的是负载，提高kafka的吞吐量。（同一个分区中的数据是有序的）</p>
<p>7）<strong>Replication</strong>：备份，每一个Partition都有多个备份。当一个Leader崩溃了之后，会从follower中选举出来一个新的Leader。写入生产数据、消费数据都是对Leader进行操作。</p>
<p>8）<strong>Message</strong>：消息主体。</p>
<p>9）<strong>Offset</strong>：kafka的存储文件都是按照offset.kafka来命名，用offset做名字的好处是方便查找。例如你想找位于2049的位置，只要找到2048.kafka的文件即可。当然the first offset就是00000000000.kafka。</p>
<p>10）<strong>Zookeeper</strong>：kafka集群依赖zookeeper来保存集群的元信息，保证系统的可用性。</p>
<h1>Kafka工作流程</h1>
<h2 id="写入数据">写入数据</h2>
<p>producer就是生产者，是数据的入口。Producer在写入数据的时候<strong>永远的找leader</strong>，不会直接将数据写入follower！</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/v2-b7e72e9c5b9971e89ec174a2c2201ed9_720w.jpg" alt="img"></p>
<p>消息写入leader后，follower主动拉取leader中的信息进行同步！producer采用push模式将数据发布到broker，每条消息追加到分区中，顺序写入磁盘，所以保证<strong>同一分区</strong>内的数据是有序的！写入示意图如下：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/v2-87d558aaa349bf920711b9c157e11f6a_r.jpg" alt="preview"></p>
<h3 id="问题1：kafka为什么要做分区？">问题1：kafka为什么要做分区？</h3>
<p><strong>1、 方便扩展</strong>。因为一个topic可以有多个partition，所以我们可以通过扩展机器去轻松的应对日益增长的数据量。</p>
<p><strong>2、 提高并发</strong>。以partition为读写单位，可以多个消费者同时消费数据，提高了消息的处理效率。</p>
<h3 id="问题2：怎么确定消息要写入哪一个分区？">问题2：怎么确定消息要写入哪一个分区？</h3>
<p>1、 partition在写入的时候可以指定需要写入的partition，如果有指定，则写入对应的partition。</p>
<p>2、 如果没有指定partition，但是设置了数据的key，则会根据key的值hash出一个partition。</p>
<p>3、 如果既没指定partition，又没有设置key，则会轮询选出一个partition</p>
<h3 id="问题3：kafka怎么确保信息不丢失">问题3：kafka怎么确保信息不丢失</h3>
<p>通过ACK应答机制！在生产者向队列写入数据的时候可以设置参数来确定是否确认kafka接收到数据，这个参数可设置的值为<strong>0</strong>、<strong>1</strong>、<strong>all</strong>。</p>
<ul>
<li><strong>0</strong>代表producer往集群发送数据不需要等到集群的返回，不确保消息发送成功。安全性最低但是效率最高。</li>
<li><strong>1</strong>代表producer往集群发送数据只要leader应答就可以发送下一条，只确保leader发送成功。</li>
<li><strong>all</strong>代表producer往集群发送数据需要所有的follower都完成从leader的同步才会发送下一条，确保leader发送成功和所有的副本都完成备份。安全性最高，但是效率最低。</li>
</ul>
<p>默认配置是1.</p>
<h2 id="数据保存">数据保存</h2>
<p>kafka的数据是保存在磁盘上的。</p>
<p>写入磁盘会耗时？kafka初始化时会单独的开辟一块磁盘空间，顺序写入数据（效率比随机写入快）。</p>
<h3 id="Partition结构">Partition结构</h3>
<p>Partition在服务器上的表现形式就是一个一个的文件夹，每个partition的文件夹下面会有多组segment文件，每组segment文件又包含.index文件、.log文件、.timeindex文件（早期版本中没有）三个文件， <strong>log文件就实际是存储message的地方，而index和timeindex文件为索引文件，用于检索消息</strong>。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/v2-72e50c12fd9c6fbf58d3b5ca14c90623_r.jpg" alt="preview"></p>
<p>如上图，这个partition有三组segment文件，每个log文件的大小是一样的，但是存储的message数量是不一定相等的（每条的message大小不一致）。<strong>文件的命名是以该segment最小offset来命名的</strong>，如000.index存储offset为0~368795的消息，kafka就是利用分段+索引的方式来解决查找效率的问题。</p>
<h3 id="Message结构">Message结构</h3>
<p>1、 offset：8byte的有序id号，它可以唯一确定每条消息在parition内的位置。</p>
<p>2、 消息大小：4byte，用于描述消息的大小。</p>
<p>3、 消息体：消息体存放的是实际的消息数据（被压缩过），占用的空间根据具体的消息而不一样。</p>
<h3 id="存储策略">存储策略</h3>
<p>无论消息是否被消费，kafka都会保存所有的消息。那对于旧数据有什么删除策略呢？</p>
<p>1、 基于时间，默认配置是168小时（7天）。</p>
<p>2、 基于大小，默认配置是1073741824。</p>
<p>需要注意的是，kafka读取特定消息的时间复杂度是O(1)，所以这里删除过期的文件并不会提高kafka的性能！</p>
<h2 id="消费数据">消费数据</h2>
<p>消息存储在log文件后，消费者就可以进行消费了。在讲消息队列通信的两种模式的时候讲到过点对点模式和发布订阅模式。<strong>Kafka采用的是发布订阅的模式</strong>，消费者主动的去kafka集群拉取消息，与producer相同的是，消费者在拉取消息的时候也是<strong>找leader</strong>去拉取。</p>
<p>多个消费者可以组成一个消费者组（consumer group），每个消费者组都有一个组id！<strong>同一个消费组者的消费者可以消费同一topic下不同分区的数据，但是不会组内多个消费者消费同一分区的数据</strong>！！！</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/v2-75a79cba9cfafe5c2f4d5349acb72207_r.jpg" alt="preview"></p>
<p>建议<strong>消费者组的consumer的数量与partition的数量一致</strong>！</p>
<h3 id="查找消息">查找消息</h3>
<p>在保存数据的小节里面，我们聊到了partition划分为多组segment，每个segment又含.log、.index、.timeindex文件，存放的每条message包含offset、消息大小、消息体……我们多次提到segment和offset，查找消息的时候是怎么利用segment+offset配合查找的呢？假如现在需要查找一个offset为368801的message是什么样的过程呢？我们先看看下面的图：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/v2-87051d884344edf9f8fd97a3dacb32d0_r.jpg" alt="preview"></p>
<p>1、 先找到offset的368801message所在的segment文件（利用<strong>二分法查找</strong>），这里找到的就是在第二个segment文件。</p>
<p>2、 打开找到的segment中的.index文件（也就是368796.index文件，该文件起始偏移量为368796+1，我们要查找的offset为368801的message在该index内的偏移量为368796+5=368801，所以这里要查找的<strong>相对offset</strong>为5）。由于该文件采用的是稀疏索引的方式存储着相对offset及对应message物理偏移量的关系，所以直接找相对offset为5的索引找不到，这里同样<strong>利用二分法查找相对offset小于或者等于指定的相对offset的索引条目中最大的那个相对offset，所以找到的是相对offset为4的这个索引。</strong></p>
<p>3、 根据找到的相对offset为4的索引确定message存储的物理偏移位置为256。打开数据文件，从位置为256的那个地方开始顺序扫描直到找到offset为368801的那条Message。</p>
<p>这套机制是建立在offset为有序的基础上，利用<strong>segment</strong>+<strong>有序offset</strong>+<strong>稀疏索引</strong>+<strong>二分查找</strong>+<strong>顺序查找</strong>等多种手段来高效的查找数据！</p>
<p>消费者记录消费的数据：</p>
<ul>
<li>旧版本：将消费到的offset维护zookeeper中，consumer每间隔一段时间上报一次，这里容易导致重复消费，且性能不好。</li>
<li>消费者消费到的offset已经直接维护在kafk集群的__consumer_offsets这个topic中！不需要借助Zookeeper。</li>
</ul>
<h1>Java连接Kafka做消息队列</h1>
<p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--kafka--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#kafka</span></span><br><span class="line"><span class="comment">###########【Kafka集群】###########</span></span><br><span class="line"><span class="meta">spring.kafka.bootstrap-servers</span>=<span class="string">127.0.0.1:9092</span></span><br><span class="line"><span class="comment">###########【初始化生产者配置】###########</span></span><br><span class="line"><span class="comment"># 重试次数</span></span><br><span class="line"><span class="meta">spring.kafka.producer.retries</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)</span></span><br><span class="line"><span class="meta">spring.kafka.producer.acks</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 批量大小</span></span><br><span class="line"><span class="meta">spring.kafka.producer.batch-size</span>=<span class="string">16384</span></span><br><span class="line"><span class="comment"># 提交延时</span></span><br><span class="line"><span class="meta">spring.kafka.producer.properties.linger.ms</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># 当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka</span></span><br><span class="line"><span class="comment"># linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了</span></span><br><span class="line"><span class="comment"># 生产端缓冲区大小</span></span><br><span class="line"><span class="meta">spring.kafka.producer.buffer-memory</span> = <span class="string">33554432</span></span><br><span class="line"><span class="comment"># Kafka提供的序列化和反序列化类</span></span><br><span class="line"><span class="meta">spring.kafka.producer.key-serializer</span>=<span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line"><span class="meta">spring.kafka.producer.value-serializer</span>=<span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line"><span class="comment"># 自定义分区器</span></span><br><span class="line"><span class="comment"># spring.kafka.producer.properties.partitioner.class=com.felix.kafka.producer.CustomizePartitioner</span></span><br><span class="line"><span class="comment">###########【初始化消费者配置】###########</span></span><br><span class="line"><span class="comment"># 默认的消费组ID</span></span><br><span class="line"><span class="meta">spring.kafka.consumer.properties.group.id</span>=<span class="string">defaultConsumerGroup</span></span><br><span class="line"><span class="comment"># 是否自动提交offset</span></span><br><span class="line"><span class="meta">spring.kafka.consumer.enable-auto-commit</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 提交offset延时(接收到消息后多久提交offset)</span></span><br><span class="line"><span class="meta">spring.kafka.consumer.auto.commit.interval.ms</span>=<span class="string">1000</span></span><br><span class="line"><span class="comment"># 当kafka中没有初始offset或offset超出范围时将自动重置offset</span></span><br><span class="line"><span class="comment"># earliest:重置为分区中最小的offset;</span></span><br><span class="line"><span class="comment"># latest:重置为分区中最新的offset(消费分区中新产生的数据);</span></span><br><span class="line"><span class="comment"># none:只要有一个分区不存在已提交的offset,就抛出异常;</span></span><br><span class="line"><span class="meta">spring.kafka.consumer.auto-offset-reset</span>=<span class="string">latest</span></span><br><span class="line"><span class="comment"># 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)</span></span><br><span class="line"><span class="meta">spring.kafka.consumer.properties.session.timeout.ms</span>=<span class="string">120000</span></span><br><span class="line"><span class="comment"># 消费请求超时时间</span></span><br><span class="line"><span class="meta">spring.kafka.consumer.properties.request.timeout.ms</span>=<span class="string">180000</span></span><br><span class="line"><span class="comment"># Kafka提供的序列化和反序列化类</span></span><br><span class="line"><span class="meta">spring.kafka.consumer.key-deserializer</span>=<span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line"><span class="meta">spring.kafka.consumer.value-deserializer</span>=<span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line"><span class="comment"># 消费端监听的topic不存在时，项目启动会报错(关掉)</span></span><br><span class="line"><span class="meta">spring.kafka.listener.missing-topics-fatal</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 设置批量消费</span></span><br><span class="line"><span class="comment"># spring.kafka.listener.type=batch</span></span><br><span class="line"><span class="comment"># 批量消费每次最多消费多少条消息</span></span><br><span class="line"><span class="comment"># spring.kafka.consumer.max-poll-records=50</span></span><br></pre></td></tr></table></figure>
<p>生产者，发送消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;Object, Object&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message：消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/kafka/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(<span class="meta">@PathVariable(&quot;message&quot;)</span> String message)</span> </span>&#123;</span><br><span class="line">        kafkaTemplate.send(<span class="string">&quot;topic1&quot;</span>,<span class="string">&quot;key&quot;</span>, message);    <span class="comment">//发送数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>消费者监控指定主题，当生产者发送消息之后，消费者进行消费。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听当前的topic。当前topic中有数据的话，就进行消费</span></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &#123;&quot;topic1&quot;&#125;)</span></span><br><span class="line">    <span class="comment">//创建一条记录，以从指定的主题和分区接收</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage1</span><span class="params">(ConsumerRecord&lt;?, ?&gt; record)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费简单模拟主题：&quot;</span> + record.topic());</span><br><span class="line">        System.out.println(<span class="string">&quot;offset:&quot;</span> + record.offset());</span><br><span class="line">        System.out.println(<span class="string">&quot;timestamp&quot;</span> + record.timestamp());</span><br><span class="line">        System.out.println(record.key());</span><br><span class="line">        System.out.println(record.value());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>消息队列中间件：RabbitMQ</title>
    <url>/2021/11/01/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%9ARabbitMQ/</url>
    <content><![CDATA[<p>消息队列（MQ，Message Queue）本质是一个队列，队列中存放的内容是message，是一种跨进程的通信机制，用于上下游传递消息。RabbitMQ是一个消息中间件，它接受、存储、转发消息数据。</p>
<span id="more"></span> 
<h1>消息队列</h1>
<h2 id="MQ相关概念">MQ相关概念</h2>
<h3 id="什么是MQ">什么是MQ</h3>
<p>消息队列（MQ，Message Queue）本质是一个队列，队列中存放的内容是message，是一种跨进程的通信机制，用于上下游传递消息。</p>
<p>使用MQ以后，消息发送上游只需要依赖MQ，不用依赖其他服务。</p>
<h3 id="MQ的作用">MQ的作用</h3>
<ul>
<li>
<p>流量削峰</p>
</li>
<li>
<p>应用解耦</p>
</li>
<li>
<p>异步处理</p>
</li>
</ul>
<h3 id="1-1-3-MQ分类">1.1.3 MQ分类</h3>
<p>常见的MQ有以下几种：</p>
<ul>
<li>ActiveMQ：高吞吐量场景较少使用。</li>
<li>Kafka：为大数据而生，百万级TPS，吞吐量高，在日志领域比较成熟。适合有日志采集需求的大型企业。</li>
<li>RocketMQ：出自阿里巴巴，单机吞吐量十万级，消息0丢失，支持10亿级别的消息堆积。适合金融互联网。</li>
<li>RabbitMQ：由Erlang语言开发，在AMQP（高级消息队列协议）基础上完成，当前最流行的MQ。吞吐量万级，支持多种语言。适合数据量不是特别大的中小型公司。</li>
</ul>
<h2 id="RabbitMQ">RabbitMQ</h2>
<h3 id="核心概念">核心概念</h3>
<p><strong>RabbitMQ</strong></p>
<p>RabbitMQ是一个消息中间件，它接受、存储、转发消息数据。</p>
<p><strong>生产者（Producer）</strong></p>
<p>产生数据、发送消息的程序是生产者。</p>
<p><strong>交换机（Exchange）</strong></p>
<p>交换机是RabbitMQ的一个重要组件。它一方面接收来自生产者的消息，另一方面将消息推送到队列中。交换机决定了将消息推送到特定队列还是推送到多个队列。</p>
<p><strong>队列（Queue）</strong></p>
<p>队列是RabbitMQ内部使用的一种数据结构。消息只能存储在队列中，队列仅受主机的内存和磁盘限制的约束，本质上是一个大的消息缓冲区。许多生产者可以将消息发送到一个队列，许多消费者也可以尝试从一个队列接收数据。</p>
<p><strong>消费者（Consumer）</strong></p>
<p>消费者指的是等待接受消息的程序。同一个应用程序既可以是生产者也可以是消费者。</p>
<h3 id="安装">安装</h3>
<p>RabbitMQ官方文档：<a href="https://www.rabbitmq.com/documentation.html">Docs</a></p>
<p>RabbitMQ基于Erlang环境，因此需要先安装Erlang。</p>
<p>安装之前需要确保RabbitMQ和Erlang的版本要对应：<a href="https://www.rabbitmq.com/which-erlang.html">RabbitMQ Erlang Version Requirements</a></p>
<p>本机环境：</p>
<ul>
<li>CentOS-7.9</li>
<li>Erlang-23.2.3</li>
<li>RabbitMQ-3.8.15</li>
</ul>
<p>使用<code>rpm</code>方式，在packagecloud网站下载安装包。</p>
<p><strong>1、安装Erlang</strong></p>
<p>下载对应版本的安装包，<a href="https://packagecloud.io/rabbitmq/erlang?page=1">packagecloud</a>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget --content-disposition https://packagecloud.io/rabbitmq/erlang/packages/el/7/erlang-23.2.3-1.el7.x86_64.rpm/download.rpm</span><br></pre></td></tr></table></figure>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh erlang-23.2.3-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<p><strong>2、安装socat</strong></p>
<p>除了Erlang环境，还需要安装socat：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install socat logrotate -y</span><br></pre></td></tr></table></figure>
<p><strong>3、安装RabbitMQ</strong></p>
<p>下载对应版本的安装包，<a href="https://packagecloud.io/rabbitmq/rabbitmq-server?page=1">packagecloud</a>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget --content-disposition https://packagecloud.io/rabbitmq/rabbitmq-server/packages/el/8/rabbitmq-server-3.8.15-1.el8.noarch.rpm/download.rpm</span><br></pre></td></tr></table></figure>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh rabbitmq-server-3.8.15-1.el8.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>安装完成后，启动rabbit服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start rabbitmq-server.service</span><br></pre></td></tr></table></figure>
<p><strong>4、安装插件</strong></p>
<p>可以通过以下命令开启web管理插件，需要先停止rabbitmq服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure>
<p>插件开启成功后就可以在浏览器中访问，默认端口号为<code>15672</code>（记得关闭防火墙或者开放端口）。</p>
<p>管理界面需要账号密码登陆，默认的账号和密码都是<code>guest</code>。</p>
<p>查看当前所有用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmqctl list_users</span><br></pre></td></tr></table></figure>
<p>添加新用户<code>admin</code>，密码也为<code>admin</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmqctl add_user admin admin</span><br></pre></td></tr></table></figure>
<p>设置用户角色（标签），将<code>admin</code>设置为<code>administrator</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure>
<p>设置用户权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_permissions -p <span class="string">&quot;/&quot;</span> admin <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="原理和工作模式">原理和工作模式</h3>
<p><strong>工作原理</strong></p>
<p>RabbitMQ的工作原理如图所示：</p>
<p><img src="C:%5CUsers%5CKangshitao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211015214425680.png" alt="image-20211015214425680"></p>
<p>生产者将消息通过Channel发送到Exchange，Exchange决定将消息分发到哪个队列，然后由消费者从队列中接收消息。</p>
<p>其中的核心概念：</p>
<ul>
<li><strong>Broker</strong>：接收和分发消息的应用，RabbitMQ Server就是Message Broker</li>
<li><strong>Virtual host</strong>：虚拟的分组，当多个不同的用户使用同一个RabbitMQ server提供的服务时，可以划分出多个vhost，每个用户在自己的vhost创建exchange/queue等。</li>
<li><strong>Connection</strong>：publisher/consumer和broker之间的TCP连接。</li>
<li><strong>Channel</strong>：Channel是在connection内部建立的逻辑连接，多线程情况下通常每个线程创建单独的channel进行通讯。AMQP method包含了channel id帮助客户端和broker识别channel，<strong>channel是完全隔离的</strong>。<strong>Channel作为轻量级的Connection极大减少了操作系统建立TCP connection的开销。</strong></li>
<li><strong>Exchange</strong>：交换机。消息到达broker中会首先到达Exchange，Exchange根据分发规则，匹配查询表中的routing key，分发消息到queue中去。常用的类型有：direct（point-to-point）、topic（publish-subscribe）、fanout（multicast）。</li>
<li><strong>Queue</strong>：消息被送到Queue中，然后被消费者取走。</li>
<li><strong>Binding</strong>：<strong>exchange</strong>和<strong>queue</strong>之间的虚拟连接。binding中可以包含Routing key，binding信息被保存到exchange中的查询表中，用于message的分发依据。声明binding关系的时候，可以声明RoutingKey参数</li>
</ul>
<p><strong>工作模式</strong></p>
<p>RabbitMQ一共有7种工作模式，参考<a href="https://www.rabbitmq.com/getstarted.html">Get Started</a>：</p>
<p><img src="C:%5CUsers%5CKangshitao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211015222337420.png" alt="image-20211015222337420"></p>
<h1>Hello World</h1>
<h2 id="介绍">介绍</h2>
<p><a href="https://www.rabbitmq.com/tutorials/tutorial-one-java.html">Hello World</a>模式是RabbitMQ最简单的一个模式。下图中的P表示生产者，C是消费者，中间框是一个队列，是RabbitMQ代表消费者保存的消息缓冲区。</p>
<p><img src="C:%5CUsers%5CKangshitao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211015222548402.png" alt="Hello World模式"></p>
<h2 id="实现">实现</h2>
<p><strong>1、在IDEA中创建Maven项目，然后引入依赖：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>编写生产者的代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;    <span class="comment">// 队列名称    public static final String QUEUE_NAME = &quot;hello&quot;;    //发消息    public static void main(String[] args) throws IOException, TimeoutException &#123;        //创建一个连接工厂        ConnectionFactory factory = new ConnectionFactory();        //设置工厂的ip，连接队列        factory.setHost(&quot;192.168.198.198&quot;); //RabbitMQ服务主机的ip        //设置用户名和密码        factory.setUsername(&quot;admin&quot;);        factory.setPassword(&quot;admin&quot;);        //创建连接，每个连接有多个channel，channel是用来发消息的。        Connection connection = factory.newConnection();        //获取channel        Channel channel = connection.createChannel();        //生成一个队列用于通信，简单起见，使用默认的交换机        channel.queueDeclare(QUEUE_NAME, false, false, false, null);        //发消息        String message = &quot;hello, world&quot;;        channel.basicPublish(&quot;&quot;, QUEUE_NAME, null, message.getBytes());        System.out.println(&quot;消息发送完毕！&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>其中关键方法的说明：</p>
<ul>
<li><code>queueDeclare()</code>，用于声明一个队列，其中的各个参数依次解释如下：
<ul>
<li>队列名。</li>
<li>队列的消息是否持久化，默认情况下消息存储在内存中(不持久化）。</li>
<li>该队列是否进行消费共享，true表示允许多个消费者消费。</li>
<li>是否自动删除 最后一个消费者端开连接以后，该队列是否自动删除。</li>
<li>其他参数。</li>
</ul>
</li>
<li><code>basicPublish()</code>，用于发布消息：
<ul>
<li>交换机名称，用于指定发送到哪个交换机。</li>
<li>routingKey，路由的key值。这里使用的是channel名字作为routingKey</li>
<li>其他参数信息。</li>
<li>发送消息的消息体。</li>
</ul>
</li>
</ul>
<p><strong>3、编写消费者的代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;    <span class="comment">// 队列名称    public static final String QUEUE_NAME = &quot;hello&quot;;        //接收消息    public static void main(String[] args) throws IOException, TimeoutException &#123;        //创建连接工厂        ConnectionFactory factory = new ConnectionFactory();        //设置ip        factory.setHost(&quot;192.168.198.198&quot;);        //设置用户名和密码        factory.setUsername(&quot;admin&quot;);        factory.setPassword(&quot;admin&quot;);        //创建连接        Connection connection = factory.newConnection();        //创建信道        Channel channel = connection.createChannel();        //消费者接收消息（消费消息）        //接收消息的回调函数        DeliverCallback deliverCallback = (consumerTag,message)-&gt;&#123;            System.out.println(new String(message.getBody()));        &#125;;        CancelCallback cancelCallback = (consumerTag)-&gt;&#123;            System.out.println(&quot;消息消费被中断&quot;);        &#125;;        channel.basicConsume(QUEUE_NAME,true, deliverCallback,cancelCallback);    &#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>basicConsume()</code>的参数说明：</p>
<ul>
<li>指定消费的队列名，即从哪个队列中取消息。</li>
<li>消费成功之后是否自动应答。</li>
<li>消费者接收的回调函数。</li>
<li>消费者取消消费的回调函数。</li>
</ul>
<blockquote>
<p>如果需要修改现有的exchange和queue，需要删除现有的队列，重新创建。</p>
</blockquote>
<p><strong>4、运行</strong></p>
<p>启动生产者程序，会创建Channel并发送消息，然后启动消费者程序，会收到来自生产者的消息。</p>
<h1>Work Queues</h1>
<p><a href="https://www.rabbitmq.com/tutorials/tutorial-two-java.html">Work Queues</a>模式的主要思想是避免因立即执行资源密集型任务而不得不等待它完成。在这个模式中，我们将任务封装为消息，并将其发送到队列。当有多个工作线程时，这些工作线程将一起处理这些任务。</p>
<p><img src="C:%5CUsers%5CKangshitao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211016200456597.png" alt="Work Queues"></p>
<h2 id="轮询分发消息">轮询分发消息</h2>
<p>Work Queues模式下使用的轮询分发的机制，对于多个消费者线程，会轮流分发任务。</p>
<p>下面我们以一个生产者，两个消费者线程来模拟。</p>
<p><strong>抽取工具类</strong></p>
<p>创建channel之前的代码是相同的，因此可以单独抽取出来，作为工具类：</p>
<p><code>RabbitMqUtils.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqUtils</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Channel <span class="title">getChannel</span><span class="params">()</span></span>&#123;        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();        factory.setHost(<span class="string">&quot;192.168.198.198&quot;</span>);        factory.setUsername(<span class="string">&quot;admin&quot;</span>);        factory.setPassword(<span class="string">&quot;admin&quot;</span>);        Connection connection = <span class="keyword">null</span>;        <span class="keyword">try</span> &#123;            connection = factory.newConnection();        &#125; <span class="keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;            e.printStackTrace();        &#125;        Channel channel = <span class="keyword">null</span>;        <span class="keyword">try</span> &#123;            channel = connection.createChannel();        &#125; <span class="keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;        <span class="keyword">return</span> channel;    &#125;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>生产者</strong></p>
<p>启动发送线程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task01</span> </span>&#123;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">&quot;hello&quot;</span>;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;        Channel channel = RabbitMqUtils.getChannel();        channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);        <span class="comment">//从控制台接收信息发送到消费者        Scanner scanner = new Scanner(System.in);        while(scanner.hasNext())&#123;            String message = scanner.next();            channel.basicPublish(&quot;&quot;,QUEUE_NAME,null,message.getBytes());            System.out.println(message+&quot;发送完成！&quot;);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>启动两个工作线程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker01</span> </span>&#123;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">&quot;hello&quot;</span>;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;        Channel channel = RabbitMqUtils.getChannel();        <span class="comment">//消息的接收        DeliverCallback deliverCallback = (consumerTag,message)-&gt;&#123;            System.out.println(&quot;接收到的消息：&quot;+new String(message.getBody()));        &#125;;        CancelCallback cancelCallback = (consumerTag)-&gt;&#123;            System.out.println(consumerTag+&quot;消息被取消接受&quot;);        &#125;;        System.out.println(&quot;Consumer 1------&quot;);        channel.basicConsume(QUEUE_NAME,true,deliverCallback,cancelCallback);    &#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>使用IDEA设置并行运行，<code>Edit Configurations</code>-&gt;<code>Allow multiple instances</code>，这样可以同时启动两个消费者线程。</p>
<p><strong>运行</strong></p>
<p>生产者发送消息，消费者1和消费者2会轮流处理消息。</p>
<p>比如生产者发送1、2、3、4、5、6，消费者1接收到1、3、5，消费者2接收到2、4、6。</p>
<h2 id="消息应答">消息应答</h2>
<p><strong>概念</strong></p>
<p>消费者完成一个任务需要耗费一定的时间，RabbitMQ一旦向消费者发送消息后，会将此消息标记为删除，这种情况下，如果消费者处理任务的过程中出现故障，会导致任务丢失。<strong>为了保证消息不会丢失，RabbitMQ引入了消息应答机制</strong>。</p>
<p><strong>消息应答（Message acknowledgment）</strong>：消费者在接收到消息并且处理完该消息之后，告诉RabbitMQ此消息已经被处理，RabbitMQ可以将该消息删除。这样就保证当某一个消费者线程故障后，消息会被重新发送给其他消费者，确保消息不会丢失（前提是RabbitMQ无故障）。</p>
<p>消息应答包括<strong>自动应答</strong>和<strong>手动应答</strong>两种方式：</p>
<ul>
<li><strong>自动应答</strong>：消息发送后立即被认为已经传送成功。这种方式没有对传递的消息数量做限制，会导致消费者端消息积压，线程被系统杀死。这种模式仅适用于消费者可以高效并以某种速率能够处理这些消息的情况下使用。</li>
<li><strong>手动应答</strong>：默认是手动应答模式。如果一个消费者线程宕机，其消息可以被其他消费者线程消费，而不会出现消息丢失的情况。</li>
</ul>
<p>手动应答示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** * 消息在手动应答时不丢失、放回队列中重新消费 */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker03</span> </span>&#123;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TASK_QUEUE_NAME = <span class="string">&quot;ack_queue&quot;</span>;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;        Channel channel = RabbitMqUtils.getChannel(); <span class="comment">//获取channel        System.out.println(&quot;消费者1等待接收消息，处理时间较短------&quot;);        //手动应答        boolean autoAck = false;        DeliverCallback deliverCallback = (consumerTag, message)-&gt;&#123;            //沉睡1s，模拟处理信息场景。            SleepUtils.sleep(1); //工具类SleepUtils用来睡眠线程。            System.out.println(&quot;接收到的消息：&quot;+new String(message.getBody(),&quot;UTF-8&quot;));            //手动应答。参数1为消息的标记tag，参数2表示是否批量应答            channel.basicAck(message.getEnvelope().getDeliveryTag(),false);        &#125;;        CancelCallback cancelCallback = (consumerTag)-&gt;&#123;            System.out.println(consumerTag+&quot;消息被取消接受&quot;);        &#125;;        //设置为手动应答        channel.basicConsume(TASK_QUEUE_NAME,autoAck,deliverCallback,cancelCallback);    &#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>手动应答主要是在接收消息的回调方法中调用<code>basicAck()</code>方法，已经在<code>basicConsume()</code>方法中设置自动应答方式为false。</p>
<p>其中<code>basicAck()</code>方法的第二个参数表示是否批量化应答。如果是<strong>批量化应答(Multiple)</strong>，则每次会应答一个批次的消息。</p>
<p><strong>手动应答的好处就是可以批量应答并且减少网络拥堵</strong>。</p>
<p><strong>消息重新入队</strong>：如果某个消费者由于某些原因失去连接（或发生故障），导致消息未发送ACK确认，RabbitMQ将了解到消息未完全处理，并将其重新排队发送给其他消费者。这样，即使某个消费者偶尔死亡，也可以确保不丢失消息。</p>
<h2 id="RabbitMQ持久化">RabbitMQ持久化</h2>
<p><strong>消息应答</strong>能够确保消费者线程故障后，消息不会丢失，如何保障当RabbitMQ服务停掉以后消息也不丢失？</p>
<p>这就<strong>需要将队列和消息都标记为持久化。</strong></p>
<p><strong>队列持久化</strong></p>
<p>在声明队列时将是否持久化的参数置为<code>true</code>即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.queueDeclare(TASK_QUEUE_NAME,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<p>第二个参数就表示是否持久化队列。</p>
<p>如果已经存在的队列需要持久化，需要将队列删除，重新创建。</p>
<p><strong>消息持久化</strong></p>
<p>仅将队列持久化不能保证消息不丢失，因为如果消费者线程宕机断开连接，仍然有可能出现消息丢失的情况。</p>
<p>设置消息持久化，需要在<code>channel</code>发布消息时设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>,TASK_QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN,message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br></pre></td></tr></table></figure>
<p>这种方式只是尽量保证持久化，如果绝对保证持久化，需要使用发布确认机制。</p>
<p><strong>预取值</strong></p>
<p><code>basicQos()</code>方法可以设置消费者线程的预取值。</p>
<p>预取值表示一个消费者线程对应的信道最大可以堆积的消息个数，即<strong>通道上允许的未确认消息的最大数量</strong>。</p>
<blockquote>
<p>类似于缓冲池，预取值最大值就是缓存池的最大值。最多只能存放预取值个数的未确认消息。</p>
</blockquote>
<p>如果不设置预取值，可能会有大量已传递但尚未处理的消息的数量堆积，导致消费者RAM消耗。</p>
<p><strong>不公平分发</strong></p>
<p>轮询方式是不管每个消费者的处理速度，给每个消费者线程轮流分发任务。</p>
<p>不公平分发是指<strong>根据每个消费者线程的处理能力，为每个消费者线程分配不同个数的消息</strong>。——能者多劳。</p>
<p>在<strong>消费者</strong>的信道上，设置Qos的值为1，就可以表示按处理能力分发：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将Qos设置为1，就是不公平分发；默认为0，表示轮询分发channel.basicQos(1); </span></span><br></pre></td></tr></table></figure>
<p>Qos的值为1时，表示根据消费者线程的处理能力分发，最多堆积一个任务。</p>
<h1>发布确认</h1>
<p>如果想要确保消息一定不会丢失，除了上面提到的<strong>队列持久化</strong>和<strong>消息持久化</strong>，还需要使用<strong>发布确认（Publisher confirm）</strong>。这三种设置保证了消息不会丢失。</p>
<p>官方文档：<a href="https://www.rabbitmq.com/tutorials/tutorial-seven-java.html">Publisher Confirms</a></p>
<h2 id="发布确认原理">发布确认原理</h2>
<p>生产者将channel设置为confirm模式，一旦channel进入<strong>confirm模式</strong>，<strong>所有在该channel上面发布的消息都会被指派一个唯一的ID（从1开始）</strong>。一旦消息被投递到所有匹配的队列之后，broker会发送一个确认给生产者。</p>
<p>生产者得知消息已经正确到达目的队列后，如果消息和队列是可持久化的，确认消息会在消息写入磁盘后发出。</p>
<blockquote>
<p>broker回传给生产者的确认消息中delivery-tag域中包含了确认消息的序列号，此外broker也可以设置basic.ack的multiple域，表示到这个序列号之前的所有消息都已经得到了处理。</p>
<p>发布确认（Publisher confirm）是broker给生产者发送的确认消息。</p>
<p>消息应答（Message acknowledgment）是消费者处理完消息发送给broker的ack确认。</p>
</blockquote>
<p><strong>confirm模式</strong>的好处在于它是异步的，发布一条消息后，生产者可以边等确认消息边发送下一条消息。消息得到确认或者丢失，生产者都会通过相应的回调方法进行处理。</p>
<h2 id="发布确认策略">发布确认策略</h2>
<h3 id="开启发布确认">开启发布确认</h3>
<p>生产者创建信道后，调用<code>confirmSelect()</code>方法即可开启发布确认模式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.confirmSelect();</span><br></pre></td></tr></table></figure>
<p>发布确认可以有单个确认、批量确认、异步确认三种方式。</p>
<h3 id="单个确认发布">单个确认发布</h3>
<p>单个确认发布，即对每一条消息进行同步确认，生产者发布一条消息后只有它被确认发布后，后续的消息才能继续发布。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">publishMessageIndividually</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;    Channel channel = RabbitMqUtils.getChannel();    <span class="comment">//信道名字使用随机的UUID    String queueName = UUID.randomUUID().toString();    channel.queueDeclare(queueName,true,false,false,null);    //开启发布确认    channel.confirmSelect();    long start = System.currentTimeMillis();    //批量发消息    for(int i=0;i&lt;1000;i++)&#123;        String message = i+&quot;&quot;;        channel.basicPublish(&quot;&quot;,queueName,null,message.getBytes());        //单个消息马上确认        boolean flag = channel.waitForConfirms();        if(flag)&#123;            System.out.println(&quot;第&quot;+i+&quot;条消息发送成功&quot;);        &#125;    &#125;    long end = System.currentTimeMillis();    System.out.println(&quot;发布1000个单独确认消息，耗时&quot;+(end-start)+&quot;ms&quot;);&#125;</span></span><br></pre></td></tr></table></figure>
<p>单个确认发布的速度是最慢的，因为要每条消息都确认一次。</p>
<h3 id="批量确认发布">批量确认发布</h3>
<p>批量确认发布是指根据批次大小确认发布，这种方式的缺点是当发生故障导致发布出现问题时，不知道哪个消息出问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量发布确认public static void publishMessageBatch() throws Exception&#123;    Channel channel = RabbitMqUtils.getChannel();    //信道名字使用随机的UUID    String queueName = UUID.randomUUID().toString();    channel.queueDeclare(queueName,true,false,false,null);    //开启发布确认    channel.confirmSelect();    long start = System.currentTimeMillis();    //批量发消息，并批量确认消息    int batchSize = 100; //每100条确认一次    for(int i=0;i&lt;1000;i++)&#123;        String message = i+&quot;&quot;;        channel.basicPublish(&quot;&quot;,queueName,null,message.getBytes());        if((i+1)%batchSize==0)&#123; //每100条消息确认一次            boolean flag = channel.waitForConfirms();            if(flag)&#123;                System.out.println(&quot;确认前&quot;+i+&quot;条数据&quot;);            &#125;        &#125;    &#125;    long end = System.currentTimeMillis();    System.out.println(&quot;发布1000个批量确认消息，耗时&quot;+(end-start)+&quot;ms&quot;);&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="异步确认发布">异步确认发布</h3>
<p>异步确认发布是效率和可靠性最高的。对于已确认消息和未确认消息，异步确认方式都能够处理。</p>
<p>异步确认发布主要是通过<code>addConfirmListener</code>方法监听确认和未确认的消息，使用哈希表记录所有发布的消息，对于成功确认的消息从哈希表中删除，剩下的是未确认的消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//异步批量确认public static void publishMessageAsync() throws Exception&#123;    Channel channel = RabbitMqUtils.getChannel();    //信道名字使用随机的UUID    String queueName = UUID.randomUUID().toString();    channel.queueDeclare(queueName,true,false,false,null);    //开启发布确认    channel.confirmSelect();    //使用哈希表记录所有消息，便于多个线程进行消息的添加和删除    /*线程安全的哈希表，适用于高并发的情况。    1.哈希表能够轻松的将序号和消息进行关联。    2.可以轻松地批量删除条目，只需要知道序号    3.支持高并发（多线程）    */    ConcurrentSkipListMap&lt;Long,String&gt; map = new ConcurrentSkipListMap&lt;&gt;();        long start = System.currentTimeMillis();    //创建消息的监听器，监听哪些消息成功了，哪些消息失败了。    //消息确认成功 回调函数    /*参数：1. 消息的标记（序号）2.是否为批量确认*/    ConfirmCallback ackCallback = (deliveryTag, multiple) -&gt;&#123;        //2.删除掉已经确认的消息，剩下的就是未确认的消息        if(multiple)&#123; //默认multiple是true，即批量确认的            //如果是批量确认的，则找到所有小于当前序号的值，并清除。这样剩下的就是未确认的消息            //headMap方法就是返回所有小于指定序号的值的map，第二个参数表示是否找出等于序号的。            ConcurrentNavigableMap&lt;Long, String&gt; navigableMap = map.headMap(deliveryTag, true);            navigableMap.clear();        &#125;else&#123;//如果不是批量确认，则只删除当前已经确认的消息即可。            map.remove(deliveryTag);        &#125;        System.out.println(&quot;确认的消息：&quot;+deliveryTag);    &#125;;    //监听确认失败的消息    ConfirmCallback nackCallback = (deliveryTag, multiple) -&gt;&#123;        //3.打印未确认的消息        System.out.println(&quot;未确认的消息：&quot;+deliveryTag);    &#125;;    /*参数：1.监听确认成功的消息 2. 监听确认失败的消息*/    channel.addConfirmListener(ackCallback,nackCallback);    //批量发消息，异步确认消息    int batchSize = 100; //每100条确认一次    for (int i = 0; i &lt; 1000; i++) &#123;        String message = &quot;消息&quot; + i;        //1.记录下所有要发送的消息        map.put(channel.getNextPublishSeqNo(),message);        //发布消息        channel.basicPublish(&quot;&quot;,queueName,null,message.getBytes());    &#125;    long end = System.currentTimeMillis();    System.out.println(&quot;发布&quot;+MESSAGE_COUNT+&quot;个异步确认消息，耗时&quot;+(end-start)+&quot;ms&quot;);&#125;</span></span><br></pre></td></tr></table></figure>
<h1>交换机</h1>
<h2 id="相关概念">相关概念</h2>
<p>生产者生产的消息不会直接发送到队列，只能将消息发送到<strong>交换机（exchange）</strong>，然后由交换机发送到队列。</p>
<p><strong>交换机</strong>的功能：①接收来自生产者的消息。②将消息推入队列。</p>
<p>交换机主要的三个类型：</p>
<ul>
<li><strong>fanout</strong>：这种类型的交换机不分析Routing Key，将消息转发到所有和该交换机绑定的队列中。用于<a href="https://www.rabbitmq.com/tutorials/tutorial-three-java.html">Publish/Subscribe模式</a>。</li>
<li><strong>direct</strong>：这类交换机需要精准匹配Routing Key，只将消息转发到指定Routing Key的队列中。用于<a href="https://www.rabbitmq.com/tutorials/tutorial-four-java.html">Routing模式</a>。</li>
<li><strong>topic</strong>：这类交换机按照一定规则匹配Routing Key，将消息转发到匹配到的队列中，通常是一组相同主题的队列。用于<a href="https://www.rabbitmq.com/tutorials/tutorial-five-java.html">Topics模式</a></li>
</ul>
<p><strong>临时队列</strong></p>
<p>创建一个随机名称的临时队列：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String queueName = channel.queueDeclare().getQueue();</span><br></pre></td></tr></table></figure>
<p><strong>绑定（bindings）</strong></p>
<p>binding是指exchange和queue之间的关系，将exchange和queue进行绑定。</p>
<p>其中一个交换机和一个队列之间可以有多个binding key</p>
<h2 id="Publish-Subscribe">Publish/Subscribe</h2>
<p><a href="https://www.rabbitmq.com/tutorials/tutorial-three-java.html">发布订阅模式</a>是使用的扇出（fanout）类型的交换机。</p>
<p>交换机会<strong>将消息推送至所有和他绑定的队列，不会匹配Routing Key</strong>。无论绑定的Routing Key是什么值，都会发送到所有和其绑定的队列中。</p>
<p><img src="C:%5CUsers%5CKangshitao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211019201626154.png" alt="Publish/Subscribe"></p>
<p><strong>实例</strong></p>
<p>如上图所示，一个交换机，两个队列。</p>
<p>生产者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmitLog</span> </span>&#123;    <span class="comment">//交换机名字为logs    public static final String EXCHANGE_NAME = &quot;logs&quot;;    public static void main(String[] args) throws IOException &#123;        Channel channel = RabbitMqUtils.getChannel();        //声明为fanout类型，可以用枚举类型或者字符串。        //channel.exchangeDeclare(EXCHANGE_NAME,&quot;fanout&quot;);        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.FANOUT);        Scanner scanner = new Scanner(System.in);        while(scanner.hasNext())&#123;            String message = scanner.next();            //绑定信息为空            channel.basicPublish(EXCHANGE_NAME,&quot;&quot;,null,message.getBytes(&quot;UTF-8&quot;));            System.out.println(&quot;生产者发出消息：&quot;+message);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>消费者1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveLogs01</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;        Channel channel = RabbitMqUtils.getChannel();        <span class="comment">/*声明临时队列        临时队列的队列名称是随机的        当消费者断开与队列的连接后，队列会被自动删除。         */</span>        String queueName = channel.queueDeclare().getQueue();        <span class="comment">/*        将队列和交换机绑定 binding，routingKey为空         */</span>        channel.queueBind(queueName,EXCHANGE_NAME,<span class="string">&quot;&quot;</span>);        DeliverCallback deliverCallback = (consumerTag, message)-&gt;&#123;            System.out.println(<span class="string">&quot;消费者1控制台打印接收到的消息：&quot;</span>+<span class="keyword">new</span> String(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));        &#125;;        CancelCallback cancelCallback = consumerTag-&gt;&#123;&#125;;        channel.basicConsume(queueName,deliverCallback,cancelCallback);    &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>消费者2的代码和消费者1相同，会生成另一个随机名称的临时队列。</p>
<p>这样，当生产者每次发送一条消息，消费者1和消费者2都能接收到。</p>
<h2 id="Routing">Routing</h2>
<p><a href="https://www.rabbitmq.com/tutorials/tutorial-four-java.html">Routing模式</a>使用的是direct类型交换机，这种模式下，交换机需要精准匹配Routing Key，只将消息转发到指定Routing Key的队列中。</p>
<p><img src="C:%5CUsers%5CKangshitao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211019204129471.png" alt="Routing"></p>
<p>如图，交换机X绑定了Q1和Q2两个队列，其中和Q1之间的Binding Key为<code>orange</code>，和Q2的Binding Key包括<code>black</code>和<code>green</code>两个。</p>
<p>Routing Key为<code>orange</code>的消息会被推送到Q1队列。Routing Key为<code>black</code>和<code>green</code>的消息会被推送到Q2队列。</p>
<blockquote>
<p>多重绑定：允许不同队列和交换机之间的Binding Key是相同的，这种情况下效果和Publish/Subscribe模式相同。</p>
</blockquote>
<p><strong>实现</strong></p>
<p>生产者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectProducer</span> </span>&#123;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">&quot;X&quot;</span>;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;        Channel channel = RabbitMqUtils.getChannel();        <span class="comment">//声明交换机,类型为direct        channel.exchangeDeclare(EXCHANGE_NAME,&quot;direct&quot;);                Scanner scanner = new Scanner(System.in);        while(scanner.hasNext())&#123;            String message = scanner.next();            //当Bingding Key取不同值时，会根据情况发送的相应的队列。            channel.basicPublish(EXCHANGE_NAME,&quot;orange&quot;,null,message.getBytes(&quot;UTF-8&quot;));//            channel.basicPublish(EXCHANGE_NAME,&quot;black&quot;,null,message.getBytes(&quot;UTF-8&quot;));//            channel.basicPublish(EXCHANGE_NAME,&quot;green&quot;,null,message.getBytes(&quot;UTF-8&quot;));            System.out.println(&quot;Direct类型，生产者发出消息：&quot;+message);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>消费者1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectConsumer01</span> </span>&#123;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">&quot;X&quot;</span>;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">&quot;Q1&quot;</span>;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BINGDING_NAME = <span class="string">&quot;orange&quot;</span>;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;        Channel channel = RabbitMqUtils.getChannel();        <span class="comment">//声明交换机,类型为direct        channel.exchangeDeclare(EXCHANGE_NAME,&quot;direct&quot;);        //声明名为Q1的队列        channel.queueDeclare(QUEUE_NAME,false,false,false,null);        //将队列和交换机绑定        channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,BINGDING_NAME);        DeliverCallback deliverCallback = (consumerTag, message)-&gt;&#123;            System.out.println(&quot;C1接收到消息：&quot;+new String(message.getBody(),&quot;UTF-8&quot;));        &#125;;        CancelCallback cancelCallback = consumerTag-&gt;&#123;&#125;;        channel.basicConsume(QUEUE_NAME,deliverCallback,cancelCallback);    &#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>消费者2和消费者1类似，不同的是有两个Bingding：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多重绑定，一个channel和交换机有两个绑定,两个不同的routing keychannel.queueBind(&quot;Q2&quot;,&quot;X&quot;,&quot;black&quot;);channel.queueBind(&quot;Q2&quot;,&quot;X&quot;,&quot;green&quot;);</span></span><br></pre></td></tr></table></figure>
<p>这样，当发送消息的Routing Key为<code>orange</code>时，消息会被推送到Q1，Routing Key为<code>black</code>或<code>green</code>时，消息被推送到Q2。</p>
<h2 id="Topics">Topics</h2>
<p><a href="https://www.rabbitmq.com/tutorials/tutorial-five-java.html">Topics</a>模式使用的是Topic类型的交换机，队列可以匹配一定规则的多个Routing Key。</p>
<p>Topic模式的Routing Key必须符合一定的要求：<strong>必须是一个单词列表，以<code>.</code>号分开</strong>，单词可以是任意的，比如<code>stock.usd.nyse</code>, <code>nyse.vmw</code>, <code>quick.orange.rabbit</code>等。单词列表最多为255个字节。</p>
<p><code>*</code>号可以代替一个单词。</p>
<p><code>#</code>号可以代替0个或多个单词。</p>
<p><img src="C:%5CUsers%5CKangshitao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211019213420569.png" alt="Topics"></p>
<p>如上图所示，交换机X和Q1的Binding Key为<code>*.orange.*</code>，X和Q2的Binding Key为<code>*.*.rabbit</code>和<code>lazy.#</code>。</p>
<p>一些案例：</p>
<p>①<code>quick.orange.rabbit</code>：Q1、Q2接收到消息。</p>
<p>②<code>quick.orange.rabbit</code> ： Q1、Q2接收到消息。</p>
<p>③<code>lazy.orange.elephant</code>：Q1、Q2 接收到消息。</p>
<p>④<code>quick.orange.fox</code>：Q1 接收到消息。</p>
<p>⑤<code>lazy.brown.fox</code>：Q2 接收到消息。</p>
<p>⑥<code>lazy.pink.rabbit</code> ：Q2 接收一次消息，虽然两种绑定都匹配，但只接收一次。</p>
<p>⑦<code>quick.brown.fox</code> ：不匹配任何绑定，被丢弃。</p>
<p>⑧<code>quick.orange.male.rabbit</code> ：是四个单词，不匹配任何绑定，被丢弃。</p>
<p>⑨<code>lazy.orange.male.rabbit</code> ：是四个单词，Q2接收到消息。</p>
<p><strong>实现</strong></p>
<p>声明交换机：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.exchangeDeclare(<span class="string">&quot;X&quot;</span>,<span class="string">&quot;topic&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>队列Q1绑定：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.queueBind(<span class="string">&quot;Q1&quot;</span>,<span class="string">&quot;X&quot;</span>,<span class="string">&quot;*.orange.*&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>队列Q2绑定：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.queueBind(<span class="string">&quot;Q1&quot;</span>,<span class="string">&quot;X&quot;</span>,<span class="string">&quot;*.*.rabbit&quot;</span>);channel.queueBind(<span class="string">&quot;Q1&quot;</span>,<span class="string">&quot;X&quot;</span>,<span class="string">&quot;lazy.#&quot;</span>);</span><br></pre></td></tr></table></figure>
<h1>死信队列</h1>
<p>关于死信队列的官方文档：<a href="https://www.rabbitmq.com/dlx.html">死信队列</a></p>
<p>队列中的消息如果发生以下情况就会变成<strong>死信（Dead Letter）</strong>：</p>
<ul>
<li>消息被拒绝（<code>basic.reject</code>或<code>basic.nack</code>），并且<code>requeue</code>参数为<code>false</code></li>
<li>消息TTL超时，即消息过期。</li>
<li>队列长度超过最大限制。</li>
</ul>
<blockquote>
<p>队列过期不会导致消息变为死信。</p>
</blockquote>
<p>死信交换机（Dead Letter eXchanges，DLXs）是正常的交换机，它可以将Dead Letter转发给死信队列，进一步处理。</p>
<p>如图，正常情况下，消息通过<code>normal_exchange</code>推送到<code>normal_queue</code>，然后被<code>C1</code>消费；如果消息变为死信，<code>normal_queue</code>会将死信转发给死信交换机<code>DLX</code>，<code>DLX</code>将死信推送给死信队列<code>dead_letter_queue</code>，然后被<code>C2</code>消费。</p>
<p><img src="C:%5CUsers%5CKangshitao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211019222750171.png" alt="死信队列"></p>
<p><strong>实现</strong></p>
<p>生产者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span>  </span>&#123;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NORMAL_EXCHANGE=<span class="string">&quot;normal_exchange&quot;</span>;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NORMAL_ROUTING_KEY=<span class="string">&quot;normal_routing_key&quot;</span>;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;        Channel channel = RabbitMqUtils.getChannel();        channel.exchangeDeclare(NORMAL_EXCHANGE,<span class="string">&quot;direct&quot;</span>);        <span class="comment">//设置过期时间为10s        //AMQP.BasicProperties properties = new AMQP.BasicProperties().builder().expiration(&quot;10000&quot;).build();        //模拟发10条消息        for (int i = 0; i &lt; 10; i++) &#123;            String message = String.valueOf(i);            //超过ttl变为死信            //channel.basicPublish(NORMAL_EXCHANGE,NORMAL_BINDING,properties,message.getBytes(&quot;UTF-8&quot;));             //超过最大长度变为死信            //channel.basicPublish(NORMAL_EXCHANGE,NORMAL_BINDING,null,message.getBytes(&quot;UTF-8&quot;));             channel.basicPublish(NORMAL_EXCHANGE,NORMAL_ROUTING_KEY,null,message.getBytes(&quot;UTF-8&quot;)); //消息被拒绝变为死信            System.out.println(&quot;生产者发出消息：&quot;+message);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>消费者C1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer01</span> </span>&#123;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NORMAL_EXCHANGE=<span class="string">&quot;normal_exchange&quot;</span>;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_EXCHANGE=<span class="string">&quot;dead_exchange&quot;</span>;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NORMAL_QUEUE=<span class="string">&quot;normal_queue&quot;</span>;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_QUEUE=<span class="string">&quot;dead_queue&quot;</span>;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NORMAL_ROUTING_KEY=<span class="string">&quot;normal_routing_key&quot;</span>;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_ROUTING_KEY=<span class="string">&quot;dead_routing_key&quot;</span>;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;        Channel channel = RabbitMqUtils.getChannel();        <span class="comment">//声明普通交换机和死信交换机，类型均为direct        channel.exchangeDeclare(NORMAL_EXCHANGE,&quot;direct&quot;);        channel.exchangeDeclare(DEAD_EXCHANGE,&quot;direct&quot;);        //声明正常队列。正常队列需要将死信消息转发到死信交换机，需要用到map参数        Map&lt;String, Object&gt; arguments = new HashMap&lt;&gt;();        //过期时间,比如为10s；也可以在生产者发送消息的时候设置过期时间        //arguments.put(&quot;x-message-ttl&quot;,10000);        //指定队列的最大长度，一旦消息个数超出这个长度，就会成为死信        //arguments.put(&quot;x-max-length&quot;,6);        //设置死信交换机，即死信消息将要转发到的交换机        arguments.put(&quot;x-dead-letter-exchange&quot;,DEAD_EXCHANGE);        //设置死信routingkey,死信消息通过此路由键发送到死信队列。        arguments.put(&quot;x-dead-letter-routing-key&quot;,DEAD_ROUTING_KEY);        channel.queueDeclare(NORMAL_QUEUE,false,false,false,arguments);        channel.queueBind(NORMAL_QUEUE,NORMAL_EXCHANGE,NORMAL_ROUTING_KEY); //绑定        //声明死信队列        channel.queueDeclare(DEAD_QUEUE,false,false,false,null);        channel.queueBind(DEAD_QUEUE,DEAD_EXCHANGE,DEAD_ROUTING_KEY); //绑定        DeliverCallback deliverCallback = (consumerTag, message)-&gt;&#123;            //模拟拒绝消息            String msg = new String(message.getBody(),&quot;UTF-8&quot;);            if(Integer.parseInt(msg)%2==0)&#123;                System.out.println(msg+&quot;被拒绝&quot;);                //拒绝消息                channel.basicReject(message.getEnvelope().getDeliveryTag(),false);            &#125;else&#123;                System.out.println(&quot;C1打印接收到的消息：&quot;+msg);                //手动应答消息                channel.basicAck(message.getEnvelope().getDeliveryTag(),false);            &#125;        &#125;;        CancelCallback cancelCallback = consumerTag-&gt;&#123;&#125;;        //模拟拒绝消息时，要关闭自动应答。        channel.basicConsume(NORMAL_QUEUE,false,deliverCallback,cancelCallback);    &#125;&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>疑问：为什么要在正常队列中设置<code>x-dead-letter-routing-key</code>? 不设置会导致死信队列收不到消息，但是下文中也设置了死信队列和DLX和Routing Key，二者如果不一致也会导致死信队列收不到死信消息。</p>
</blockquote>
<p>消费者C2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C2只需要从死信队列中接收消息即可public class Consumer02 &#123;    public static final String DEAD_QUEUE=&quot;dead_queue&quot;;    public static void main(String[] args) throws IOException &#123;        Channel channel = RabbitMqUtils.getChannel();        DeliverCallback deliverCallback = (consumerTag, message)-&gt;&#123;            System.out.println(&quot;C2打印接收到的消息：&quot;+new String(message.getBody(),&quot;UTF-8&quot;));        &#125;;        CancelCallback cancelCallback = consumerTag-&gt;&#123;&#125;;        channel.basicConsume(DEAD_QUEUE,true,deliverCallback,cancelCallback);    &#125;&#125;</span></span><br></pre></td></tr></table></figure>
<h1>延迟队列</h1>
]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>镜像制作--RabbitMQ</title>
    <url>/2022/03/10/%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C-RabbitMQ/</url>
    <content><![CDATA[<p>技术栈：</p>
<p>OpenStack+Cloudbreak+Ambari+RabbitMQ</p>
<h1>手动安装RabbitMQ</h1>
<h2 id="单节点">单节点</h2>
<p>1.<strong>运行Package Cloud提供的RabbitMQ Server快速安装脚本</strong></p>
<p>脚本详情：<a href="https://packagecloud.io/rabbitmq/rabbitmq-server/install">https://packagecloud.io/rabbitmq/rabbitmq-server/install</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -s https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220224095339742.png" alt="image-20220224095339742"></p>
<p>2.<strong>运行Package Cloud提供Erlang环境快速安装脚本</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -s https://packagecloud.io/install/repositories/rabbitmq/erlang/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220224095511161.png" alt="image-20220224095511161"></p>
<p>3.安装Erlang和rabbitmq-server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安装erlang</span><br><span class="line">yum  -y install erlang</span><br><span class="line"></span><br><span class="line">安装rabbitmq-server</span><br><span class="line">yum -y install rabbitmq-server</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220224095911660.png" alt="image-20220224095911660"></p>
<p>4.启动web服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安装web管理插件</span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>
<p>此时访问web：<a href="http://10.6.8.141:15672/">http://10.6.8.141:15672/</a></p>
<p>默认用户guest的权限不足</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220224100657503.png" alt="image-20220224100657503"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建新用户</span><br><span class="line">rabbitmqctl add_user admin 123456</span><br><span class="line">赋予权限</span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br><span class="line">rabbitmqctl set_permissions -p / admin “.*” “.*” “.*”</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220224100914154.png" alt="image-20220224100914154"></p>
<h2 id="集群模式安装（普通集群）">集群模式安装（普通集群）</h2>
<p>来自https://blog.51cto.com/u_11134648/2155934</p>
<p>介绍：<a href="https://blog.csdn.net/zhangkaixuan456/article/details/122303824">https://blog.csdn.net/zhangkaixuan456/article/details/122303824</a></p>
<p>搭建集群时，节点中的 Erlang Cookie 值要一致，默认情况下，文件在 /var/lib/rabbitmq/.erlang.cookie，我们在用 docker 创建 RabbitMQ 容器时，可以为之设置相应的 Cookie 值。</p>
<p>RabbitMQ 是通过主机名来连接服务，必须保证各个主机名之间可以 ping 通。可以通过编辑 /etc/hosts 来手工添加主机名和 IP 对应关系。如果主机名 ping 不通，RabbitMQ 服务启动会失败。</p>
<h3 id="1-前期准备">1.前期准备</h3>
<table>
<thead>
<tr>
<th>节点</th>
<th>hostname</th>
</tr>
</thead>
<tbody>
<tr>
<td>10.6.8.141</td>
<td>rabbitmq-node-1</td>
</tr>
<tr>
<td>10.6.8.212</td>
<td>rabbitmq-node-2</td>
</tr>
<tr>
<td>10.6.8.215</td>
<td>rabbitmq-node-3</td>
</tr>
</tbody>
</table>
<p><strong>关闭防火墙</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 关闭防火墙服务</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line"># 开机禁止防火墙启动</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>
<p><strong>设置hostname</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入编辑模式，然后不同服务器设置不同的hostname，设置好后使用重启命令reboot重启服务器才生效</span><br><span class="line">vi /etc/hostname</span><br><span class="line"></span><br><span class="line"># 查看设置好的hostname</span><br><span class="line">cat /etc/hostname </span><br></pre></td></tr></table></figure>
<p><strong>3.修改后重启服务器</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>4.<strong>设置hosts文件</strong></p>
<p>让3台服务器能互通，3台服务器配置相同</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line">查看设置好的hosts</span><br><span class="line">cat /etc/hosts</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220225161247679.png" alt="image-20220225161247679"></p>
<p>使用ping 命令检查是否能正常通讯</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping rabbitmq-node-1</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220225161427851.png" alt="image-20220225161427851"></p>
<h3 id="2-同步-erlang-cookie内容">2.同步.erlang.cookie内容</h3>
<ul>
<li><code>.erlang.cookie</code>文件内容相当于<code>rabbitmq</code>集群通讯的秘钥，必须保持一致</li>
<li>把<code>rabbitmq-node-1</code>服务器的<code>.erlang.cookie</code>复制到另外2台</li>
<li><code>.erlang.cookie</code>文件路径<code> /var/lib/rabbitmq/.erlang.cookie</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看rabbitmq-node-1的秘钥</span><br><span class="line">cat /var/lib/rabbitmq/.erlang.cookie</span><br><span class="line"></span><br><span class="line">在node-2，node-3节点修改秘钥跟node-1相同</span><br><span class="line">vim /var/lib/rabbitmq/.erlang.cookie</span><br><span class="line"></span><br><span class="line">修改完之后，通过wq!强制退出</span><br></pre></td></tr></table></figure>
<h3 id="配置rabbitmq普通集群">配置rabbitmq普通集群</h3>
<p><strong>启动三台服务器</strong></p>
<p>进入rabbitmq-node-2节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 停止rabbitmq</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line"></span><br><span class="line">#重置</span><br><span class="line">rabbitmqctl reset</span><br><span class="line"></span><br><span class="line"># 加入集群，注意：--ram是内存模式 --disc是磁盘模式(默认)</span><br><span class="line">rabbitmqctl join_cluster --ram rabbit@rabbitmq-node-1</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure>
<p>rabbitmq-node-3中也是相同的操作</p>
<p>查看集群状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl cluster_status</span><br></pre></td></tr></table></figure>
<h2 id="卸载集群中的某个节点">卸载集群中的某个节点</h2>
<p>方法一：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># on rabbit3</span></span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line"><span class="comment"># =&gt; Stopping node rabbit@rabbit3 ...done.</span></span><br><span class="line"></span><br><span class="line">rabbitmqctl reset</span><br><span class="line"><span class="comment"># =&gt; Resetting node rabbit@rabbit3 ...done.</span></span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"><span class="comment"># =&gt; Starting node rabbit@rabbit3 ...done.</span></span><br></pre></td></tr></table></figure>
<p>方法二：</p>
<p>目标节点要先stop_app</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl forget 目标节点</span><br></pre></td></tr></table></figure>
<h2 id="常用的命令">常用的命令</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">启动RabbitMQ服务：systemctl start rabbitmq-server.service</span><br><span class="line"></span><br><span class="line">查看RabbitMQ服务状态：systemctl status rabbitmq-server.service</span><br><span class="line"></span><br><span class="line">查看RabbitMQ状态：rabbitmqctl status</span><br><span class="line"></span><br><span class="line">停止RabbitMQ服务：systemctl stop rabbitmq-server.service</span><br><span class="line"></span><br><span class="line">重启RabbitMQ服务：systemctl restart rabbitmq-server.service</span><br><span class="line"></span><br><span class="line">查看RabbitMQ用户列表：rabbitmqctl list_users</span><br><span class="line"></span><br><span class="line">删除RabbitMQ用户：rabbitmqctl delete_user username</span><br><span class="line"></span><br><span class="line">修改RabbitMQ用户密码：rabbitmqctl oldPassword Username newPassword</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看集群状态：</span><br><span class="line">rabbitmqctl cluster_status</span><br></pre></td></tr></table></figure>
<h2 id="卸载RabbitMQ">卸载RabbitMQ</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看rabbitmq安装的相关列表</span><br><span class="line">yum list | grep rabbitmq</span><br><span class="line"></span><br><span class="line"># 卸载rabbitmq已安装的相关内容</span><br><span class="line">yum -y remove rabbitmq-server.noarch</span><br><span class="line"></span><br><span class="line"># 查看erlang安装的相关列表</span><br><span class="line">yum list | grep erlang</span><br><span class="line"></span><br><span class="line"># 卸载erlang已安装的相关内容</span><br><span class="line">yum -y remove erlang-*</span><br><span class="line">yum remove erlang.x86_64（当卸载不干净时执行这个）</span><br><span class="line"></span><br><span class="line"># 部分相关文件夹大家看着删除，我就是记录一下</span><br><span class="line">rm -rf /usr/lib64/erlang </span><br><span class="line">rm -rf /var/lib/rabbitmq</span><br><span class="line">rm -rf /usr/local/erlang</span><br><span class="line">rm -rf /usr/local/rabbitmq</span><br></pre></td></tr></table></figure>
<h1>自定义服务脚本编写</h1>
<p>该阶段主要是通过Ambari自定义脚本的方式，实现安装RabbitMQ。</p>
<p>用户可以选择单机还是集群模式。</p>
<p>简单来说：就是模拟RabbitMQ的安装过程，实现自动安装部署。</p>
<p>Ambari基础可以看这个：<a href="http://wenk207.top/2021/12/30/Ambari%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1/">http://wenk207.top/2021/12/30/Ambari自定义服务/</a></p>
<p>下面将以创建文件的顺序，对自定义过程进行介绍。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">自定义服务的路径</span><br><span class="line">/var/lib/ambari-server/resources/stacks/HDP/3.1/services</span><br><span class="line"></span><br><span class="line">修改完成之后，会自动重启（不用管报错）：</span><br><span class="line">ambari-server stop</span><br></pre></td></tr></table></figure>
<h2 id="metainfo">metainfo</h2>
<p>RabbitMQ集群模式下，主要分为两种类型。ram（内存）和disc（磁盘），要求必须至少有一个disc，加入时，如果不指定类型，默认是disc。</p>
<p>我们分了三个角色，DISK 1，DISK2和MEM。让DISK1作为集群的第一个节点，让其他节点加入到他里面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">metainfo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">schemaVersion</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">schemaVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">services</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--声明服务的名称，这部分Ambari自定义服务的时候会展示出来--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>RABBITMQ<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">displayName</span>&gt;</span>RabbitMQ<span class="tag">&lt;/<span class="name">displayName</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">comment</span>&gt;</span>RabbitMQ是使用Erlang语言来编写的开源消息代理队列服务器<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">components</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!--定义节点中的组件--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">component</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--在python脚本中，可以根据这个name，查找是此类型的主机--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>RABBITMQ_SERVER_DISK_1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--在ui页面展示这个名字--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">displayName</span>&gt;</span>RabbitMQ Server Disk<span class="tag">&lt;/<span class="name">displayName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">category</span>&gt;</span>MASTER<span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--定义数量--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cardinality</span>&gt;</span>1<span class="tag">&lt;/<span class="name">cardinality</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">commandScript</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--此节点安装，启动，停止用到的服务脚本--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">script</span>&gt;</span>scripts/rabbitmq_server.py<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">scriptType</span>&gt;</span>PYTHON<span class="tag">&lt;/<span class="name">scriptType</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">timeout</span>&gt;</span>600<span class="tag">&lt;/<span class="name">timeout</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">commandScript</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">component</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>RABBITMQ_SERVER_DISK_2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">displayName</span>&gt;</span>RabbitMQ Server Disk<span class="tag">&lt;/<span class="name">displayName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">category</span>&gt;</span>MASTER<span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cardinality</span>&gt;</span>0+<span class="tag">&lt;/<span class="name">cardinality</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">commandScript</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">script</span>&gt;</span>scripts/rabbitmq_server.py<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">scriptType</span>&gt;</span>PYTHON<span class="tag">&lt;/<span class="name">scriptType</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">timeout</span>&gt;</span>600<span class="tag">&lt;/<span class="name">timeout</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">commandScript</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">component</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>RABBITMQ_SERVER_MEM<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">displayName</span>&gt;</span>RabbitMQ Server Mem<span class="tag">&lt;/<span class="name">displayName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">category</span>&gt;</span>MASTER<span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cardinality</span>&gt;</span>0+<span class="tag">&lt;/<span class="name">cardinality</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">commandScript</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">script</span>&gt;</span>scripts/rabbitmq_server.py<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">scriptType</span>&gt;</span>PYTHON<span class="tag">&lt;/<span class="name">scriptType</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">timeout</span>&gt;</span>600<span class="tag">&lt;/<span class="name">timeout</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">commandScript</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">components</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">osSpecifics</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">osSpecific</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">osFamily</span>&gt;</span>any<span class="tag">&lt;/<span class="name">osFamily</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">osSpecific</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">osSpecifics</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">            <span class="comment">&lt;!--声明配置类--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration-dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>rabbitmq-env<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>rabbitmq-management-plugin<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">config-type</span>&gt;</span>rabbitmq<span class="tag">&lt;/<span class="name">config-type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration-dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">restartRequiredAfterChange</span>&gt;</span>true<span class="tag">&lt;/<span class="name">restartRequiredAfterChange</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--关联快速链接--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">quickLinksConfigurations</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">quickLinksConfiguration</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">fileName</span>&gt;</span>quicklinks.json<span class="tag">&lt;/<span class="name">fileName</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">default</span>&gt;</span>true<span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">quickLinksConfiguration</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">quickLinksConfigurations</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">services</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">metainfo</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203100934477.png" alt="image-20220310092822671"></p>
<h2 id="role-command-order-json">role_command_order.json</h2>
<p>在这里可以规定启动，终止的顺序。</p>
<p>要求，先启动DISK，后启动MEM。</p>
<p>先停止DISK，后停止MEM</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;general_deps&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;_comment&quot;</span> : <span class="string">&quot;dependencies for rabbitmq&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;RABBITMQ_SERVER_DISK_2-START&quot;</span>: [<span class="string">&quot;RABBITMQ_SERVER_DISK_1-START&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;RABBITMQ_SERVER_MEM-START&quot;</span>: [<span class="string">&quot;RABBITMQ_SERVER_DISK_2-START&quot;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;RABBITMQ_SERVER_DISK_2-STOP&quot;</span>: [<span class="string">&quot;RABBITMQ_SERVER_MEM-STOP&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;RABBITMQ_SERVER_DISK_1-STOP&quot;</span>: [<span class="string">&quot;RABBITMQ_SERVER_DISK_2-STOP&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="quicklinks-json">quicklinks.json</h2>
<p>快速链接的配置。修改的话，只修改component_name就可以，line 15。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;default quick links configuration&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;configuration&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;HTTP_ONLY&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;links&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;rabbitmq_management&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;RabbitMQ Management&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;requires_user_name&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;component_name&quot;</span>: <span class="string">&quot;RABBITMQ_SERVER_DISK_1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;%@://%@:%@&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;port&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;http_property&quot;</span>: <span class="string">&quot;port&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;http_default_port&quot;</span>: <span class="string">&quot;15672&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;https_property&quot;</span>: <span class="string">&quot;port&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;https_default_port&quot;</span>: <span class="string">&quot;15672&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;regex&quot;</span>: <span class="string">&quot;^(\\d+)&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;site&quot;</span>: <span class="string">&quot;rabbitmq-management-plugin&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置文件：rabbitmq-env">配置文件：rabbitmq-env</h2>
<p>rabbitmq-env.xml</p>
<p>在配置文件中配置RabbitMQ的重要参数。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--声明配置变量，这个变量可以在params中得到--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>5672<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Port<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>RabbitMQ Listen Port<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value-attributes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>TEXT<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value-attributes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>pid_file<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/var/run/rabbitmq<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Pid File<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>RabbitMQ Pid File<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value-attributes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>TEXT<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value-attributes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>admin_username<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Admin Username<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value-attributes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>TEXT<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value-attributes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>admin_password<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>drowssap<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Admin Password<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Default value is drowssap.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value-attributes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>PASSWORD<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value-attributes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>log_base<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/hadoopfs/fs1/rabbitmq_log<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Log Base<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>RabbitMQ Log Base<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value-attributes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>TEXT<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value-attributes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mnesia_base<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/hadoopfs/fs1/mnesia<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Mnesia Base<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>RabbitMQ MNESIA BASE<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value-attributes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>TEXT<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value-attributes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="模板文件">模板文件</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmq-env.conf.j2</span><br><span class="line"></span><br><span class="line">生成配置文件时，可以根据这个模板文件创建</span><br><span class="line"></span><br><span class="line">这里&#123;&#123;&#125;&#125;包裹的是params中的变量，params在后面</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="line"># contributor license agreements.  See the NOTICE file distributed with</span><br><span class="line"># this work for additional information regarding copyright ownership.</span><br><span class="line"># The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="line"># (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class="line"># the License.  You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line">#</span><br><span class="line">#  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">#  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">#  See the License for the specific language governing permissions and</span><br><span class="line">#  limitations under the License.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NODE_PORT=&#123;&#123;nodePort&#125;&#125;</span><br><span class="line">CONFIG_FILE=/etc/rabbitmq/rabbitmq</span><br><span class="line">LOG_BASE=&#123;&#123;logBase&#125;&#125;</span><br><span class="line">MNESIA_BASE=&#123;&#123;mnesiaBase&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="服务控制脚本（Python）">服务控制脚本（Python）</h2>
<h3 id="params">params</h3>
<p>作用：定义重用的变量，可以从配置类中取值，也可以获取当且主机名等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> resource_management.libraries.script <span class="keyword">import</span> Script</span><br><span class="line"><span class="keyword">from</span> resource_management <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义配置对象，可以从配置文件中取值</span></span><br><span class="line">config = Script.get_config()</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置用户</span></span><br><span class="line">rabbitmq_user = <span class="string">&quot;rabbitmq&quot;</span></span><br><span class="line">rabbitmq_group = <span class="string">&quot;rabbitmq&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rabbitmq.config</span></span><br><span class="line">listeners = config[<span class="string">&#x27;configurations&#x27;</span>][<span class="string">&#x27;rabbitmq&#x27;</span>][<span class="string">&#x27;listeners&#x27;</span>]</span><br><span class="line">rabbitmqClusterName = config[<span class="string">&#x27;configurations&#x27;</span>][<span class="string">&#x27;rabbitmq&#x27;</span>][<span class="string">&#x27;cluster_name&#x27;</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">#获取当前主机节点</span></span><br><span class="line">current_hostname = socket.getfqdn()</span><br><span class="line"><span class="comment">#获取rabbitmq_server_disk_1_hosts类型的主机，类型名跟metainfo.xml中配置的相同，但是是小写的。</span></span><br><span class="line">rabbitmq_server_disk_1_hosts = default(<span class="string">&quot;/clusterHostInfo/rabbitmq_server_disk_1_hosts</span></span><br><span class="line"><span class="string">&quot;</span>, [])</span><br><span class="line">rabbitmq_server_disk_2_hosts = default(<span class="string">&quot;/clusterHostInfo/rabbitmq_server_disk_2_hosts</span></span><br><span class="line"><span class="string">&quot;</span>, [])</span><br><span class="line">rabbitmq_server_mem_hosts = default(<span class="string">&quot;/clusterHostInfo/rabbitmq_server_mem_hosts&quot;</span>, [])</span><br><span class="line"></span><br><span class="line">rabbitmq_server_mem_hosts.sort()</span><br><span class="line">rabbitmq_cluster_master_host = rabbitmq_server_disk_1_hosts[<span class="number">0</span>].split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#all hosts input into hostsStr(list)</span></span><br><span class="line">hosts_all=[]</span><br><span class="line">hosts_all.extend(rabbitmq_server_disk_1_hosts)</span><br><span class="line">hosts_all.extend(rabbitmq_server_disk_2_hosts)</span><br><span class="line">hosts_all.extend(rabbitmq_server_mem_hosts)</span><br><span class="line">hostsStr=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> host <span class="keyword">in</span> hosts_all:</span><br><span class="line">    host_str = socket.gethostbyname(host) + <span class="string">&quot; &quot;</span> + host.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;\n&quot;</span></span><br><span class="line">    hostsStr.append(host_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#rabbitmq_env.conf</span></span><br><span class="line"><span class="comment">#nodeIpAddress = config[&#x27;configurations&#x27;][&#x27;rabbitmq-env&#x27;][&#x27;listen_interface&#x27;]</span></span><br><span class="line">nodePort = config[<span class="string">&#x27;configurations&#x27;</span>][<span class="string">&#x27;rabbitmq-env&#x27;</span>][<span class="string">&#x27;port&#x27;</span>]</span><br><span class="line"></span><br><span class="line">adminUsername = config[<span class="string">&#x27;configurations&#x27;</span>][<span class="string">&#x27;rabbitmq-env&#x27;</span>][<span class="string">&#x27;admin_username&#x27;</span>]</span><br><span class="line">adminPassword = config[<span class="string">&#x27;configurations&#x27;</span>][<span class="string">&#x27;rabbitmq-env&#x27;</span>][<span class="string">&#x27;admin_password&#x27;</span>]</span><br><span class="line"></span><br><span class="line">logBase = config[<span class="string">&#x27;configurations&#x27;</span>][<span class="string">&#x27;rabbitmq-env&#x27;</span>][<span class="string">&#x27;log_base&#x27;</span>]</span><br><span class="line">mnesiaBase = config[<span class="string">&#x27;configurations&#x27;</span>][<span class="string">&#x27;rabbitmq-env&#x27;</span>][<span class="string">&#x27;mnesia_base&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="status-params-py">status_params.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">rabbit service params</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> resource_management <span class="keyword">import</span> *</span><br><span class="line">config = Script.get_config()</span><br><span class="line"><span class="comment">#定义pid文件所在的位置</span></span><br><span class="line">rabbitmq_pid_dir = <span class="string">&quot;/var/run/rabbitmq&quot;</span></span><br><span class="line">rabbitmq_server_pid_file = <span class="string">&quot;&#123;0&#125;/rabbitmq_server.pid&quot;</span>.<span class="built_in">format</span>(rabbitmq_pid_dir)</span><br></pre></td></tr></table></figure>
<h3 id="rabbitmq-server-py">rabbitmq_server.py</h3>
<p>定义服务的安装，启动，停止和配置。</p>
<p>他是通过操作pid文件，然后读取pid文件中的数据，从而知道RabbitMQ程序的状态。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rabbitmq_commands <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> resource_management <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"><span class="keyword">import</span> commands</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RabbitmqServer</span>(<span class="params">Script</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">install</span>(<span class="params">self, env</span>):</span></span><br><span class="line">        <span class="keyword">import</span> params</span><br><span class="line">        <span class="keyword">import</span> status_params</span><br><span class="line">        env.set_params(params)</span><br><span class="line">        env.set_params(status_params)</span><br><span class="line">        create_user(params)</span><br><span class="line"></span><br><span class="line">        add_hosts(params)</span><br><span class="line">        check_log_mnesia_base(params)</span><br><span class="line">        self.configure(env)</span><br><span class="line">     	<span class="comment">#Directory可以用于文件的相关配置，在这里是生成pid文件</span></span><br><span class="line">        Directory(status_params.rabbitmq_pid_dir,</span><br><span class="line">           mode=0755,</span><br><span class="line">           cd_access=<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">           owner=params.rabbitmq_user,</span><br><span class="line">           group=params.rabbitmq_group,</span><br><span class="line">           create_parents=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">configure</span>(<span class="params">self, env</span>):</span></span><br><span class="line">        <span class="keyword">import</span> params</span><br><span class="line">        env.set_params(params)</span><br><span class="line">        configure_rabbitmq()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self, env</span>):</span></span><br><span class="line">        <span class="keyword">import</span> params</span><br><span class="line">        <span class="keyword">import</span> status_params</span><br><span class="line">        env.set_params(params)</span><br><span class="line">        env.set_params(status_params)</span><br><span class="line">        </span><br><span class="line">		<span class="comment">#启动时，会先检查是否已经有pid文件所在的目录，先创建目录，如果目录不存在会发生报错。然后检查是</span></span><br><span class="line">        <span class="comment">#否有pid文件，如果有就先删除。</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(status_params.rabbitmq_pid_dir):</span><br><span class="line">          Directory(status_params.rabbitmq_pid_dir,</span><br><span class="line">                    mode=0755,</span><br><span class="line">                    cd_access=<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">                    owner=params.rabbitmq_user,</span><br><span class="line">                    group=params.rabbitmq_group,</span><br><span class="line">                    create_parents=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(status_params.rabbitmq_server_pid_file):</span><br><span class="line">          File(status_params.rabbitmq_server_pid_file,</span><br><span class="line">               action=<span class="string">&quot;delete&quot;</span>,</span><br><span class="line">               owner=params.rabbitmq_user)</span><br><span class="line">		<span class="comment">#执行启动操作</span></span><br><span class="line">        Execute(<span class="string">&quot;systemctl start rabbitmq-server.service&quot;</span>)</span><br><span class="line">        Execute(<span class="string">&quot;rabbitmqctl start_app&quot;</span>,user=params.rabbitmq_user)</span><br><span class="line">        <span class="comment">#差异化设置，如果是集群模式的话，需要把其他节点加入到DICK 1 节点中。</span></span><br><span class="line">        hostname = commands.getoutput(<span class="string">&quot;rabbitmqctl cluster_status  | sed -n &#x27;/Disk</span></span><br><span class="line"><span class="string">                     Nodes/,/Running Nodes/p&#x27; |grep rabbit |cut -d\@ -f2&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> params.current_hostname <span class="keyword">in</span> params.rabbitmq_server_mem_hosts:</span><br><span class="line">            <span class="keyword">if</span> params.rabbitmq_cluster_master_host <span class="keyword">not</span> <span class="keyword">in</span> hostname:</span><br><span class="line">                Execute(<span class="string">&quot;rabbitmqctl stop_app&quot;</span>,user=params.rabbitmq_user)</span><br><span class="line">                Execute(<span class="string">&quot;rabbitmqctl reset&quot;</span>,user=params.rabbitmq_user)</span><br><span class="line">                Execute(<span class="string">&quot;rabbitmqctl join_cluster --ram                     &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;rabbit@&quot;</span>+params.rabbitmq_cluster_master_host),user=params.rabbitmq_user)</span><br><span class="line">                Execute(<span class="string">&quot;rabbitmqctl start_app&quot;</span>,user=params.rabbitmq_user)    </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> params.current_hostname <span class="keyword">in</span> params.rabbitmq_server_disk_2_hosts:</span><br><span class="line">            <span class="keyword">if</span> params.rabbitmq_cluster_master_host <span class="keyword">not</span> <span class="keyword">in</span> hostname:</span><br><span class="line">                Execute(<span class="string">&quot;rabbitmqctl stop_app&quot;</span>,user=params.rabbitmq_user)</span><br><span class="line">                Execute(<span class="string">&quot;rabbitmqctl reset&quot;</span>,user=params.rabbitmq_user)</span><br><span class="line">                Execute(<span class="string">&quot;rabbitmqctl join_cluster &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;rabbit@&quot;</span>+params.rabbitmq_cluster_master_host),user=params.rabbitmq_user)</span><br><span class="line">                Execute(<span class="string">&quot;rabbitmqctl start_app&quot;</span>,user=params.rabbitmq_user)</span><br><span class="line"></span><br><span class="line">        add_admin_user(params)</span><br><span class="line">		<span class="comment">#将pid文件放到固定的目录下。因为一开始生成的pid文件并没有在我们定义的目录下，导致服务状态不可见</span></span><br><span class="line">        pid_cmd = <span class="string">&quot;pidof beam.smp &gt; &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(status_params.rabbitmq_server_pid_file)</span><br><span class="line">        Execute(pid_cmd,user=params.rabbitmq_user)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span>(<span class="params">self, env</span>):</span></span><br><span class="line">        <span class="keyword">import</span> params</span><br><span class="line">        <span class="keyword">import</span> status_params</span><br><span class="line">        env.set_params(params)</span><br><span class="line">        env.set_params(status_params)</span><br><span class="line">		<span class="comment">#停止服务，需要同时删除pid文件。</span></span><br><span class="line">        Execute(<span class="string">&quot;systemctl stop rabbitmq-server.service&quot;</span>)</span><br><span class="line">        File(status_params.rabbitmq_server_pid_file,</span><br><span class="line">            action=<span class="string">&quot;delete&quot;</span>,</span><br><span class="line">            owner=params.rabbitmq_user)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">status</span>(<span class="params">self, env</span>):</span></span><br><span class="line">        <span class="keyword">import</span> status_params</span><br><span class="line">        env.set_params(status_params)</span><br><span class="line">        <span class="comment">#根据pid文件检查RabbitMQ的运行状态</span></span><br><span class="line">        check_process_status(status_params.rabbitmq_server_pid_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    RabbitmqServer().execute()</span><br></pre></td></tr></table></figure>
<h3 id="rabbitmq-commands-py">rabbitmq_commands.py</h3>
<p>可以把server中需要的方法写到这个文件中：</p>
<p>注意常用的命令就可以了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> resource_management <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_user</span>(<span class="params">params</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Creates the user required for RabbitMQ.</span></span><br><span class="line"><span class="string">    root / root</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    User(params.rabbitmq_user, </span><br><span class="line">      action=<span class="string">&quot;create&quot;</span>,</span><br><span class="line">      groups=params.rabbitmq_group)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_rabbitmq_env</span>(<span class="params">params</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Creates RabbitMQ Configuration</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#根据模板文件生成配置类</span></span><br><span class="line">    File(<span class="string">&quot;/etc/rabbitmq/rabbitmq-env.conf&quot;</span>,</span><br><span class="line">         content=Template(<span class="string">&quot;rabbitmq-env.conf.j2&quot;</span>),</span><br><span class="line">         owner=params.rabbitmq_user,</span><br><span class="line">         group=params.rabbitmq_group,</span><br><span class="line">         mode = 0755)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_cookie</span>(<span class="params">params</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    edit cookie file</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    File(<span class="string">&quot;/var/lib/rabbitmq/.erlang.cookie&quot;</span>,</span><br><span class="line">            action=<span class="string">&quot;delete&quot;</span>,</span><br><span class="line">            owner=params.rabbitmq_user)</span><br><span class="line"></span><br><span class="line">    content = <span class="string">&quot;XQZGBRCXEQLXMCPZMHZJ&quot;</span></span><br><span class="line">    </span><br><span class="line">    File(<span class="string">&quot;/var/lib/rabbitmq/.erlang.cookie&quot;</span>,</span><br><span class="line">          owner=params.rabbitmq_user,</span><br><span class="line">          group=params.rabbitmq_group,</span><br><span class="line">          mode=0755,</span><br><span class="line">          content=content)</span><br><span class="line"></span><br><span class="line">    Execute(<span class="string">&quot;chmod 600 /var/lib/rabbitmq/.erlang.cookie&quot;</span>)</span><br><span class="line">    <span class="comment">#Execute(&quot;systemctl restart rabbitmq-server.service&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_guest_user</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Remove guest(default) user of RabbitMQ</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    Execute(<span class="string">&quot;rabbitmqctl delete_user guest&quot;</span>, ignore_failures=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_admin_user</span>(<span class="params">params</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Add admin user to RabbitMQ</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    admin_username = params.config[<span class="string">&#x27;configurations&#x27;</span>][<span class="string">&#x27;rabbitmq-env&#x27;</span>][<span class="string">&#x27;admin_username&#x27;</span>]</span><br><span class="line">    admin_password = params.config[<span class="string">&#x27;configurations&#x27;</span>][<span class="string">&#x27;rabbitmq-env&#x27;</span>][<span class="string">&#x27;admin_password&#x27;</span>]</span><br><span class="line">    Logger.info(<span class="string">&quot;Add &#123;0&#125; user as administrator to RabbitMQ&quot;</span>.<span class="built_in">format</span>(admin_username))</span><br><span class="line">    Execute(<span class="string">&quot;rabbitmqctl add_user &#123;0&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(admin_username, admin_password), ignore_failures=<span class="literal">True</span>, user=params.rabbitmq_user)</span><br><span class="line">    Execute(<span class="string">&quot;rabbitmqctl change_password &#123;0&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(admin_username, admin_password), ignore_failures=<span class="literal">True</span>, user=params.rabbitmq_user)</span><br><span class="line">    Execute(<span class="string">&quot;rabbitmqctl set_user_tags &#123;0&#125; administrator&quot;</span>.<span class="built_in">format</span>(admin_username), ignore_failures=<span class="literal">True</span>, user=params.rabbitmq_user)</span><br><span class="line">    Execute(<span class="string">&quot;rabbitmqctl set_permissions -p / &#123;0&#125; \&quot;.*\&quot; \&quot;.*\&quot; \&quot;.*\&quot;&quot;</span>.<span class="built_in">format</span>(admin_username), ignore_failures=<span class="literal">True</span>, user=params.rabbitmq_user)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enable_rabbitmq_manage</span>():</span></span><br><span class="line">    Execute(<span class="string">&quot;rabbitmq-plugins enable rabbitmq_management&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_log_mnesia_base</span>(<span class="params">params</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(params.logBase):</span><br><span class="line">        Directory(params.logBase,</span><br><span class="line">                mode=0755,</span><br><span class="line">                cd_access=<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">                owner=params.rabbitmq_user,</span><br><span class="line">                group=params.rabbitmq_group,</span><br><span class="line">                create_parents=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(params.mnesiaBase):</span><br><span class="line">        Directory(params.mnesiaBase,</span><br><span class="line">                mode=0755,</span><br><span class="line">                cd_access=<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">                owner=params.rabbitmq_user,</span><br><span class="line">                group=params.rabbitmq_group,</span><br><span class="line">                create_parents=<span class="literal">True</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_hosts</span>(<span class="params">params</span>):</span></span><br><span class="line">    <span class="comment">#Execute(&quot;sed -i &#x27;3,$d&#x27; /etc/hosts&quot;,user=&quot;root&quot;)</span></span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&quot;/etc/hosts&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    file.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> host <span class="keyword">in</span> params.hostsStr:</span><br><span class="line">        file.write(host)</span><br><span class="line">        <span class="comment">#Execute(&quot;echo \&quot;&#123;0&#125;\&quot; &gt;&gt; /etc/hosts&quot;.format(host),user=&quot;root&quot;)</span></span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configure_rabbitmq</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Configure RabbitMQ Server</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">import</span> params</span><br><span class="line">    create_rabbitmq_env(params)</span><br><span class="line">    edit_cookie(params)</span><br><span class="line">    enable_rabbitmq_manage()</span><br><span class="line">      </span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2>
<ol>
<li>server中，服务的插入，安装，停止等都有一些固定的套路，我们只需要改一下自己的pid路径，添加服务特有的功能就行了。</li>
<li>明确手动安装程序的过程，然后想一下怎么把每一步添加到服务中。</li>
<li>集群跟单节点安装是有差别的，可以使用if判断语句实现差异化操作。</li>
<li>错误排查，在Ambari中安装时可能会发生错误，先看一下Ambari自定义服务页面的错误提醒，然后再去集群中修改。修改完之后，在自定义脚本中修改。可以模拟改错的过程，直接通过Execute()方法在对应的地方执行以下。</li>
</ol>
<h2 id="固定目录">固定目录</h2>
<p>（最好是放在这些地方，如果没办法修改也可以）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装目录</span><br><span class="line">/usr/hdp/3.1.0.0-78</span><br><span class="line"></span><br><span class="line">#日志存放目录</span><br><span class="line">/hadoopfs/fs1</span><br><span class="line"></span><br><span class="line">#持久化目录</span><br><span class="line">/hadoopfs/fs1</span><br><span class="line"></span><br><span class="line">#pid文件存放目录</span><br><span class="line">/var/run/</span><br></pre></td></tr></table></figure>
<h2 id="遇到的错误总结">遇到的错误总结</h2>
<h3 id="错误一：Job-for-rabbitmq-server-service-failed">错误一：Job for rabbitmq-server.service failed</h3>
<p>Job for rabbitmq-server.service failed because the control process exited with error code. See “systemctl status rabbitmq-server.service” and “journalctl -xe” for details.</p>
<p>解决方法：</p>
<p>1.通过<code>systemctl status rabbitmq-server.service</code>命令查看细节。发现错误如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;init terminating in do_boot&quot;,</span><br><span class="line">&#123;error&#123;cannot_read_enabled_plugins_file,&quot;/etc/rabbitmq/enabled_plugins&quot;,eacces&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>2.发现是权限不足的问题，给他赋予权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod a+r /etc/rabbitmq/enabled_plugins</span><br></pre></td></tr></table></figure>
<p>解决方法二：</p>
<p>当第一种方法无法解决时，考虑是不是config文件的原因：</p>
<p>可以在env文件中添加一个</p>
<p><strong>rabbitmq.conf 文件默认的位置是：/etc/rabbitmq/rabbitmq</strong></p>
<p>默认配置文件存放的地址：</p>
<p><a href="https://www.rabbitmq.com/relocate.html">https://www.rabbitmq.com/relocate.html</a></p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220302162111244.png" alt="image-20220302162111244"></p>
<h3 id="错误二：没有rabbitmq-config和rabbitmq-env-conf配置文件">错误二：没有rabbitmq.config和rabbitmq-env.conf配置文件</h3>
<p>查看配置文件的存储路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -name rabbitmq-defaults </span><br><span class="line"></span><br><span class="line">查看：</span><br><span class="line">vi /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.10/sbin/rabbitmq-defaults</span><br><span class="line"></span><br><span class="line">查看配置文件</span><br><span class="line">rabbitmq-diagnostics status</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220225103839543.png" alt="image-20220225103839543"></p>
<p><strong>结论</strong>：</p>
<p>RabbitMQ是弱配置应用，默认没有配置文件。。</p>
<p>官网上给出的结论，如果想要配置这两个文件的话，需要在特定位置上创建。</p>
<p><a href="https://www.rabbitmq.com/configure.html#config-location">https://www.rabbitmq.com/configure.html#config-location</a></p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220225112606760.png" alt=""></p>
<h3 id="错误三：ERROR-node-with-name-“rabbit”-already-running-on-“rabbitmq-node-3”">错误三：ERROR: node with name “rabbit” already running on “rabbitmq-node-3”</h3>
<p>原因：后台程序被占用</p>
<p>解决：</p>
<ol>
<li><strong>使用ps -ef|grep rabbitmq 查看后台rabbitmq应用进程</strong></li>
<li><strong>使用kill</strong> <strong>进程ID</strong> <strong>的命令杀死后台占用进程</strong></li>
<li><strong>重启rabbitmq</strong></li>
</ol>
<h3 id="错误四：Error-unable-to-perform-an-operation-on-node">错误四：Error: unable to perform an operation on node</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: unable to perform an operation on node &#x27;rabbit@host-10-6-8-219&#x27;. Please see diagnostics information and suggestions below.</span><br><span class="line"></span><br><span class="line">Most common reasons for this are:</span><br><span class="line"></span><br><span class="line"> * Target node is unreachable (e.g. due to hostname resolution, TCP connection or firewall issues)</span><br><span class="line"> * CLI tool fails to authenticate with the server (e.g. due to CLI tool&#x27;s Erlang cookie not matching that of the server)</span><br><span class="line"> * Target node is not running</span><br><span class="line"></span><br><span class="line">In addition to the diagnostics info below:</span><br><span class="line"></span><br><span class="line"> * See the CLI, clustering and networking guides on https://rabbitmq.com/documentation.html to learn more</span><br><span class="line"> * Consult server logs on node rabbit@host-10-6-8-219</span><br><span class="line"> * If target node is configured to use long node names, don&#x27;t forget to use --longnames with CLI tools</span><br><span class="line"></span><br><span class="line">DIAGNOSTICS</span><br><span class="line">===========</span><br><span class="line"></span><br><span class="line">attempted to contact: [&#x27;rabbit@host-10-6-8-219&#x27;]</span><br><span class="line"></span><br><span class="line">rabbit@host-10-6-8-219:</span><br><span class="line">  * connected to epmd (port 4369) on host-10-6-8-219</span><br><span class="line">  * epmd reports node &#x27;rabbit&#x27; uses port 25672 for inter-node and CLI tool traffic </span><br><span class="line">  * TCP connection succeeded but Erlang distribution failed </span><br><span class="line">  * suggestion: check if the Erlang cookie is identical for all server nodes and CLI tools</span><br><span class="line">  * suggestion: check if all server nodes and CLI tools use consistent hostnames when addressing each other</span><br><span class="line">  * suggestion: check if inter-node connections may be configured to use TLS. If so, all nodes and CLI tools must do that</span><br><span class="line">   * suggestion: see the CLI, clustering and networking guides on https://rabbitmq.com/documentation.html to learn more</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Current node details:</span><br><span class="line"> * node name: &#x27;rabbitmqcli-417-rabbit@host-10-6-8-219&#x27;</span><br><span class="line"> * effective user&#x27;s home directory: /var/lib/rabbitmq</span><br><span class="line"> * Erlang cookie hash: WcBsVlcl12nKWzWJsklh9g==</span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<p>方法一：可能是因为修改了cookie文件，造成了错误，需要重启rabbitmq_server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart rabbitmq-server.service</span><br></pre></td></tr></table></figure>
<p>方法二：也有可能是用户的权限问题，把这里设置成了root用户，可以删除之后再执行重启命令，会自动生成一个新的cookie文件。</p>
<p>方法三：在/etc/hosts中配置所有的主机。</p>
<h3 id="错误五：cookie-…-owner">错误五：cookie … owner</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 600 /var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure>
<h1>Ambari自定义服务流程</h1>
<p>通过前端的ui页面自定义服务</p>
<p>路径为：<a href="http://10.6.8.234:8080/#/main/service/add/step1">http://10.6.8.234:8080/#/main/service/add/step1</a></p>
<p>1.选择服务</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220228153246690.png" alt="image-20220228153246690"></p>
<p>2.选择主机</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220228153357235.png" alt="image-20220228153357235"></p>
<p>3.分配client和slave</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101023741.png" alt="image-20220228153444197"></p>
<p>4.自定义服务</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220228154101200.png" alt="image-20220228154101200"></p>
<p>5.检查</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220228154132812.png" alt="image-20220228154132812"></p>
<p>6.部署</p>
<p>如果发生报错，可以在这里查看安装日志以及报错信息</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101025801.png" alt="image-20220310102522636"></p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101026531.png" alt="image-20220310102606367"></p>
<p>7.安装完成。</p>
<h1>OpenStack制作镜像</h1>
<p>当我们Ambari在已有的集群上测试成功之后，就可以制作镜像了。</p>
<h2 id="介绍">介绍</h2>
<p>OpenStack是一个镜像管理的工具。实例就相当与创建的虚拟机</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101050701.png" alt="image-20220310105017566"></p>
<p>实例，后面是创建实例所使用的对象。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101051843.png" alt="image-20220310105112691"></p>
<h2 id="创建实例">创建实例</h2>
<p>1.设置实例名称</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101055945.png" alt="image-20220310105532761"></p>
<p>2.选择镜像</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101056466.png" alt="image-20220310105658331"></p>
<p>3.选择实例的规格</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101057061.png" alt="image-20220310105751890"></p>
<p>4.选择网络</p>
<p>到这一步，选择完网络之后，就可以点击创建实例了。剩下的会自动给我们分配。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101058773.png" alt="image-20220310105825550"></p>
<h2 id="上传自定义服务脚本">上传自定义服务脚本</h2>
<p>使用xshell连接新创建的实例，然后将脚本上传。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum  install lrzsz</span><br><span class="line"></span><br><span class="line">发送文件</span><br><span class="line">rz</span><br><span class="line"></span><br><span class="line">下载文件</span><br><span class="line">sz 文件名</span><br><span class="line"></span><br><span class="line">自定义服务的路径</span><br><span class="line">/var/lib/ambari-server/resources/stacks/HDP/3.1/services</span><br><span class="line"></span><br><span class="line">修改完成之后，会自动重启（不用管报错）：</span><br><span class="line">ambari-server stop</span><br></pre></td></tr></table></figure>
<h2 id="制作，压缩，上传镜像">制作，压缩，上传镜像</h2>
<p>返回OpenStack UI界面，将实例创建快照，快照也相当于一个镜像。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101107642.png" alt="image-20220310110742475"></p>
<p>xshell连接镜像管理节点<code>10.6.8.67</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）地址</span><br><span class="line">Openstack_Rocky版本：10.6.8.67/dashboard</span><br><span class="line"></span><br><span class="line">2）用户名/密码</span><br><span class="line">ui:       admin/xdata@123</span><br><span class="line">linux:    root/Sugon123</span><br></pre></td></tr></table></figure>
<p>压缩镜像，然后上传。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#获取权限</span><br><span class="line">source keystonerc_admin</span><br><span class="line"></span><br><span class="line">#查看镜像列表</span><br><span class="line">glance image-list</span><br><span class="line"></span><br><span class="line">#到镜像暂存区</span><br><span class="line">cd /tmp</span><br><span class="line"></span><br><span class="line">#下载镜像</span><br><span class="line">glance image-download --file /tmp/cv-sugon-rabbitmq-20220307-alpha.qcow2   642367d8-c2e4-4b41-8a07-4ae64aa0c5f0</span><br><span class="line"></span><br><span class="line">#压缩镜像</span><br><span class="line">virt-sparsify --compress   压缩后的名字.qcow2    被压缩的文件.qcow2</span><br><span class="line"></span><br><span class="line">#上传镜像</span><br><span class="line">openstack image create &quot;cv-sugon-rabbitmq-20220308-alpha&quot;   --file   cv-sugon-rabbitmq-20220308-alpha.qcow2   --disk-format qcow2 --container-format bare --property hypervisor_type=kvm --public</span><br><span class="line"></span><br><span class="line">#删除旧版本镜像</span><br><span class="line">openstack image delete f77af671-720d-4459-bd81-93e83e0c5b9f</span><br></pre></td></tr></table></figure>
<p>如果此时需要修改镜像中的文件，可以挂载镜像。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#挂载镜像，需要在镜像所在的目录下</span><br><span class="line">guestfish -a cv-sugon-rabbitmq-20220308-alpha.qcow2</span><br></pre></td></tr></table></figure>
<p>挂载镜像之后用到，用到的命令与普通的虚拟机不同。常用命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#启动镜像</span><br><span class="line">launch </span><br><span class="line"></span><br><span class="line">#切换根目录</span><br><span class="line">mount  /dev/sda1  /</span><br><span class="line"></span><br><span class="line">#查看目录下的文件</span><br><span class="line">ls /var/lib/ambari-server/resources/stacks/HDP/3.1/services</span><br><span class="line"></span><br><span class="line">#修改文件，</span><br><span class="line">touch  /var/lib/ambari-server/resources/stacks/HDP/3.1/services</span><br><span class="line">#相当于vi命令</span><br><span class="line">edit  /var/lib/ambari-server/resources/stacks/HDP/3.1/services/RABBITMQ/........</span><br><span class="line"></span><br><span class="line">#退出</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p>修改完之后需要重新上传</p>
<h1>Cloudbreak连接OpenStack，自动部署集群</h1>
<p>Cloudbreak是一个基础设施管理工具，可以连接OpenStack，使用OpenStack中的镜像，自动创建集群。</p>
<h2 id="创建catalog">创建catalog</h2>
<p>连接10.6.8.67节点，查看你的镜像的id号。<code>glance image-list</code></p>
<p>连接10.6.6.5节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#catalog存放目录</span><br><span class="line">/var/www/html/catalog</span><br></pre></td></tr></table></figure>
<p>创建一个json文件，命名与你的镜像名对应，方面后面连接时查找</p>
<p>以<code>cv-sugon-rabbitmq.json</code>为例：</p>
<p>修改镜像的id号和名称与你的镜像相同。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;images&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;base-images&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;created&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;date&quot;</span>:<span class="string">&quot;2019-04-23&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;description&quot;</span>:<span class="string">&quot;Official Cloudbreak image&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;images&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;openstack&quot;</span>:&#123;</span><br><span class="line">                        <span class="attr">&quot;default&quot;</span>:<span class="string">&quot;cb-hdp--1901151721&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;os&quot;</span>:<span class="string">&quot;centos7&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;os_type&quot;</span>:<span class="string">&quot;redhat7&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;uuid&quot;</span>:<span class="string">&quot;dab4e6a4-3938-441c-9a21-fd4a1ab50eb2&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;package-versions&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;salt&quot;</span>:<span class="string">&quot;2017.7.5&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;salt-bootstrap&quot;</span>:<span class="string">&quot;0.13.0-2018-05-03T07:39:07&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;hdp-images&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;created&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;date&quot;</span>:<span class="string">&quot;2021-05-10&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;description&quot;</span>:<span class="string">&quot;sugon emr hadoop analysis image&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;images&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;openstack&quot;</span>:&#123;</span><br><span class="line">                        <span class="attr">&quot;default&quot;</span>:<span class="string">&quot;cv-sugon-rabbitmq-20220308-alpha&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;os&quot;</span>:<span class="string">&quot;centos7&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;os_type&quot;</span>:<span class="string">&quot;redhat7&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;uuid&quot;</span>:<span class="string">&quot;9cd26dc4-d67b-40e8-bcd4-a794a00a57e1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;package-versions&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;ambari&quot;</span>:<span class="string">&quot;2.7.3.0&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;salt&quot;</span>:<span class="string">&quot;2017.7.5&quot;</span>,</span><br><span class="line">          </span><br><span class="line">                    <span class="attr">&quot;salt-bootstrap&quot;</span>:<span class="string">&quot;0.13.2-2020-06-25T08:50:15&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;stack&quot;</span>:<span class="string">&quot;3.1.0.0&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;stack-details&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;repo&quot;</span>:&#123;</span><br><span class="line">                        <span class="attr">&quot;stack&quot;</span>:&#123;</span><br><span class="line">                            <span class="attr">&quot;redhat7&quot;</span>:<span class="string">&quot;http://10.6.6.5:9999/HDP/centos7/3.1.0.0-78&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;repoid&quot;</span>:<span class="string">&quot;HDP-3.1&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;repository-version&quot;</span>:<span class="string">&quot;3.1.0.0-78&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;vdf-url&quot;</span>:<span class="string">&quot;http://10.6.6.5:9999/HDP/centos7/3.1.0.0-78/HDP-3.1.0.0-78.xml&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">&quot;util&quot;</span>:&#123;</span><br><span class="line">                            <span class="attr">&quot;redhat7&quot;</span>:<span class="string">&quot;http://10.6.6.5:9999/HDP-UTILS/centos7/1.1.0.22&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;repoid&quot;</span>:<span class="string">&quot;HDP-UTILS-1.1.0.22&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">&quot;version&quot;</span>:<span class="string">&quot;3.1.0.0&quot;</span></span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;repo&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;redhat7&quot;</span>:<span class="string">&quot;http://10.6.6.5:9999/xm/centos7&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;version&quot;</span>:<span class="string">&quot;2.7.3.0&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;versions&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;cloudbreak&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;images&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;dab4e6a4-3938-441c-9a21-fd4a1ab50eb2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;9cd26dc4-d67b-40e8-bcd4-a794a00a57e1&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;defaults&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;dab4e6a4-3938-441c-9a21-fd4a1ab50eb2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;9cd26dc4-d67b-40e8-bcd4-a794a00a57e1&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;versions&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;2.9.0&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;images&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;dab4e6a4-3938-441c-9a21-fd4a1ab50eb2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;9cd26dc4-d67b-40e8-bcd4-a794a00a57e1&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;defaults&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;dab4e6a4-3938-441c-9a21-fd4a1ab50eb2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;9cd26dc4-d67b-40e8-bcd4-a794a00a57e1&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;versions&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;2.9.1&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;images&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;dab4e6a4-3938-441c-9a21-fd4a1ab50eb2&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;defaults&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;dab4e6a4-3938-441c-9a21-fd4a1ab50eb2&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;versions&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;2.9.2&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到cloudbreak UI界面</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101132919.png" alt="image-20220310113212743"></p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101133628.png" alt="image-20220310113346462"></p>
<h2 id="蓝图配置组件">蓝图配置组件</h2>
<p>然后到蓝图中，修改你的配置信息，主要是定义组件，DICK1，DICK2，MEM</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101134853.png" alt="image-20220310113449706"></p>
<p>实例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;Blueprints&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;blueprint_name&quot;</span>: <span class="string">&quot;rabbitmq&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;stack_name&quot;</span>: <span class="string">&quot;HDP&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;stack_version&quot;</span>: <span class="string">&quot;3.1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;recovery_settings&quot;</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;service_settings&quot;</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;component_settings&quot;</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;host_groups&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;components&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RABBITMQ_SERVER_DISK_1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;configurations&quot;</span>: [],</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;disk1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;cardinality&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;components&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RABBITMQ_SERVER_DISK_2&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;configurations&quot;</span>: [],</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;disk2&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;cardinality&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;components&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RABBITMQ_SERVER_MEM&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;configurations&quot;</span>: [],</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;mem&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;cardinality&quot;</span>: <span class="string">&quot;1+&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自动部署集群">自动部署集群</h2>
<p>1.创建集群，基础配置，选择蓝图</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101138790.png" alt="image-20220310113855634"></p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101140285.png" alt="image-20220310114011136"></p>
<p>2.选择catalog，然后会根据catalog自动选择镜像。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101141504.png" alt="image-20220310114106353"></p>
<p>3.选择节点数量与规格，Ambari-server</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101142165.png" alt="image-20220310114248940"></p>
<p>4.选择网络</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101143690.png" alt="image-20220310114329515"></p>
<p>5.不用修改，直接next</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101144974.png" alt="image-20220310114422805"></p>
<p>6.next</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101145695.png" alt="image-20220310114506541"></p>
<p>7.选择网管</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101145155.png" alt="image-20220310114550985"></p>
<p>8.节点的ip地址，从ip池里拿就行</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101146557.png" alt="image-20220310114634341"></p>
<p>9.设置用户，密码等</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101147649.png" alt="image-20220310114701498"></p>
<p>点击创建之后，集群就开始了自动部署</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101148757.png" alt="image-20220310114809598"></p>
<p>查看集群状态，并访问Ambari自定义服务主页</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101148322.png" alt="image-20220310114847143"></p>
<p>在这里查看已经安装的服务的状态</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/202203101149761.png" alt="image-20220310114929602"></p>
<h2 id="总结-2">总结</h2>
<p>此时，如果正常启动的话，就可以对镜像进行测试了。</p>
<p>如果需要修改，就挂载镜像进行修改。</p>
<h1>参考</h1>
<p>镜像制作相关：</p>
<p><a href="https://note.youdao.com/ynoteshare/index.html?id=34457456628877ed53ae6f3b8364c439&amp;type=note&amp;_time=1639647582378">https://note.youdao.com/ynoteshare/index.html?id=34457456628877ed53ae6f3b8364c439&amp;type=note&amp;_time=1639647582378</a></p>
<p><a href="http://wenk207.top/2021/12/25/%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C/">http://wenk207.top/2021/12/25/镜像制作/</a></p>
<p>自定义服务：</p>
<p><a href="https://note.youdao.com/ynoteshare/index.html?id=c4aeaafdd9f9f599a964e26a61454f46&amp;type=note&amp;_time=1645608396089">https://note.youdao.com/ynoteshare/index.html?id=c4aeaafdd9f9f599a964e26a61454f46&amp;type=note&amp;_time=1645608396089</a></p>
<p><a href="https://note.youdao.com/ynoteshare/index.html?id=ddfc37e9709b20663199b6cf4a5c59e9&amp;type=note&amp;_time=1645608444212">https://note.youdao.com/ynoteshare/index.html?id=ddfc37e9709b20663199b6cf4a5c59e9&amp;type=note&amp;_time=1645608444212</a></p>
]]></content>
      <tags>
        <tag>镜像</tag>
      </tags>
  </entry>
  <entry>
    <title>镜像制作</title>
    <url>/2021/12/25/%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<p>OpenStack+CloudBreak+Ambari</p>
<ul>
<li>OpenStack：镜像制作相关操作</li>
<li>Ambari：自定义服务，提供UI界面</li>
<li>Cloudbreak：集群管理，给Ambari提供服务</li>
</ul>
<span id="more"></span>
<h1>镜像制作</h1>
<p>OpenStack+CloudBreak+Ambari</p>
<ul>
<li>OpenStack：镜像制作相关操作</li>
<li>Ambari：自定义服务，提供UI界面</li>
<li>Cloudbreak：集群管理，给Ambari提供服务</li>
</ul>
<h1>账号汇总</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.OpenStack镜像制作公共节点：</span><br><span class="line">10.6.8.67         </span><br><span class="line"></span><br><span class="line">2.OpenStack网站：</span><br><span class="line">http://10.6.8.67/dashboard/auth/login/          </span><br><span class="line"></span><br><span class="line">3.cloudbreak网址：</span><br><span class="line">10.6.6.102      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.catalog创建目录：</span><br><span class="line">/var/www/html/catalog</span><br><span class="line"></span><br><span class="line">5.Ambari服务修改目录：</span><br><span class="line">/var/lib/ambari-server/resources/stacks/HDP/3.1/services</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>镜像制作流程</h1>
<h2 id="1-镜像创建，并上传到OpenStack">1.镜像创建，并上传到OpenStack</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.登录到10.6.8.67</span><br><span class="line">ssh root@10.6.8.67</span><br><span class="line"></span><br><span class="line">2.服务admin权限</span><br><span class="line">source keystonerc-admin</span><br><span class="line"></span><br><span class="line">3.查看镜像列表</span><br><span class="line">glance image-list</span><br><span class="line"></span><br><span class="line">4.下载镜像</span><br><span class="line">glance image-download --file /tmp/cv-sugon-data-governance-20210604.qcow2   2c44d9ef-9da1-410c-8483-0466ca1c055c</span><br><span class="line"></span><br><span class="line">5.压缩镜像</span><br><span class="line">virt-sparsify --compress cv-sugon-hadoop-analysis-20210607.qcow2 cv-sugon-hadoop-analysis-20210607-alpha.qcow2</span><br><span class="line"></span><br><span class="line">6.上传镜像</span><br><span class="line">openstack image create &quot;cv-xdata-31-20210604-sugon-alpha-test&quot;   --file cb-xdata-31-20210428-sugon-alpha.qcow2 --disk-format qcow2 --container-format bare --property hypervisor_type=kvm --public</span><br><span class="line"></span><br><span class="line">7.查看镜像信息</span><br><span class="line">qemu-img info ***.qcow2</span><br><span class="line"></span><br><span class="line">8.删除镜像</span><br><span class="line">openstack image delete &#123;id&#125;</span><br><span class="line"></span><br><span class="line">9.转换格式：</span><br><span class="line">qemu-img convert -f qcow2 -O raw aa.qcow2 aa.raw -p</span><br></pre></td></tr></table></figure>
<p>删除文件时，要注意删除的文件是不是还有用</p>
<p>尽量用 rm</p>
<h2 id="2-登录UI界面，根据镜像创建实例">2.登录UI界面，根据镜像创建实例</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.登录OpenStack网站：</span><br><span class="line">http://10.6.8.67/dashboard/auth/login/        </span><br><span class="line"></span><br><span class="line">2.创建实例 </span><br><span class="line">新卷（否）   ----wan     ----注意根目录与内存的大小</span><br><span class="line"></span><br><span class="line">3.创建实例结束之后，会有一个IP地址</span><br></pre></td></tr></table></figure>
<h2 id="3-虚拟机配置文件修改">3.虚拟机配置文件修改</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.</span><br><span class="line">/var/www/html/catalog</span><br><span class="line">对其进行修改 镜像名，ID</span><br><span class="line"></span><br><span class="line">2.可以登录cloudbreak上进行查看，image catalog。</span><br><span class="line">例如：http://10.6.6.5:9999/catalog/cv-sugon-redis.json</span><br></pre></td></tr></table></figure>
<h2 id="4-Ambari自定义服务">4.Ambari自定义服务</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.通过IP地址登录虚拟机</span><br><span class="line">ssh root@ip</span><br><span class="line"></span><br><span class="line">2.查看主机名</span><br><span class="line">cat /etc/hostname</span><br><span class="line">修改主机名</span><br><span class="line">hostname localhost.localdomain</span><br><span class="line"></span><br><span class="line">3.修改自定义服务脚本</span><br><span class="line">替换/var/lib/ambari-server/resources/stacks/HDP/3.1/services中的脚本。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="5-查看镜像、挂载">5.查看镜像、挂载</h2>
<p>直接在当前虚拟机上对镜像进行修改，不需要创建实例再修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.查看镜像分区表信息</span><br><span class="line">virt-df your.qcow2</span><br><span class="line">qemu-img info your.qcow2</span><br><span class="line"></span><br><span class="line">2.挂载镜像，修改镜像中的文件</span><br><span class="line">guestfish -a your.qcow2</span><br><span class="line">&gt;&lt;fs&gt; launch                            //启动</span><br><span class="line">&gt;&lt;fs&gt; list-partitions                   //查看分区列表</span><br><span class="line">/dev/sda1</span><br><span class="line">&gt;&lt;fs&gt; list-filesystems</span><br><span class="line">/dev/sda1: xfs</span><br><span class="line">&gt;&lt;fs&gt;mount  /dev/sda1  /               //修改当前目录成根目录</span><br><span class="line">&gt; exit</span><br></pre></td></tr></table></figure>
<h2 id="6-修改镜像格式">6.修改镜像格式</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.转换格式：</span><br><span class="line">qemu-img convert -f qcow2 -O raw aa.qcow2 aa.raw -p</span><br><span class="line"></span><br><span class="line">2.查看镜像信息</span><br><span class="line">qemu-img info t.raw</span><br><span class="line"></span><br><span class="line">3.上传raw格式镜像：</span><br><span class="line">openstack image create &quot;cv-sugon-data-governance-20210831-alpha&quot; --file cv-sugon-data-governance-20210831-alpha.raw --disk-format raw --container-format bare --property hypervisor_type=kvm --public</span><br></pre></td></tr></table></figure>
<h2 id="7-Cloudbreak创建集群">7.Cloudbreak创建集群</h2>
]]></content>
      <categories>
        <category>镜像制作</category>
      </categories>
      <tags>
        <tag>镜像制作</tag>
      </tags>
  </entry>
  <entry>
    <title>项目总结</title>
    <url>/2021/10/04/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>总结项目经验，介绍项目的亮点</p>
<h1>导入依赖</h1>
<h2 id="MyBatis">MyBatis</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="mysql">mysql</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="thymeleaf：前后端交互">thymeleaf：前后端交互</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="邮件">邮件</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="redis">redis</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="commons-lang3：字符串相关操作">commons-lang3：字符串相关操作</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="kapcha">kapcha</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">生成随机的验证码</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="json">json</h2>
<p>json前后端交互</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="AOP面向切面编程">AOP面向切面编程</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="swagger">swagger</h2>
<p>接口管理文档</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1>MD5加密</h1>
<h2 id="功能介绍">功能介绍</h2>
<p>在项目中使用MD5对密码进行加密。</p>
<p>md5加密算法是对称加密算法，即相同的字符串加密之后的结果是相同的。因此，为了保证加密结果的安全性，我们使用 “md5（密码+长度为5的随机字符串）”的形式进行加密。</p>
<h2 id="代码实现">代码实现</h2>
<p><strong>生成随机字符串与MD5加密</strong>的代码如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommunityUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//生成随机字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateUUID</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//s随机生成的字符串是由字母和‘-’生成的，我们不想要‘-’，使用空字符串进行替换</span></span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//MD5加密</span></span><br><span class="line">    <span class="comment">//只能加密，但是不能解密</span></span><br><span class="line">    <span class="comment">//MD5对称加密是，加密之后的结果是一样的，我们通过使用在 原字符串后+随机字符串 的方式进行加密。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(key))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//加密成16位的字符串。输入要求是byte。</span></span><br><span class="line">        <span class="keyword">return</span> DigestUtils.md5DigestAsHex(key.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>字符串拼接成功后，进行md5加密：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CommunityUtil.generateUUID().substring(<span class="number">0</span>,<span class="number">5</span>);   <span class="comment">//设置一个长度为5的随机字符串</span></span><br><span class="line">CommunityUtil.md5(user.getPassword()+user.getSalt());   <span class="comment">//加密</span></span><br></pre></td></tr></table></figure>
<h1>发送邮件</h1>
<h2 id="功能介绍-2">功能介绍</h2>
<p>用户点击注册之后，用户的账号处于一个未激活的状态。此时会给用户发送一封邮件，邮件中包含了一个激活链接，只有用户点击激活链接，用户账号正式激活。</p>
<h2 id="代码实现-2">代码实现</h2>
<p>注入实现发送邮件的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="service层">service层</h3>
<p>配置发送邮件的信息：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MailProperties 发送邮件控制</span></span><br><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.sina.com</span></span><br><span class="line"><span class="meta">spring.mail.port</span>=<span class="string">465</span></span><br><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">wenk207@sina.com</span></span><br><span class="line"><span class="meta">spring.mail.password</span>=<span class="string">1de57d8716fc8e2e</span></span><br><span class="line"><span class="meta">spring.mail.protocol</span>=<span class="string">smtps</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.ssl.enable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
<p>自动注入要实现的类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MailClient mailClient;       <span class="comment">//邮箱客户端</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;      <span class="comment">//模板引擎</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private LoginTicketDao loginTicketDao;     //登陆凭证</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;springboot_newCoder.path.domain&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String domain;           <span class="comment">//项目地址 http://localhost:8080</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.servlet.context-path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String contextPath;          <span class="comment">//默认路径/community</span></span><br></pre></td></tr></table></figure>
<p>激活邮件，context是thymeleaf中的一个类，类似于容器的功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//激活邮件</span></span><br><span class="line">Context context = <span class="keyword">new</span> Context();</span><br><span class="line">context.setVariable(<span class="string">&quot;email&quot;</span>,user.getEmail());</span><br><span class="line"><span class="comment">//拼接激活地址：http://localhost:8080/community/activation/101/code</span></span><br><span class="line">String url = domain + contextPath + <span class="string">&quot;/activation/&quot;</span> +</span><br><span class="line">        user.getId() + <span class="string">&quot;/&quot;</span> + user.getActivationCode();</span><br><span class="line">context.setVariable(<span class="string">&quot;url&quot;</span>,url);</span><br><span class="line">String content = templateEngine.process(<span class="string">&quot;/mail/activation&quot;</span>,context);</span><br><span class="line">mailClient.sendMail(user.getEmail(),<span class="string">&quot;激活邮件&quot;</span>,content);</span><br></pre></td></tr></table></figure>
<p>通过邮箱中的激活链接进行激活</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过邮箱里面的激活链接点击激活</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">activation</span><span class="params">(<span class="keyword">int</span> userId,String code)</span></span>&#123;</span><br><span class="line">    User user = userDao.selectById(userId);</span><br><span class="line">    <span class="keyword">if</span> (user.getStatus() == <span class="number">1</span>)&#123;     <span class="comment">//status初始化为0，等于1说明已经激活</span></span><br><span class="line">        <span class="keyword">return</span> ACTIVATION_REPEAT;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (user.getActivationCode().equals(code))&#123;     <span class="comment">//激活</span></span><br><span class="line">        userDao.updateStatus(userId,<span class="number">1</span>);      <span class="comment">//更新用户的状态。</span></span><br><span class="line">        clearCache(userId);</span><br><span class="line">        <span class="keyword">return</span> ACTIVATION_SUCCESS;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ACTIVATION_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="controller层">controller层</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问注册页面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/register&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(Model model, User user)</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用注册功能，返回的map中存放错误信息。</span></span><br><span class="line">    Map&lt;String, Object&gt; map = userService.register(user);</span><br><span class="line">    <span class="keyword">if</span> (map == <span class="keyword">null</span> || map.isEmpty())&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;注册成功，我们已经向您发送了一封激活邮件，请尽快激活！&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;target&quot;</span>,<span class="string">&quot;/index&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&quot;/site/operate-result&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;usernameMsg&quot;</span>,map.get(<span class="string">&quot;usernameMsg&quot;</span>));</span><br><span class="line">        model.addAttribute(<span class="string">&quot;emailMsg&quot;</span>,map.get(<span class="string">&quot;emailMsg&quot;</span>));</span><br><span class="line">        model.addAttribute(<span class="string">&quot;passwordMsg&quot;</span>,map.get(<span class="string">&quot;passwordMsg&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/site/register&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问激活地址：http://localhost:8080/community/activation/101/code</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;activation/&#123;userId&#125;/&#123;code&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">activation</span><span class="params">(Model model, <span class="meta">@PathVariable(&quot;userId&quot;)</span> <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="meta">@PathVariable(&quot;code&quot;)</span> String code)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = userService.activation(userId,code);</span><br><span class="line">    <span class="keyword">if</span> (result == ACTIVATION_SUCCESS)&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;激活成功，您的账号已经可以正常使用了！&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;target&quot;</span>,<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result == ACTIVATION_REPEAT)&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;无效操作，该账号已经激活过了!&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;target&quot;</span>,<span class="string">&quot;/index&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;激活失败，提供的激活码不正确！&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;target&quot;</span>,<span class="string">&quot;/index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  <span class="string">&quot;/site/operate-result&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>面试总结</title>
    <url>/2021/06/15/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1>Java基础</h1>
<h2 id="基本数据类型">基本数据类型</h2>
<p>Java 中有 8 种基本数据类型，分别为：</p>
<ol>
<li>6 种数字类型 ：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code></li>
<li>1 种字符类型：<code>char</code></li>
<li>1 种布尔型：<code>boolean</code>。</li>
</ol>
<p><strong>所占用的字节数：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">基本类型</th>
<th style="text-align:left">位数</th>
<th style="text-align:left">字节</th>
<th style="text-align:left">默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>int</code></td>
<td style="text-align:left">32</td>
<td style="text-align:left">4</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left"><code>short</code></td>
<td style="text-align:left">16</td>
<td style="text-align:left">2</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left"><code>long</code></td>
<td style="text-align:left">64</td>
<td style="text-align:left">8</td>
<td style="text-align:left">0L</td>
</tr>
<tr>
<td style="text-align:left"><code>byte</code></td>
<td style="text-align:left">8</td>
<td style="text-align:left">1</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left"><code>char</code></td>
<td style="text-align:left">16</td>
<td style="text-align:left">2</td>
<td style="text-align:left">‘u0000’</td>
</tr>
<tr>
<td style="text-align:left"><code>float</code></td>
<td style="text-align:left">32</td>
<td style="text-align:left">4</td>
<td style="text-align:left">0f</td>
</tr>
<tr>
<td style="text-align:left"><code>double</code></td>
<td style="text-align:left">64</td>
<td style="text-align:left">8</td>
<td style="text-align:left">0d</td>
</tr>
<tr>
<td style="text-align:left"><code>boolean</code></td>
<td style="text-align:left">1</td>
<td style="text-align:left"></td>
<td style="text-align:left">false</td>
</tr>
</tbody>
</table>
<p>封装类：</p>
<p>有常量值技术：Byte、Short、Integer[-128,127]、Long</p>
<p>Boolean、Character</p>
<p>Float、Double</p>
<h2 id="泛型">泛型</h2>
<p>泛型提供了编译时<strong>类型安全检测机制</strong>，该机制允许程序员在编译阶段检测到非法的类型，也就是说<strong>把操作的数据类型被指定为一个参数</strong>。</p>
<p>Java 的泛型是伪泛型，这是因为 Java 在<strong>运行期间，所有的泛型信息都会被擦掉</strong>，这也就是通常所说类型擦除 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java中的泛型的作用就是为程序员的编程提供方便。在编译期间，可以把要操作类实例中的数据指定为某得数据类型。</span><br><span class="line">在运行期间，泛型不起作用。</span><br><span class="line"></span><br><span class="line">常见的泛型有：</span><br><span class="line">HashMap&lt;String,String&gt;、List&lt;Integer&gt;</span><br><span class="line"></span><br><span class="line">泛型一般有三种使用方式: 泛型类、泛型接口、泛型方法。</span><br></pre></td></tr></table></figure>
<h2 id="和equals的区别">==和equals的区别</h2>
<p><strong><code>==</code></strong> 对于基本类型和引用类型的作用效果是不同的：</p>
<ul>
<li>对于基本数据类型来说，<code>==</code> 比较的是值。</li>
<li>对于引用数据类型来说，<code>==</code> 比较的是对象的内存地址。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">因为 Java 只有值传递，所以，对于 == 来说，不管是比较基本数据类型，还是引用数据类型的变量，其本质比较的都</span><br><span class="line">是值，只是引用类型变量存的值是对象的地址。</span><br></pre></td></tr></table></figure>
<p><strong><code>equals()</code></strong> 作用不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。<code>equals()</code>方法存在于<code>Object</code>类中，而<code>Object</code>类是所有类的直接或间接父类。</p>
<p><strong>equals()方法存在两种使用情况：</strong></p>
<ul>
<li><strong>类没有覆盖 <code>equals()</code>方法</strong> ：通过<code>equals()</code>比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是 <code>Object</code>类<code>equals()</code>方法。</li>
<li><strong>类覆盖了 <code>equals()</code>方法</strong> ：一般我们都覆盖 <code>equals()</code>方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即，认为这两个对象相等)。</li>
</ul>
<p><strong>String实例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String a = <span class="keyword">new</span> String(<span class="string">&quot;ab&quot;</span>); <span class="comment">// a 为一个引用</span></span><br><span class="line">String b = <span class="keyword">new</span> String(<span class="string">&quot;ab&quot;</span>); <span class="comment">// b为另一个引用,对象的内容一样</span></span><br><span class="line">String aa = <span class="string">&quot;ab&quot;</span>; <span class="comment">// 放在常量池中</span></span><br><span class="line">String bb = <span class="string">&quot;ab&quot;</span>; <span class="comment">// 从常量池中查找</span></span><br><span class="line">System.out.println(aa == bb);<span class="comment">// true</span></span><br><span class="line">System.out.println(a == b);<span class="comment">// false</span></span><br><span class="line">System.out.println(a.equals(b));<span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="number">42</span> == <span class="number">42.0</span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p><code>String</code> 中的 <code>equals</code> 方法是被重写过的，因为 <code>Object</code> 的 <code>equals</code> 方法是比较的对象的内存地址，而 <code>String</code> 的 <code>equals</code> 方法比较的是对象的值。</p>
<p>当创建 <code>String</code> 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 <code>String</code> 对象。</p>
<h2 id="HashCode和equals">HashCode和equals</h2>
<p><code>hashCode()</code> 的作用是获取哈希码（<code>int</code> 整数），也称为散列码。这个哈希码的作用是确定该对象在哈希表中的索引位置。</p>
<p>HashCode是Object类中的方法，所以所有的方法中都有HashCode方法。HashCode是本地方法（用navicat修饰），就是用 C 语言或 C++ 实现的，该方法通常用来将对象的内存地址转换为整数之后返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>散列表存储的是键值对(key-value)，它的特点是：<strong>能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</strong></p>
<p>HashCode和equals需要搭配使用，通过HashCode找到key所在的位置，然后通过equals比较value是否相等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果两个对象的hashCode 值相等，那这两个对象不一定相等（哈希碰撞）。</span><br><span class="line"></span><br><span class="line">如果两个对象的hashCode 值相等并且equals()方法返回 true，我们才认为这两个对象相等。</span><br><span class="line"></span><br><span class="line">如果两个对象的hashCode 值不相等，我们就可以直接认为这两个对象不相等。</span><br></pre></td></tr></table></figure>
<p>hashmap正常使用的前提：**如果equals判断相等的两个对象，他们要具有相同的hash值。**如果两个方法都没有重写，则equals比较的是两个对象的内存地址，hashcode根据内存地址计算hash值。</p>
<p><strong>重写equals但是没重写hashcode：</strong></p>
<p>此时，equals（）方法根据两个对象的属性判断对象是否相等，而不是根据内存地址，但是因为hashcode没有被重写，他还是根据内存地址计算哈希值的。因此会导致equals判断相等的两个对象，他们的哈希值就不相等。</p>
<p><strong>重写hashcode但是没有重写equals：</strong></p>
<p>hashcode是根据对象的属性计算哈希值，equals根据内存地址判断对象是否相等。equals判断相等的两个对象，他们的hashcode不相等。</p>
<h2 id="重载与重写">重载与重写</h2>
<p>相同点：都是多态的体现。</p>
<p>不同点：重载是同一个类中，方法名相同，但是参数列表不同。重写出现在子类继承父类时，重写父类中的方法。</p>
<h2 id="面向对象的三个特征">面向对象的三个特征</h2>
<p><strong>封装：</strong></p>
<p>封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。</p>
<p><strong>继承：</strong></p>
<p>继承是使用已存在类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，只是拥有。</span><br><span class="line"></span><br><span class="line">子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</span><br><span class="line"></span><br><span class="line">子类可以用自己的方式实现父类的方法。（以后介绍）</span><br></pre></td></tr></table></figure>
<p><strong>多态：</strong></p>
<p>表示一个对象具有多种的状态，具体表现为父类的引用指向子类的实例。</p>
<h2 id="String、StringBuffer-和-StringBuilder">String、StringBuffer 和 StringBuilder</h2>
<p><strong>可变性</strong>：</p>
<p>String是不可变的，StringBuffer和StringBuilder是可变的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为什么String是不可变的：</span><br><span class="line">String 类中使用 final 关键字修饰字符数组来保存字符串。因此这个字符数组就是String私有的，不能被继承，并</span><br><span class="line">且String没有提供修改或者删除该字符串的方法。</span><br><span class="line"></span><br><span class="line">StringBuilder和StringBuffer的可变性：</span><br><span class="line">StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder </span><br><span class="line">中也是使用字符数组保存字符串，AbstractStringBuilder中有append方法可以对字符串进行修改。</span><br></pre></td></tr></table></figure>
<p><strong>线程安全性</strong>：</p>
<p><code>String</code> 中的对象是不可变的，也就可以理解为常量，线程安全。</p>
<p><code>AbstractStringBuilder</code> 是 <code>StringBuilder</code> 与 <code>StringBuffer</code> 的公共父类，定义了一些字符串的基本操作，如 <code>expandCapacity</code>、<code>append</code>、<code>insert</code>、<code>indexOf</code> 等公共方法。<strong><code>StringBuffer</code> 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。<code>StringBuilder</code> 并没有对方法进行加同步锁，所以是非线程安全的。</strong></p>
<p><strong>性能</strong></p>
<p>每次对 <code>String</code> 类型进行改变的时候，都会生成一个新的 <code>String</code> 对象，然后将指针指向新的 <code>String</code> 对象。<code>StringBuffer</code> 每次都会对 <code>StringBuffer</code> 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 <code>StringBuilder</code> 相比使用 <code>StringBuffer</code> 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p>
<p><strong>对于三者使用的总结：</strong></p>
<ol>
<li>操作少量的数据: 适用 <code>String</code></li>
<li>单线程操作字符串缓冲区下操作大量数据: 适用 <code>StringBuilder</code></li>
<li>多线程操作字符串缓冲区下操作大量数据: 适用 <code>StringBuffer</code></li>
</ol>
<h2 id="浅拷贝和深拷贝">浅拷贝和深拷贝</h2>
<p>浅拷贝：在堆上创建一个对象，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。Object中的clone方法。</p>
<p>深拷贝：完全复制整个对象</p>
<p>引用拷贝： 简单来说，引用拷贝就是两个不同的引用指向同一个对象。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/shallow&amp;deep-copy.64ee0760.png" alt="img"></p>
<h2 id="异常">异常</h2>
<p>在 Java 中，所有的异常都有一个共同的祖先 <code>java.lang</code> 包中的 <code>Throwable</code> 类。<code>Throwable</code> 类有两个重要的子类 <code>Exception</code>（异常）和 <code>Error</code>（错误）。<code>Exception</code> 能被程序本身处理(<code>try-catch</code>)， <code>Error</code> 是无法处理的(只能尽量避免)。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220216150741705.png" alt="image-20220216150741705"></p>
<p>异常可以分为：</p>
<p>受检查的异常：编译阶段，没有被try/catch/throw包裹的话会报错。例如IO异常等。</p>
<p>不受检查的异常：编译阶段不会报错，运行阶段会出现错误。，例如：<code>NullPointerException</code>、<code>NumberFormatException</code>（字符串转换为数字）、<code>ArrayIndexOutOfBoundsException</code>（数组越界）、<code>ClassCastException</code>（类型转换错误）、<code>ArithmeticException</code>（算术错误）等。</p>
<h2 id="IO流">IO流</h2>
<ul>
<li>按照流的流向分，可以分为输入流和输出流；</li>
<li>按照操作单元划分，可以划分为字节流和字符流；</li>
<li>按照流的角色划分为节点流和处理流。</li>
</ul>
<p>java中的流都是通过这四个基类实现的：</p>
<ul>
<li>InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li>
<li>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li>
</ul>
<p>字符流：以Unicode字符为单位，一个字符占两个字节，适合处理中文文本数据。</p>
<p>字节流：一字节为传输单位。适合处理图片，歌曲，视频等文件。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/zzz.png" alt="zzz"></p>
<h2 id="值传递和引用传递">值传递和引用传递</h2>
<ul>
<li><strong>值传递</strong> ：方法接收的是实参值的拷贝，会创建副本。</li>
<li><strong>引用传递</strong> ：方法接收的直接是实参所引用的对象在堆中的地址，不会创建副本，对形参的修改将影响到实参。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">实参和形参：</span><br><span class="line">实参（实际参数） ：用于传递给函数/方法的参数，必须有确定的值。</span><br><span class="line">形参（形式参数） ：用于定义函数/方法，接收实参，不需要有确定的值。</span><br></pre></td></tr></table></figure>
<p><strong>java中只有值传递</strong></p>
<ul>
<li>如果参数是基本类型的话，很简单，传递的就是基本类型的字面量值的拷贝，会创建副本。</li>
<li>如果参数是引用类型，传递的就是<strong>实参所引用的对象在堆中地址值的拷贝</strong>，同样也会创建副本。</li>
</ul>
<h2 id="反射">反射</h2>
<p>通过反射，可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。反射是框架底层实现的基础。</p>
<p>框架的四种实现方式：</p>
<p>1.知道具体类的情况下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class alunbarClass = TargetObject.class;</span><br></pre></td></tr></table></figure>
<p>2.通过 <code>Class.forName()</code>传入类的路径获取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class alunbarClass1 = Class.forName(<span class="string">&quot;cn.kai.TargetObject&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>3.通过对象实例<code>instance.getClass()</code>获取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TargetObject o = <span class="keyword">new</span> TargetObject();</span><br><span class="line">Class alunbarClass2 = o.getClass();</span><br></pre></td></tr></table></figure>
<p>4.通过类加载器<code>xxxClassLoader.loadClass()</code>传入类路径获取:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = ClassLoader.loadClass(<span class="string">&quot;cn.kai.TargetObject&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>反射的优缺点：</p>
<p>优点：可以让咱们的代码更加灵活、为各种框架提供开箱即用的功能提供了便利。</p>
<p>缺点：让我们在运行时有了分析操作类的能力，这同样也增加了安全问题。比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点，不过，对于框架来说实际是影响不大的。</p>
<h2 id="BigDecimal解决浮点数运算精度丢失问题">BigDecimal解决浮点数运算精度丢失问题</h2>
<p>《阿里巴巴 Java 开发手册》中提到：“为了避免精度丢失，可以使用 <code>BigDecimal</code> 来进行浮点数的运算”。</p>
<p><code>BigDecimal</code> 可以实现对浮点数的运算，不会造成精度丢失。通常情况下，大部分需要浮点数精确运算结果的业务场景（比如涉及到钱的场景）都是通过 <code>BigDecimal</code> 来做的。</p>
<p>浮点数据类型会造成数据丢失：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> a = <span class="number">2.0f</span> - <span class="number">1.9f</span>;<span class="keyword">float</span> b = <span class="number">1.8f</span> - <span class="number">1.7f</span>;System.out.println(a);<span class="comment">// 0.100000024System.out.println(b);// 0.099999905System.out.println(a == b);// false</span></span><br></pre></td></tr></table></figure>
<p>原因：计算机是二进制的，而且计算机在表示一个数字时，宽度是有限的，无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况。</p>
<h2 id="comparable-和-Comparator-的区别">comparable 和 Comparator 的区别</h2>
<ul>
<li><code>comparable</code> 接口实际上是出自<code>java.lang</code>包 它有一个 <code>compareTo(Object obj)</code>方法用来排序</li>
<li><code>comparator</code>接口实际上是出自 java.util 包它有一个<code>compare(Object obj1, Object obj2)</code>方法用来排序</li>
</ul>
<p>实现Comparable进行排序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// person对象没有实现Comparable接口，所以必须实现，这样才不会出错，才可以使treemap中的数据按顺序排列</span></span><br><span class="line"><span class="comment">// 前面一个例子的String类已经默认实现了Comparable接口，详细可以查看String类的API文档，另外其他</span></span><br><span class="line"><span class="comment">// 像Integer类等都已经实现了Comparable接口，所以不需要另外实现了</span></span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * T重写compareTo方法实现按年龄来排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &gt; o.getAge()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt; o.getAge()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Comparator 定制排序服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(arrayList, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o2.compareTo(o1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="接口与抽象类的区别">接口与抽象类的区别</h2>
<p><strong>共同点</strong> ：</p>
<ul>
<li>都不能被实例化。</li>
<li>都可以包含抽象方法。</li>
<li>都可以有默认实现的方法（Java 8 可以用 <code>default</code> 关键在接口中定义默认方法）。</li>
</ul>
<p><strong>区别</strong> ：</p>
<ul>
<li>接口主要用于对类的行为进行约束，你实现了某个接口就具有了对应的行为。抽象类主要用于代码复用，强调的是所属关系（比如说我们抽象了一个发送短信的抽象类，）。</li>
<li>一个类只能继承一个类，但是可以实现多个接口。</li>
<li>接口中的成员变量只能是 <code>public static final</code> 类型的，不能被修改且必须有初始值，而抽象类的成员变量默认 default，可在子类中被重新定义，也可被重新赋值。</li>
<li>抽象类中可以有普通方法，也可以有抽象方法；接口中不能存在普通方法。</li>
</ul>
<h2 id="Java中访问修饰符的范围">Java中访问修饰符的范围</h2>
<p>public、private、protect、default访问范围如下所示：</p>
<table>
<thead>
<tr>
<th></th>
<th><strong>同一个类</strong></th>
<th><strong>同一个包</strong></th>
<th><strong>不同包的子类</strong></th>
<th><strong>不同包的非子类</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://so.csdn.net/so/search?q=Private&amp;spm=1001.2101.3001.7020">Private</a></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Default</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>Public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
</tbody>
</table>
<ul>
<li>public： Java语言中访问限制最宽的修饰符，一般称之为“公共的”。被其修饰的类、属性以及方法不仅可以跨类访问，而且允许跨包（package）访问。</li>
<li>private: Java语言中对访问权限限制的最窄的修饰符，一般称之为“私有的”。被其修饰的类、属性以及方法只能被该类的对象访问，其子类不能访问，更不能允许跨包访问。</li>
<li>protect: 介于public 和 private 之间的一种访问修饰符，一般称之为“保护形”。被其修饰的类、属性以及方法只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。</li>
<li>default：即不加任何访问修饰符，通常称为“默认访问模式“。该模式下，只允许在同一个包中进行访问。</li>
</ul>
<h2 id="Java-8新特性">Java 8新特性</h2>
<h3 id="Lambda-表达式">Lambda 表达式</h3>
<p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(parameters) -&gt; expression</span><br><span class="line">(int x, int y) -&gt; x + y </span><br><span class="line">或</span><br><span class="line">(parameters) -&gt;&#123; statements; &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 java 8 排序</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sortUsingJava8</span><span class="params">(List&lt;String&gt; names)</span></span>&#123;</span><br><span class="line">   Collections.sort(names, (s1, s2) -&gt; s1.compareTo(s2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法引用">方法引用</h3>
<p>方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。</p>
<p>使用<code>::</code>表示方法引用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Car.create( Car::<span class="keyword">new</span> )</span><br></pre></td></tr></table></figure>
<h3 id="函数话接口">函数话接口</h3>
<p>java8中引入了函数式接口新特性，使用@FunctionalInterface标识，表示有且只有一个抽象方法，但可以有多个非抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.notes.java8.functionInterface;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件描述 函数式接口:</span></span><br><span class="line"><span class="comment"> *      有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * abstract 方法，只能有一个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 允许定义默认方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is default method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 允许定义静态方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hei</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is static method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 允许定义 java.lang.Object 里的 public 方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接口的默认方法">接口的默认方法</h3>
<p>默认方法就是接口可以有实现方法，而且不需要实现类去实现其方法。</p>
<p>我们只需在方法名前面加个 default 关键字即可实现默认方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;我是一辆车!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="新的时间API">新的时间API</h3>
<p>Java 8通过发布新的Date-Time API (JSR 310)来进一步加强对日期与时间的处理。</p>
<h1>集合</h1>
<h2 id="集合概述">集合概述</h2>
<p>Java 集合， 也叫作容器，主要是由两大接口派生而来：一个是 <strong><code>Collection</code>接口，主要用于存放单一元素</strong>；另一个是 <strong><code>Map</code> 接口，主要用于存放键值对</strong>。对于<code>Collection</code> 接口，下面又有三个主要的子接口：<code>List</code>、<code>Set</code> 和 <code>Queue</code>。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/java-collection-hierarchy.9d3304ed.png" alt="img"></p>
<h3 id="List-Set-Queue-Map-四者的区别？">List, Set, Queue, Map 四者的区别？</h3>
<ul>
<li><code>List</code>(对付顺序的好帮手): 存储的元素是有序的、可重复的。</li>
<li><code>Set</code>(注重独一无二的性质): 存储的元素是无序的、不可重复的。</li>
<li><code>Queue</code>(实现排队功能的叫号机): 按特定的排队规则来确定先后顺序，存储的元素是有序的、可重复的。</li>
<li><code>Map</code>(用 key 来搜索的专家): 使用键值对（key-value）存储，类似于数学上的函数 y=f(x)，“x” 代表 key，“y” 代表 value，key 是无序的、不可重复的，value 是无序的、可重复的，每个键最多映射到一个值。</li>
</ul>
<h3 id="底层实现">底层实现</h3>
<p>List：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ArrayList                --Object[]数组</span><br><span class="line">Vector                   --Object[]数组，加synchronize锁，所以是线程安全的</span><br><span class="line">LinkedList               --双向链表</span><br></pre></td></tr></table></figure>
<p>Set：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashSet(无序，唯一): 基于 HashMap 实现的，底层采用 HashMap 来保存元素</span><br><span class="line">LinkedHashSet: LinkedHashSet 是 HashSet 的子类，并且其内部是通过 LinkedHashMap 来实现的</span><br><span class="line">TreeSet：红黑树实现</span><br></pre></td></tr></table></figure>
<p>Queue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PriorityQueue: Object[] 数组来实现二叉堆</span><br><span class="line">ArrayQueue: Object[] 数组 + 双指针</span><br></pre></td></tr></table></figure>
<p>Map:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap: Object[]数组+链表+红黑树</span><br><span class="line">HashTable：数组+链表组成的，数组是 Hashtable 的主体，链表则是主要为了解决哈希冲突而存在的</span><br><span class="line">TreeMap：红黑树（自平衡的排序二叉树）</span><br></pre></td></tr></table></figure>
<h2 id="Collection之List接口">Collection之List接口</h2>
<p>List接口的特点：数据可重复，有序</p>
<h3 id="ArrayList和Vector的区别：">ArrayList和Vector的区别：</h3>
<ul>
<li>ArrayList的底层实现是Object[]数组，适用于频繁的查找工作线程不安全。</li>
<li>Vector的底层底层也是Object[]数组，但是是线程安全的。</li>
</ul>
<h3 id="Arraylist-与-LinkedList-区别"><strong>Arraylist 与 LinkedList 区别?</strong></h3>
<ul>
<li><strong>是否保证线程安全：</strong> <code>ArrayList</code> 和 <code>LinkedList</code> 都是不同步的，也就是不保证线程安全；</li>
<li><strong>底层数据结构：</strong> <code>Arraylist</code> 底层使用的是 <strong><code>Object</code> 数组</strong>；<code>LinkedList</code> 底层使用的是 <strong>双向链表</strong> 数据结构</li>
<li>插入和删除是否受元素位置的影响：ArrayList插入删除受位置影响，LinkedList底层是双向链表，所以不受位置影响。</li>
<li><strong>是否支持快速随机访问：</strong> <code>LinkedList</code> 不支持高效的随机元素访问，而 <code>ArrayList</code> 支持。快速随机访问就是通过元素的序号快速获取元素对象(对应于<code>get(int index)</code>方法)。</li>
<li><strong>内存空间占用：</strong> ArrayList 的空间浪费主要体现在在 list 列表的结尾会预留一定的容量空间，而 LinkedList 的空间花费则体现在它的每一个元素都需要消耗比 ArrayList 更多的空间（因为要存放直接后继和直接前驱以及数据）。</li>
</ul>
<h2 id="Collection-之-Set接口">Collection 之 Set接口</h2>
<p><strong>无序性和不可重复性的含义是什么</strong></p>
<p>1、什么是<strong>无序性</strong>？无序性不等于随机性 ，无序性是指存储的数据在底层数组中并非按照数组索引的顺序添加 ，而是根据数据的哈希值决定的。</p>
<p>2、什么是<strong>不可重复性</strong>？不可重复性是指添加的元素按照 equals()判断时 ，返回 false，需要同时重写 equals()方法和 HashCode()方法。</p>
<p><strong>比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同</strong></p>
<ul>
<li><code>HashSet</code>、<code>LinkedHashSet</code> 和 <code>TreeSet</code> 都是 <code>Set</code> 接口的实现类，都能保证元素唯一，并且都不是线程安全的。</li>
<li><code>HashSet</code>、<code>LinkedHashSet</code> 和 <code>TreeSet</code> 的主要区别在于底层数据结构不同。<code>HashSet</code> 的底层数据结构是哈希表（基于 <code>HashMap</code> 实现）。<code>LinkedHashSet</code> 的底层数据结构是链表和哈希表，元素的插入和取出顺序满足 FIFO。<code>TreeSet</code> 底层数据结构是红黑树，元素是有序的，排序的方式有自然排序和定制排序。</li>
<li>底层数据结构不同又导致这三者的应用场景不同。<code>HashSet</code> 用于不需要保证元素插入和取出顺序的场景，<code>LinkedHashSet</code> 用于保证元素的插入和取出顺序满足 FIFO 的场景，<code>TreeSet</code> 用于支持对元素自定义排序规则的场景。</li>
</ul>
<h2 id="Collection之Queue接口">Collection之Queue接口</h2>
<p><code>Queue</code> 是单端队列，只能从一端插入元素，另一端删除元素，实现上一般遵循 <strong>先进先出（FIFO）</strong> 规则。</p>
<p><code>Queue</code> 扩展了 <code>Collection</code> 的接口，根据 <strong>因为容量问题而导致操作失败后处理方式的不同</strong> 可以分为两类方法: 一种在操作失败后会抛出异常，另一种则会返回特殊值。</p>
<table>
<thead>
<tr>
<th><code>Queue</code> 接口</th>
<th>抛出异常</th>
<th>返回特殊值</th>
</tr>
</thead>
<tbody>
<tr>
<td>插入队尾</td>
<td>add(E e)</td>
<td>offer(E e)</td>
</tr>
<tr>
<td>删除队首</td>
<td>remove()</td>
<td>poll()</td>
</tr>
<tr>
<td>查询队首元素</td>
<td>element()</td>
<td>peek()</td>
</tr>
</tbody>
</table>
<h2 id="Map接口">Map接口</h2>
<h3 id="HashMap-和-Hashtable-的区别">HashMap 和 Hashtable 的区别</h3>
<p><strong>线程是否安全：</strong> <code>HashMap</code> 是非线程安全的，<code>Hashtable</code> 是线程安全的,因为 <code>Hashtable</code> 内部的方法基本都经过<code>synchronized</code> 修饰。（如果你要保证线程安全的话就使用 <code>ConcurrentHashMap</code> 吧！）；</p>
<p><strong>效率：</strong> 因为线程安全的问题，<code>HashMap</code> 要比 <code>Hashtable</code> 效率高一点。另外，<code>Hashtable</code> 基本被淘汰，不要在代码中使用它；</p>
<p><strong>对 Null key 和 Null value 的支持：</strong> <code>HashMap</code> 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个；Hashtable 不允许有 null 键和 null 值，否则会抛出 <code>NullPointerException</code>。</p>
<p><strong>初始容量大小和每次扩充容量大小的不同 ：</strong> ① 创建时如果不指定容量初始值，<code>Hashtable</code> 默认的初始大小为 11，之后每次扩充，容量变为原来的 2n+1。<code>HashMap</code> 默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。② 创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 <code>HashMap</code> 会将其扩充为 2 的幂次方大小（<code>HashMap</code> 中的<code>tableSizeFor()</code>方法保证，下面给出了源代码）。也就是说 <code>HashMap</code> 总是使用 2 的幂作为哈希表的大小,后面会介绍到为什么是 2 的幂次方。</p>
<p><strong>底层数据结构：</strong> JDK1.8 以后的 <code>HashMap</code> 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制，底层实现是数组加链表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">扩容每次是2次幂的原因：减少hash碰撞</span><br><span class="line">取余(%)操作中如果除数是 2 的幂次则等价于与其除数减一的与(&amp;)操作（也就是说 hash%length==hash&amp;</span><br><span class="line">(length-1)的前提是 length 是 2 的 n 次方；）。” 并且 采用二进制位操作 &amp;，相对于%能够提高运算效率，这</span><br><span class="line">就解释了 HashMap 的长度为什么是 2 的幂次方</span><br></pre></td></tr></table></figure>
<h3 id="HashMap底层实现原理">HashMap底层实现原理</h3>
<p>JDK1.8 之后 <code>HashMap</code> 底层是 <strong>数组、链表和红黑树</strong> 。</p>
<p>HashMap 通过 key 的 hashCode 经过hash函数处理过后得到 hash 值，然后通过 (n - 1) &amp; hash 判断当前元素存放的位置（这里的 n 指的是数组的长度），如果当前位置存在元素的话，就判断该元素与要存入的元素的 hash 值以及 key 是否相同，如果相同的话，直接覆盖；不相同就通过链表法解决冲突（链表法插入时是尾部插入），当链表长度到达一定程度时，链表会变为红黑树。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220113103039649.png" alt="image-20220113103039649"></p>
<h3 id="红黑树">红黑树</h3>
<p>红黑树是一棵自平衡的二叉查找树。</p>
<p>性质：</p>
<ol>
<li>每个节点或者是黑色，或者是红色。</li>
<li>根节点是黑色。</li>
<li>每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]</li>
<li>如果一个节点是红色的，则它的子节点必须是黑色的。</li>
<li>从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。</li>
</ol>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/251730074203156.jpg" alt="img"></p>
<h3 id="ConcurrentHashMap-和-Hashtable-的区别">ConcurrentHashMap 和 Hashtable 的区别</h3>
<p><code>ConcurrentHashMap</code> 和 <code>Hashtable</code> 的区别主要体现在实现线程安全的方式上不同。</p>
<ul>
<li><strong>底层数据结构：</strong> JDK1.7 的 <code>ConcurrentHashMap</code> 底层采用 <strong>分段的数组+链表</strong> 实现，JDK1.8 采用的数据结构跟 <code>HashMap1.8</code> 的结构一样，数组+链表/红黑二叉树。<code>Hashtable</code> 和 JDK1.8 之前的 <code>HashMap</code> 的底层数据结构类似都是采用 <strong>数组+链表</strong> 的形式，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的；</li>
<li>实现线程安全的方式（重要）：ConcurrentHashMap通过Synchronize加CAS的方式进行操作。HashTable只加了一把Synchronize锁，效率十分低下。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① 在 JDK1.7 的时候，ConcurrentHashMap（分段锁）对整个桶数组进行了分割分段(Segment)，每一把锁只锁容</span><br><span class="line">器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。 到了 JDK1.8 的时候</span><br><span class="line">已经摒弃了Segment的概念，而是直接用 Node 数组+链表+红黑树的数据结构来实现，并发控制使用 synchronized</span><br><span class="line">和 CAS 来操作。</span><br><span class="line">② Hashtable(同一把锁):使用 synchronized 来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他</span><br><span class="line">线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put添加元素，也不能</span><br><span class="line">使用 get，竞争会越来越激烈效率越低。</span><br></pre></td></tr></table></figure>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220216153346780.png" alt="image-20220216153346780"></p>
<p>ConcurrentHashMap(1.8):</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/java8_concurrenthashmap.772ed191.png" alt="Java8 ConcurrentHashMap 存储结构（图片来自 javadoop）"></p>
<p>JDK1.8 的 <code>ConcurrentHashMap</code> 不再是 <strong>Segment 数组 + HashEntry 数组 + 链表</strong>，而是 <strong>Node 数组 + 链表 / 红黑树</strong>。不过，Node 只能用于链表的情况，红黑树的情况需要使用 <strong><code>TreeNode</code></strong>。当冲突链表达到一定长度时，链表会转换成红黑树。</p>
<h3 id="ConcurrentHashMap-线程安全的具体实现方式">ConcurrentHashMap 线程安全的具体实现方式</h3>
<p><code>ConcurrentHashMap</code> 取消了 <code>Segment</code> 分段锁，采用 CAS 和 <code>synchronized</code> 来保证并发安全。数据结构跟 HashMap1.8 的结构类似，数组+链表/红黑二叉树。Java 8 在链表长度超过一定阈值（8）时将链表（寻址时间复杂度为 O(N)）转换为红黑树（寻址时间复杂度为 O(log(N))）</p>
<p><code>synchronized</code> 只锁定当前链表或红黑二叉树的首节点，这样只要 hash 不冲突，就不会产生并发，效率又提升 N 倍</p>
<h3 id="ConcurrentHashMap-中的CAS锁">ConcurrentHashMap 中的CAS锁</h3>
<p>CAS锁原理：比较并替换，CAS算法是乐观锁的一种实现。CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B并返回true，否则返回false。</p>
<p>对于put操作，<strong>如果Key对应的数组元素为null，则通过CAS操作将其设置为当前值</strong>。如果Key对应的数组元素（链表表头或树的根元素）不为null，则对该元素使用synchronized关键字申请锁，然后进行操作。如果该put操作使得当前链表长度超过一定阈值，则将该链表转换为树，从而提高寻址效率。</p>
<p><strong>对于读操作，由于数组被volatile关键字修饰，因此不用担心数组的可见性问题</strong>。同时每个元素是一个Node实例（Java 7中每个元素是一个HashEntry），它的Key值和hash值都由final修饰，不可修改，无需关心它们被修改后的可见性问题。而其Value及对下一个元素的引用由volatile修饰，可见性也有保障。</p>
<h3 id="CAS锁的缺点及解决方案">CAS锁的缺点及解决方案</h3>
<p>缺点：</p>
<ul>
<li>
<p>存在ABA问题</p>
<ul>
<li>问题描述：线程t1将它的值从A变为B，再从B变为A。同时有线程t2要将值从A变为C。但CAS检查的时候会发现没有改变，但是实质上它已经发生了改变 。可能会造成数据的缺失。</li>
<li>解决方法：CAS还是类似于乐观锁，同数据乐观锁的方式给它加一个版本号或者<strong>时间戳</strong>，如AtomicStampedReference</li>
</ul>
</li>
<li>
<p>自旋锁消耗资源</p>
<ul>
<li>问题描述：多个线程争夺同一个资源时，如果自旋一直不成功，将会一直占用CPU</li>
<li>解决方法：破坏掉for死循环，当超过一定时间或者一定次数时，return退出。JDK8新增的LongAddr,和ConcurrentHashMap类似的方法。当多个线程竞争时，将粒度变小，将一个变量拆分为多个变量，达到多个线程访问多个资源的效果，最后再调用sum把它合起来</li>
</ul>
</li>
<li>
<p>多变量共享一致性问题</p>
<ul>
<li>
<p>解决方法： CAS操作是针对一个变量的，如果对多个变量操作，</p>
<p>可以加锁来解决。</p>
<p>封装成对象类解决。</p>
</li>
</ul>
</li>
</ul>
<h1>并发</h1>
<h2 id="什么是线程和进程">什么是线程和进程</h2>
<p><strong>进程</strong>：进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行就是进程从创建、运行、销毁的过程。</p>
<p><strong>线程</strong>：线程是比进程更小的资源。一个进程中可能会包含多个线程，多个线程共享进程的堆和方法区中的资源，但是每个线程都有自己的程序计数器，本地方法栈和虚拟机栈。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220216153648466.png" alt="image-20220216153648466"></p>
<p><strong>总结：</strong> 线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。线程执行开销小，但不利于资源的管理和保护；而进程正相反。</p>
<h2 id="线程间通信">线程间通信</h2>
<p>线程通信主要可以分为三种方式，分别为<strong>共享内存</strong>、<strong>消息传递</strong>和<strong>管道流</strong>。每种方式有不同的方法来实现。</p>
<ol>
<li><strong>共享内存</strong>：线程之间共享程序的<strong>公共状态</strong>，线程之间通过读-写内存中的公共状态来隐式通信。</li>
</ol>
<blockquote>
<p>volatile共享内存</p>
</blockquote>
<ol start="2">
<li><strong>消息传递</strong>：线程之间没有公共的状态，线程之间必须通过明确的发送信息来显示的进行通信。</li>
</ol>
<blockquote>
<p>wait/notify等待通知方式</p>
<p>join方式</p>
</blockquote>
<ol start="3">
<li><strong>管道流</strong>：管道输入/输出流的形式</li>
</ol>
<h2 id="进程间的通信方式">进程间的通信方式</h2>
<ol>
<li><strong>管道pipe</strong>：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。</li>
<li><strong>命名管道FIFO</strong>：有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</li>
<li><strong>消息队列MessageQueue</strong>：消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</li>
<li><strong>共享存储SharedMemory</strong>：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。</li>
<li><strong>信号量Semaphore</strong>：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</li>
<li><strong>套接字Socket</strong></li>
<li><strong>信号 ( sinal )</strong> ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</li>
</ol>
<h2 id="并发与并行">并发与并行</h2>
<ul>
<li><strong>并发：</strong> 同一时间段，多个任务都在执行 (单位时间内不一定同时执行)；</li>
<li><strong>并行：</strong> 单位时间内，多个任务同时执行。</li>
</ul>
<h2 id="多线程可能存在的问题">多线程可能存在的问题</h2>
<p>并发编程的目的就是为了能提高程序的执行效率提高程序运行速度，但是并发编程并不总是能提高程序运行速度的，而且并发编程可能会遇到很多问题，比如：<strong>内存泄漏、死锁、线程不安全</strong>等等。</p>
<ul>
<li>原子性问题：当线程A正在执行写任务时，如果此时线程切换，导致线程写入存在问题。可以使用加锁操作。synchronize锁。</li>
<li>有序性问题：例如单例模式中的啥双检索模式，就是为了保证只创建一次对象。volition关键字防止指令重排。</li>
<li>可见性问题：变量修改对其他线程不可见。使用volition关键字</li>
</ul>
<h2 id="线程的生命周期和状态">线程的生命周期和状态?</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220216154311065.png" alt="image-20220216154311065"></p>
<p>线程在生命周期中并不是固定处于某一个状态而是随着代码的执行在不同状态之间切换。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220206172846942.png" alt="image-20220206172846942"></p>
<p>WAITING：等待状态，调用了wait（）方法</p>
<p>TIMED_WAITING：超时等待状态，调用thread.sleep（）方法。</p>
<p>BLOCKED：在线程同步中，没有获得锁的线程会进入到此状态。</p>
<h2 id="线程死锁">线程死锁</h2>
<p>死锁：多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。</p>
<p>死锁的四个条件：</p>
<ul>
<li>互斥性</li>
<li>不可剥夺性</li>
<li>请求与保持</li>
<li>循环等待条件</li>
</ul>
<p>如何预防死锁：</p>
<ol>
<li><strong>破坏请求与保持条件</strong> ：一次性申请所有的资源。</li>
<li><strong>破坏不剥夺条件</strong> ：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。</li>
<li><strong>破坏循环等待条件</strong> ：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。</li>
<li>安全模式，按照某种顺序来为每个进行分配资源，直到满足每个线程的最大所需资源，从而找到一条安全运行序列。</li>
</ol>
<h2 id="sleep-方法和-wait-方法区别和共同点">sleep() 方法和 wait() 方法区别和共同点?</h2>
<p>两者都可以暂停线程的执行。</p>
<p>两者最主要的区别在于：<strong><code>sleep()</code> 方法没有释放锁，而 <code>wait()</code> 方法释放了锁</strong> 。</p>
<p><code>wait()</code> 通常被用于线程间交互/通信，<code>sleep()</code>通常被用于暂停执行。</p>
<p><code>wait()</code> 方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的 <code>notify()</code>或者 <code>notifyAll()</code> 方法。<code>sleep()</code>方法执行完成后，线程会自动苏醒。或者可以使用 <code>wait(long timeout)</code> 超时后线程会自动苏醒。</p>
<h2 id="调用-start-方法时会执行-run-方法，为什么我们不能直接调用-run-方法？">调用 start() 方法时会执行 run() 方法，为什么我们不能直接调用 run() 方法？</h2>
<p>new 一个 Thread，线程进入了新建状态。调用 <code>start()</code>方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。 <code>start()</code> 会执行线程的相应准备工作，然后自动执行 <code>run()</code> 方法的内容，这是真正的多线程工作。 但是，<strong>直接执行 <code>run()</code> 方法，会把 <code>run()</code> 方法当成一个 main 线程下的普通方法去执行，并不会在某个线程中执行它，所以这并不是多线程工作。</strong></p>
<p><strong>总结： 调用 <code>start()</code> 方法方可启动线程并使线程进入就绪状态，直接执行 <code>run()</code> 方法的话不会以多线程的方式执行。</strong></p>
<h2 id="synchronized-关键字的了解">synchronized 关键字的了解</h2>
<p><code>synchronized</code> 关键字解决的是多个线程之间访问资源的同步性，<code>synchronized</code>关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。</p>
<h3 id="怎么使用-synchronized-关键字">怎么使用 synchronized 关键字</h3>
<p><strong>1.修饰实例方法:</strong> 作用于当前对象实例加锁，进入同步代码前要获得 <strong>当前对象实例的锁</strong></p>
<p><strong>2.修饰静态方法:</strong> 访问静态 <code>synchronized</code> 方法占用的锁是当前类的锁</p>
<p><strong>3.修饰代码块</strong> ：指定加锁对象，对给定对象/类加锁。<code>synchronized(this|object)</code> 表示进入同步代码库前要获得<strong>给定对象的锁</strong>。<code>synchronized(类.class)</code> 表示进入同步代码前要获得 <strong>当前 class 的锁</strong> 。</p>
<h3 id="synchronized的原理">synchronized的原理</h3>
<p><code>synchronized</code> 同步语句块的实现使用的是 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。</p>
<p><code>synchronized</code> 修饰的方法并没有 <code>monitorenter</code> 指令和 <code>monitorexit</code> 指令，取得代之的确实是 <code>ACC_SYNCHRONIZED</code> 标识，该标识指明了该方法是一个同步方法。</p>
<p><strong>不过两者的本质都是对对象监视器 monitor 的获取。</strong></p>
<h3 id="JDK1-6-之后的-synchronized-关键字底层做了哪些优化，可以详细介绍一下这些优化吗">JDK1.6 之后的 synchronized 关键字底层做了哪些优化，可以详细介绍一下这些优化吗</h3>
<p>JDK1.6 对锁的实现引入了大量的优化，如偏向锁、轻量级锁、自旋锁、适应性自旋锁、锁消除、锁粗化等技术来减少锁操作的开销。</p>
<p>锁主要存在四种状态，依次是：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态，他们会随着竞争的激烈而逐渐升级。注意锁可以升级不可降级，这种策略是为了提高获得锁和释放锁的效率。</p>
<h3 id="synchronized-和-ReentrantLock-的区别">synchronized 和 ReentrantLock 的区别</h3>
<ol>
<li>两者都是可重入锁。可重入锁指的是自己可以再次获取自己中的内部锁。</li>
<li>synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API。</li>
<li>ReentrantLock 比 synchronized 增加了一些高级功能
<ul>
<li><strong>等待可中断</strong> : <code>ReentrantLock</code>提供了一种能够中断等待锁的线程的机制，通过 <code>lock.lockInterruptibly()</code> 来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。</li>
<li><strong>可实现公平锁</strong></li>
<li><strong>可实现选择性通知（锁可以绑定多个条件）</strong>: <code>synchronized</code>关键字与<code>wait()</code>和<code>notify()</code>/<code>notifyAll()</code>方法相结合可以实现等待/通知机制。<code>ReentrantLock</code>类当然也可以实现，但是需要借助于<code>Condition</code>接口与<code>newCondition()</code>方法。</li>
</ul>
</li>
</ol>
<h2 id="volatile-关键字">volatile 关键字</h2>
<p>作用：</p>
<ol>
<li>防止JVM指令重排。</li>
<li>保证变量的可见性。可以实现共享内存。</li>
</ol>
<p>新建一个对象时的顺序如下：</p>
<ol>
<li>分配内存空间</li>
<li>初始化对象</li>
<li>将对象指向分配的内存空间</li>
</ol>
<h3 id="并发编程的三个重要特点">并发编程的三个重要特点</h3>
<p><strong>原子性</strong> : 一个的操作或者多次操作，要么所有的操作全部都得到执行并且不会受到任何因素的干扰而中断，要么所有的操作都执行，要么都不执行。<code>synchronized</code> 可以保证代码片段的原子性。</p>
<p><strong>可见性</strong> ：当一个线程对共享变量进行了修改，那么另外的线程都是立即可以看到修改后的最新值。<code>volatile</code> 关键字可以保证共享变量的可见性。</p>
<p><strong>有序性</strong> ：代码在执行的过程中的先后顺序，Java 在编译器以及运行期间的优化，代码的执行顺序未必就是编写代码时候的顺序。<code>volatile</code> 关键字可以禁止指令进行重排序优化</p>
<h3 id="synchronized-关键字和-volatile-关键字的区别">synchronized 关键字和 volatile 关键字的区别</h3>
<p><code>synchronized</code> 关键字和 <code>volatile</code> 关键字是两个互补的存在，而不是对立的存在！</p>
<ul>
<li><strong><code>volatile</code> 关键字</strong>是线程同步的<strong>轻量级实现</strong>，所以 <strong><code>volatile</code>性能肯定比<code>synchronized</code>关键字要好</strong> 。但是 <strong><code>volatile</code> 关键字只能用于变量而 <code>synchronized</code> 关键字可以修饰方法以及代码块</strong> 。</li>
<li><strong><code>volatile</code> 关键字能保证数据的可见性，但不能保证数据的原子性。<code>synchronized</code> 关键字两者都能保证。</strong></li>
<li><strong><code>volatile</code>关键字主要用于解决变量在多个线程之间的可见性，而 <code>synchronized</code> 关键字解决的是多个线程之间访问资源的同步性</strong></li>
</ul>
<h2 id="线程池">线程池</h2>
<h3 id="为什么要用线程池？">为什么要用线程池？</h3>
<p><strong>线程池</strong>提供了一种限制和管理资源（包括执行一个任务）。 每个<strong>线程池</strong>还维护一些基本统计信息，例如已完成任务的数量。</p>
<p><strong>使用线程池的好处</strong>：</p>
<ul>
<li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li>
<li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li>
<li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控</li>
</ul>
<h3 id="创建线程的三种方式">创建线程的三种方式</h3>
<ol>
<li>继承Thread接口类。</li>
<li>实现Runnable接口。</li>
<li>实现Callable接口。</li>
</ol>
<h3 id="实现-Runnable-接口和-Callable-接口的区别">实现 Runnable 接口和 Callable 接口的区别</h3>
<p>Runable接口调用的是run方法，Callable接口调用的是call方法。其中Runnable方法是有返回值的。</p>
<p>在底层中，Runnable可以Executors方法，将Runnable对象转换为Callable对象。</p>
<h3 id="执行-execute-方法和-submit-方法的区别是什么呢？">执行 execute()方法和 submit()方法的区别是什么呢？</h3>
<p><strong><code>execute()</code>方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功与否；</strong></p>
<p><strong><code>submit()</code>方法用于提交需要返回值的任务。线程池会返回一个 <code>Future</code> 类型的对象，通过这个 <code>Future</code> 对象可以判断任务是否执行成功</strong>，并且可以通过 <code>Future</code> 的 <code>get()</code>方法来获取返回值，<code>get()</code>方法会阻塞当前线程直到任务完成，而使用 <code>get(long timeout，TimeUnit unit)</code>方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完。</p>
<h3 id="创建线程池的方法">创建线程池的方法</h3>
<p>方式一：通过构造方法实现。最好使用ThreadPoolExecutor 。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220209153610235.png" alt="image-20220209153610235"></p>
<p>方式二：通过 Executor 框架的工具类 Executors 来实现。</p>
<h3 id="创建线程池的七大参数">创建线程池的七大参数</h3>
<p>重要参数</p>
<ol>
<li><strong><code>corePoolSize</code> ：核心线程池数。</strong></li>
<li><strong><code>maximumPoolSize</code> ：线程池的最大容量。</strong></li>
<li><strong><code>workQueue</code>：工作队列/任务队列。</strong></li>
</ol>
<p>其他参数</p>
<ol>
<li><strong><code>keepAliveTime</code></strong>：超时等待时间，线程的最长等待时间。</li>
<li><strong><code>unit</code></strong> ：时间的单位。</li>
<li><strong><code>handler</code></strong> ：拒绝策略。当线程池满了时，需要执行那种策略。默认是抛出异常。</li>
<li><strong><code>threadFactory</code></strong> ：创建线程的工厂。通过工厂模式创建线程。</li>
</ol>
<h3 id="常见的拒绝策略">常见的拒绝策略</h3>
<p>拒绝策略：如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时，<code>ThreadPoolTaskExecutor</code> 定义一些策略:</p>
<p><strong><code>ThreadPoolExecutor.AbortPolicy</code>：</strong> 抛出 <code>RejectedExecutionException</code>来拒绝新任务的处理。</p>
<p><strong><code>ThreadPoolExecutor.CallerRunsPolicy</code>：</strong> 使用传递任务的线程来执行次任务。</p>
<p><strong><code>ThreadPoolExecutor.DiscardPolicy</code>：</strong> 不处理新任务，直接丢弃掉。</p>
<p><strong><code>ThreadPoolExecutor.DiscardOldestPolicy</code>：</strong> 此策略将丢弃最早的未处理的任务请求。</p>
<h3 id="线程池的运行原理">线程池的运行原理</h3>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220209155822709.png" alt="image-20220209155822709"></p>
<h3 id="Thread类和线程池的区别">Thread类和线程池的区别</h3>
<p>Thread类的弊端：</p>
<ul>
<li>每次new Thread新建对象性能差。</li>
<li>线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或oom。</li>
<li>缺乏更多功能，如定时执行、定期执行、线程中断。</li>
</ul>
<p>使用线程池的好处：</p>
<ul>
<li>重用存在的线程，减少对象创建、消亡的开销，性能佳。</li>
<li>可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。</li>
<li>提供定时执行、定期执行、单线程、并发数控制等功能。</li>
</ul>
<h2 id="抽象队列同步器AQS">抽象队列同步器AQS</h2>
<p>AQS 的全称为（<code>AbstractQueuedSynchronizer</code>），这个类在<code>java.util.concurrent.locks</code>包下面。</p>
<p>AQS 是一个用来构建锁和同步器的框架，使用 AQS 能简单且高效地构造出大量应用广泛的同步器 <code>ReentrantLock</code>，<code>Semaphore</code>是基于 AQS 的。</p>
<p>AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁实现的，即将暂时获取不到锁的线程加入到队列中</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220216160218745.png" alt="image-20220216160218745"></p>
<p>aqs中定义共享资源的两种方式：</p>
<ol>
<li>独占。</li>
<li>共享。</li>
</ol>
<h3 id="AQS组件">AQS组件</h3>
<p><strong><code>Semaphore</code>(信号量)-允许多个线程同时访问：</strong> <code>synchronized</code> 和 <code>ReentrantLock</code> 都是一次只允许一个线程访问某个资源，<code>Semaphore</code>(信号量)可以指定多个线程同时访问某个资源。</p>
<p><strong><code>CountDownLatch</code>（倒计时器）：</strong> <code>CountDownLatch</code> 是一个同步工具类，用来协调多个线程之间的同步。这个工具通常用来控制线程等待，它可以让某一个线程等待直到倒计时结束，再开始执行。</p>
<p><strong><code>CyclicBarrier</code>(循环栅栏)：</strong> <code>CyclicBarrier</code> 和 <code>CountDownLatch</code> 非常类似，它也可以实现线程间的技术等待，但是它的功能比 <code>CountDownLatch</code> 更加复杂和强大。主要应用场景和 <code>CountDownLatch</code> 类似。<code>CyclicBarrier</code> 的字面意思是可循环使用（<code>Cyclic</code>）的屏障（<code>Barrier</code>）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。<code>CyclicBarrier</code> 默认的构造方法是 <code>CyclicBarrier(int parties)</code>，其参数表示屏障拦截的线程数量，每个线程调用 <code>await()</code> 方法告诉 <code>CyclicBarrier</code> 我已经到达了屏障，然后当前线程被阻塞。</p>
<p>循环栅栏的使用场景：</p>
<p>比如写入多个文件时，设置循环栅栏，可以在所有文件都写入完成之后在返回。</p>
<h1>JVM</h1>
<h2 id="Java内存区域">Java内存区域</h2>
<h3 id="运行时数据区">运行时数据区</h3>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220216160523936.png" alt="image-20220216160523936"></p>
<p><strong>线程私有的：</strong></p>
<ul>
<li>
<p>程序计数器：最小的一块内存，但是运行的效率最快，相当于字节码运行的行号解释器。**字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。**程序计数器是Java内存中唯一一个不会出现OutOfMemory的区域，因为它随着线程的创建而创建，随着线程的结束而死亡。</p>
</li>
<li>
<p>虚拟机栈：描述的是 Java 方法执行的内存模型，每次方法调用的数据都是通过栈传递的。Java内存可以粗略的分为堆内存和栈内存，其中栈内存指的就是虚拟机栈。Java 虚拟机栈是由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。Java 虚拟机栈会出现两种错误：<code>StackOverFlowError</code> 和 <code>OutOfMemoryError</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Java 栈可以类比数据结构中栈，Java 栈中保存的主要内容是栈帧，每一次函数调用都会有一个对应的栈帧被压入 </span><br><span class="line">Java 栈，每一个函数调用结束后，都会有一个栈帧被弹出。</span><br><span class="line">Java 方法有两种返回方式： return 语句; 抛出异常。 不管哪种返回方式都会导致栈帧被弹出。</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>本地方法栈：和虚拟机栈所发挥的作用非常相似，区别是： <strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务</strong>。</p>
</li>
</ul>
<p><strong>线程共享的：</strong></p>
<ul>
<li>
<p>堆：Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。<strong>此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为什么说“几乎”？</span><br><span class="line">从 JDK 1.7 开始已经默认开启逃逸分析，如果某些方法中的对象引用没有被返回或者未被外面使用（也就是未逃逸</span><br><span class="line">出去），那么对象可以直接在栈上分配内存。</span><br></pre></td></tr></table></figure>
<p>Java 堆是垃圾收集器管理的主要区域，因此也被称作<strong>GC 堆（Garbage Collected Heap）</strong>。从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以 Java 堆还可以细分为：新生代和老年代；再细致一点有：Eden 空间、From Survivor、To Survivor 空间等。<strong>进一步划分的目的是更好地回收内存，或者更快地分配内存。</strong></p>
<p>在JDK7之前，堆内存通常分为：新生代，老生代和永生代。永生代是永远不会被垃圾回收的，这就可能会导致堆内存发生溢出。所以在JDK8彻底移除了永生代，取而代之的是元空间，元空间使用的是直接内存。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220213132859916.png" alt="image-20220213132859916"></p>
<p>**上图所示的 Eden 区、两个 Survivor 区都属于新生代（为了区分，这两个 Survivor 区域按照顺序被命名为 from 和 to），中间一层属于老年代。**对象在Eden空间中分配内存，经历过一次垃圾回收之后进入survivor区，当经历过n次垃圾回收之后，就会变成老生代。老生代是一个设置好的阈值。</p>
</li>
<li>
<p>方法区：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然 <strong>Java 虚拟机规范把方法区描述为堆的一个逻辑部分</strong>，但是它却有一个别名叫做 <strong>Non-Heap（非堆）</strong>，目的应该是与 Java 堆区分开来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为什么使用元空间代替永生代？</span><br><span class="line">1.整个永久代有一个 JVM 本身设置的固定大小上限，无法进行调整，而元空间使用的是直接内存，受本机可用内存</span><br><span class="line">的限制，虽然元空间仍旧可能溢出，但是比原来出现的几率会更小。</span><br><span class="line">2.元空间里面存放的是类的元数据，这样加载多少类的元数据就不由 MaxPermSize 控制了, 而由系统的实际可用</span><br><span class="line">空间来控制，这样能加载的类就更多了</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>直接内存 (非运行时数据区的一部分)：<strong>直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 OutOfMemoryError 错误出现。</strong></p>
</li>
</ul>
<h3 id="运行时的常量池">运行时的常量池</h3>
<p>JDK1.7之前，运行时常量池是方法区的一部分。1.8之后，运行时常量池存放在堆内存中。</p>
<p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 错误。</p>
<h2 id="Java对象的相关探讨">Java对象的相关探讨</h2>
<h3 id="对象的创建">对象的创建</h3>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220213134107121.png" alt="image-20220213134107121"></p>
<ol>
<li>类加载检查：虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</li>
<li>分配内存：有空闲列表和指针碰撞两种方式。</li>
<li>初始化零值：内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。</li>
<li>设置对象头：初始化零值完成之后，<strong>虚拟机要对对象进行必要的设置</strong>，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 <strong>这些信息存放在对象头中。</strong> 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。 ----- 著作权归Guide哥所有。</li>
<li>执行init方法：此时，从虚拟机的角度看，对象已经创建好了。但是只有执行init方法，从Java对象的角度看，此对象才算是创建成功。</li>
</ol>
<h3 id="对象的内存布局">对象的内存布局</h3>
<p>对象在内存中的布局可以分为 3 块区域：<strong>对象头</strong>、<strong>实例数据</strong>和<strong>对齐填充</strong>。</p>
<p><strong>Hotspot 虚拟机的对象头包括两部分信息</strong>，<strong>第一部分用于存储对象自身的运行时数据</strong>（哈希码、GC 分代年龄、锁状态标志等等），<strong>另一部分是类型指针</strong>，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p>
<p><strong>实例数据部分是对象真正存储的有效信息</strong>，也是在程序中所定义的各种类型的字段内容。</p>
<p><strong>对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。</strong></p>
<h3 id="对象的访问定位">对象的访问定位</h3>
<p>主要有两种方式：使用句柄和直接指针两种。</p>
<p><strong>句柄：</strong> 如果使用句柄的话，那么 Java 堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息；</p>
<p><strong>直接指针：</strong> 如果使用直接指针访问，那么 Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而 reference 中存储的直接就是对象的地址。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220213135256336.png" alt="image-20220213135256336"></p>
<h2 id="JVM垃圾回收机制">JVM垃圾回收机制</h2>
<h3 id="判断对象死亡的方法">判断对象死亡的方法</h3>
<ul>
<li>
<p>引用计数法</p>
<p>给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加 1；当引用失效，计数器就减 1；任何时候计数器为 0 的对象就是不可能再被使用的。</p>
</li>
<li>
<p>可达性分析法</p>
<p>这个算法的基本思想就是通过一系列的称为 <strong>“GC Roots”</strong> 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的，需要被回收。</p>
</li>
</ul>
<p>GC root：</p>
<ul>
<li>虚拟机栈(栈帧中的本地变量表)中引用的对象</li>
<li>本地方法栈(Native 方法)中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>所有被同步锁持有的对象</li>
</ul>
<h3 id="引用">引用</h3>
<ul>
<li>强引用：永远不会被回收</li>
<li>软引用：内存足够时，不会被回收</li>
<li>弱引用：当发生垃圾回收时，会被回收</li>
<li>虚引用：不论何时，都可能被回收</li>
</ul>
<h3 id="如何判断一个类是无用的类">如何判断一个类是无用的类</h3>
<ul>
<li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。</li>
<li>加载该类的 <code>ClassLoader</code> 已经被回收。</li>
<li>该类对应的 <code>java.lang.Class</code> 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>
</ul>
<h3 id="垃圾收集算法">垃圾收集算法</h3>
<ul>
<li>标记-清除算法：产生大量的内存碎片</li>
<li>标记-复制</li>
<li>标记-整理</li>
<li>分代收集算法</li>
</ul>
<h3 id="垃圾收集器">垃圾收集器</h3>
<ul>
<li>Serial 收集器：单线程，<strong>新生代采用标记-复制算法，老年代采用标记-整理算法。</strong></li>
<li>ParNew 收集器：多线程版本</li>
<li>CMS 收集器：收集器是一种以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用。</li>
<li>G1 收集器：G1 (Garbage-First) 是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足 GC 停顿时间要求的同时,还具备高吞吐量性能特征.</li>
</ul>
<h2 id="类加载">类加载</h2>
<h3 id="类的声明周期">类的声明周期</h3>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220218152504496.png" alt="image-20220218152504496"></p>
<h3 id="类加载的过程">类加载的过程</h3>
<p>Class 文件需要加载到虚拟机中之后才能运行和使用，那么虚拟机是如何加载这些 Class 文件呢？</p>
<p>系统加载 Class 类型的文件主要三步：<strong>加载-&gt;连接-&gt;初始化</strong>。连接过程又可分为三步：<strong>验证-&gt;准备-&gt;解析</strong></p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220218152615647.png" alt="image-20220218152615647"></p>
<p><strong>加载：</strong></p>
<ol>
<li>通过全类名获取定义此类的二进制字节流</li>
<li>将字节流所代表的静态存储结构转换为方法区的运行时数据结构</li>
<li>在内存中生成一个代表该类的 <code>Class</code> 对象，作为方法区这些数据的访问入口</li>
</ol>
<p><strong>验证</strong>：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220218152807924.png" alt="image-20220218152807924"></p>
<p><strong>准备</strong>：</p>
<p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段</p>
<p><strong>解析：</strong></p>
<p>把常量池中的符号引用替换成直接引用</p>
<p><strong>初始化</strong>：</p>
<p>初始化阶段是执行初始化方法 <code>&lt;clinit&gt; ()</code>方法的过程</p>
<h3 id="双亲委派模型">双亲委派模型</h3>
<p>每一个类都有一个对应它的类加载器。系统中的 ClassLoader 在协同工作的时候会默认使用 <strong>双亲委派模型</strong> 。即在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。加载的时候，首先会把该请求委派给父类加载器的 <code>loadClass()</code> 处理，因此所有的请求最终都应该传送到顶层的启动类加载器 <code>BootstrapClassLoader</code> 中。当父类加载器无法处理时，才由自己来处理。当父类加载器为 null 时，会使用启动类加载器 <code>BootstrapClassLoader</code> 作为父类加载器。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220218153040495.png" alt="image-20220218153040495"></p>
<p><strong>好处</strong>：</p>
<p>双亲委派模型保证了 Java 程序的稳定运行，可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 API 不被篡改。如果没有使用双亲委派模型，而是每个类加载器加载自己的话就会出现一些问题，比如我们编写一个称为 <code>java.lang.Object</code> 类的话，那么程序运行的时候，系统就会出现多个不同的 <code>Object</code> 类。</p>
<h3 id="如何打破双亲委派机制">如何打破双亲委派机制</h3>
<p>自定义加载器的话，需要继承 <code>ClassLoader</code> 。如果我们不想打破双亲委派模型，就重写 <code>ClassLoader</code> 类中的 <code>findClass()</code> 方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。但是，<strong>如果想打破双亲委派模型则需要重写 <code>loadClass()</code> 方法</strong></p>
<h1>数据库</h1>
<h2 id="基础知识">基础知识</h2>
<h3 id="数据库范式了解吗">数据库范式了解吗?</h3>
<ul>
<li>1NF：属性不可再分。</li>
<li>2NF：1NF 的基础之上，消除了非主属性对于码的部分函数依赖。</li>
<li>3NF：3NF 在 2NF 的基础之上，消除了非主属性对于码的传递函数依赖</li>
</ul>
<h3 id="drop、delete-与-truncate-区别？">drop、delete 与 truncate 区别？</h3>
<ul>
<li>drop(丢弃数据): <code>drop table 表名</code> ，直接将表都删除掉，在删除表的时候使用。</li>
<li>truncate (清空数据) : <code>truncate table 表名</code> ，只删除表中的数据，再插入数据的时候自增长 id 又从 1 开始，在清空表中数据的时候使用。</li>
<li>delete（删除数据） : <code>delete from 表名 where 列名=值</code>，删除某一列的数据，如果不加 where 子句和<code>truncate table 表名</code>作用类似。</li>
</ul>
<p>执行速度：drop&gt;truncate&gt;delete</p>
<h3 id="数据库设计通常分为哪几步">数据库设计通常分为哪几步?</h3>
<ol>
<li><strong>需求分析</strong> : 分析用户的需求，包括数据、功能和性能需求。</li>
<li><strong>概念结构设计</strong> : 主要采用 E-R 模型进行设计，包括画 E-R 图。</li>
<li><strong>逻辑结构设计</strong> : 通过将 E-R 图转换成表，实现从 E-R 模型到关系模型的转换。</li>
<li><strong>物理结构设计</strong> : 主要是为所设计的数据库选择合适的存储结构和存取路径。</li>
<li><strong>数据库实施</strong> : 包括编程、测试和试运行</li>
<li><strong>数据库的运行和维护</strong> : 系统的运行与数据库的日常维护。</li>
</ol>
<h2 id="MySQL数据库">MySQL数据库</h2>
<h3 id="Char和VarChar的区别">Char和VarChar的区别</h3>
<ol>
<li>
<p>最大长度：</p>
<p>char最大长度是255字符，varchar最大长度是65535个字节。</p>
</li>
<li>
<p>定长：</p>
<p>char是定长的，不足的部分用隐藏空格填充，varchar是不定长的。</p>
</li>
<li>
<p>空间使用：</p>
<p>char会浪费空间，varchar会更加节省空间。</p>
</li>
<li>
<p>查找效率：</p>
<p>char查找效率会很高，varchar查找效率会更低。</p>
</li>
<li>
<p>尾部空格：</p>
<p>char插入时可省略，vaechar插入时不会省略，查找时省略。</p>
</li>
</ol>
<h3 id="存储引擎">存储引擎</h3>
<p>5.5版本之前 ：MyISAM。</p>
<p>5.5版本之后 ： InnoDB。</p>
<h3 id="MyISAM-和-InnoDB-的区别">MyISAM 和 InnoDB 的区别</h3>
<ol>
<li>MyISAM 只有表级锁(table-level locking)，而 InnoDB 支持行级锁(row-level locking)和表级锁,默认为行级锁。</li>
<li>MyISAM 不提供事务支持。InnoDB 提供事务支持，具有提交(commit)和回滚(rollback)事务的能力。</li>
<li>MyISAM 不支持外键，而 InnoDB 支持。</li>
<li>MyISAM 不支持数据库异常崩溃后的安全恢复，而 InnoDB 支持。</li>
</ol>
<h3 id="什么是事务">什么是事务</h3>
<p><strong>事务是逻辑上的一组操作，要么都执行，要么都不执行。</strong></p>
<h3 id="事务的特性（ACID）">事务的特性（ACID）</h3>
<ul>
<li><strong>原子性</strong>（<code>Atomicity</code>） ： 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li>
<li><strong>一致性</strong>（<code>Consistency</code>）： 执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；</li>
<li><strong>隔离性</strong>（<code>Isolation</code>）： 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</li>
<li><strong>持久性</strong>（<code>Durability</code>）： 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li>
<li></li>
</ul>
<h3 id="MySQL中InnoDB引擎是怎么保证ACID的">MySQL中InnoDB引擎是怎么保证ACID的</h3>
<ul>
<li>MySQL InnoDB 引擎使用 <strong>redo log(重做日志)</strong> 保证事务的<strong>持久性</strong>，使用 <strong>undo log(回滚日志)</strong> 来保证事务的<strong>原子性</strong>。</li>
<li>MySQL InnoDB 引擎通过 <strong>锁机制</strong>、<strong>MVCC</strong> 等手段来保证事务的隔离性（ 默认支持的隔离级别是 <strong><code>REPEATABLE-READ</code></strong> ）。</li>
<li>保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。</li>
</ul>
<h3 id="MVCC实现的原理">MVCC实现的原理</h3>
<p>数据库并发的场景：</p>
<ul>
<li><code>读-读</code>：不存在任何问题，也不需要并发控制</li>
<li><code>读-写</code>：有线程安全问题，可能会造成事务隔离性问题，可能遇到脏读，幻读，不可重复读</li>
<li><code>写-写</code>：有线程安全问题，可能会存在更新丢失问题，比如第一类更新丢失，第二类更新丢失</li>
</ul>
<p>MVCC能解决<strong>读-写</strong>的线程安全问题，想要彻底解决就需要MVCC+锁机制</p>
<p><strong>原理：</strong></p>
<p>MVCC的目的就是多版本并发控制，在数据库中的实现，就是为了解决<code>读写冲突</code>，它的实现原理主要是依赖记录中的 <code>3个隐式字段</code>，<code>undo日志</code> ，<code>Read View</code> 来实现的。</p>
<p>三个隐藏字段：</p>
<ul>
<li><code>DB_TRX_ID</code><br>
6byte，最近修改(<code>修改/插入</code>)事务ID：记录创建这条记录/最后一次修改该记录的事务ID</li>
<li><code>DB_ROLL_PTR</code><br>
7byte，回滚指针，指向这条记录的上一个版本（存储于rollback segment里）</li>
<li><code>DB_ROW_ID</code><br>
6byte，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以<code>DB_ROW_ID</code>产生一个聚簇索引</li>
</ul>
<p><strong>具体实现</strong>：</p>
<p><strong>innodb会为每一行添加两个字段，分别表示该行创建的版本和删除的版本，填入的是事务的版本号，这个版本号随着事务的创建不断递增</strong>。在repeated read的隔离级别（事务的隔离级别请看这篇文章）下，具体各种数据库操作的实现：</p>
<ul>
<li>
<p>select：满足以下两个条件innodb会返回该行数据：（1）该行的创建版本号小于等于当前版本号，用于保证在select操作之前所有的操作已经执行落地。（2）该行的删除版本号大于当前版本或者为空。删除版本号大于当前版本意味着有一个并发事务将该行删除了。</p>
</li>
<li>
<p>insert：将新插入的行的创建版本号设置为当前系统的版本号。</p>
</li>
<li>
<p>delete：将要删除的行的删除版本号设置为当前系统的版本号。</p>
</li>
<li>
<p>update：不执行原地update，而是转换成insert + delete。将旧行的删除版本号设置为当前版本号，并将新行insert同时设置创建版本号为当前版本号。</p>
</li>
</ul>
<p>其中，写操作（insert、delete和update）执行时，需要将系统版本号递增。</p>
<p>由于旧数据并不真正的删除，所以必须对这些数据进行清理，innodb会开启一个后台线程执行清理工作，具体的规则是将删除版本号小于当前系统版本的行删除，这个过程叫做purge。</p>
<h3 id="并发事务带来哪些问题">并发事务带来哪些问题?</h3>
<ul>
<li><strong>脏读（Dirty read）:</strong> 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</li>
<li><strong>丢失修改（Lost to modify）:</strong> 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务 1 读取某表中的数据 A=20，事务 2 也读取 A=20，事务 1 修改 A=A-1，事务 2 也修改 A=A-1，最终结果 A=19，事务 1 的修改被丢失。</li>
<li><strong>不可重复读（Unrepeatable read）:</strong> 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</li>
<li><strong>幻读（Phantom read）:</strong> 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</li>
</ul>
<p><strong>不可重复读和幻读区别：</strong></p>
<p>不可重复读的重点是<strong>修改</strong>，比如多次读取一条记录发现其中某些列的值被修改；幻读的重点在于<strong>新增或者删除</strong>，比如多次读取一条记录发现记录增多或减少了</p>
<h3 id="事务隔离级别有哪些">事务隔离级别有哪些?</h3>
<p>MySQL数据库的默认隔离级别是：可重复读</p>
<ul>
<li>READ-UNCOMMITTED(读取未提交)： 最低的隔离级别，允许读取尚未提交的数据变更</li>
<li><strong>READ-<strong>COMMITTED</strong>(读取已提交)：</strong> 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong>。</li>
<li>REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生</strong>。</li>
<li>SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">隔离级别</th>
<th style="text-align:center">脏读</th>
<th style="text-align:center">不可重复读</th>
<th style="text-align:center">幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">READ-UNCOMMITTED</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">READ-COMMITTED</td>
<td style="text-align:center">×</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">REPEATABLE-READ</td>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">SERIALIZABLE</td>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
</tr>
</tbody>
</table>
<h3 id="MySQL-InnoDB什么时候使用表锁">MySQL InnoDB什么时候使用表锁</h3>
<ul>
<li>
<p>第一种情况是：事务需要更新大部分或全部数据，表又比较大，如果使用默认的行锁，不仅这个事务执行效率低，而且可能造成其他事务长时间锁等待和锁冲突，这种情况下可以考虑使用表锁来提高该事务的执行速度。</p>
</li>
<li>
<p>第二种情况是：事务涉及多个表，比较复杂，很可能引起死锁，造成大量事务回滚。这种情况也可以考虑一次性锁定事务涉及的表，从而避免死锁、减少数据库因事务回滚带来的开销。</p>
</li>
</ul>
<p>添加表锁：</p>
<p>lock table</p>
<h3 id="牛客网项目中，数据表解释">牛客网项目中，数据表解释</h3>
<p><strong>私信数据表：</strong></p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220217101951936.png" alt="image-20220217101951936"></p>
<p>主要包括主键id；发送方id；接收方id；为了方便查找消息，将发送方id与接收方id做了一个拼接，以后想要找到聊天信息的话，直接查询这个字段就可以了；发送内容content；状态：已读，未读，删除；创建的时间。</p>
<p><strong>评论数据表</strong>：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220217122624107.png" alt="image-20220217122624107"></p>
<p>用户表：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220217122825476.png" alt="image-20220217122825476"></p>
<p>登录凭证表;</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220217123007738.png" alt="image-20220217123007738"></p>
<p>帖子表：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220217123042074.png" alt="image-20220217123042074"></p>
<h2 id="MySQL索引">MySQL索引</h2>
<p><strong>索引是一种用于快速查询和检索数据的数据结构。常见的索引结构有: B 树， B+树和 Hash</strong></p>
<h3 id="索引的优缺点">索引的优缺点</h3>
<p><strong>优点</strong> ：</p>
<ul>
<li>使用索引可以大大加快 数据的检索速度（大大减少检索的数据量）, 这也是创建索引的最主要的原因。</li>
<li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</li>
</ul>
<p><strong>缺点</strong> ：</p>
<ul>
<li>创建索引和维护索引需要耗费许多时间。当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态的修改，会降低 SQL 执行效率。</li>
<li>索引需要使用物理文件存储，也会耗费一定空间。</li>
</ul>
<h3 id="B-树索引">B+树索引</h3>
<p>InnoDB引擎中索引的底层结构是B+树。B+树时一棵<strong>多路平衡查找树</strong></p>
<p>B+树的特点：</p>
<ul>
<li>B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。</li>
<li>B+树的叶子节点有一条引用链指向与它相邻的叶子节点。</li>
<li>B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</li>
</ul>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/20210420165409106.png" alt="img"></p>
<h3 id="索引的最左匹配">索引的最左匹配</h3>
<p>在MySQL建立联合索引时会遵守最左前缀匹配原则，即最左优先，在检索数据时从联合索引的最左边开始匹配。</p>
<h3 id="查看是否使用索引">查看是否使用索引</h3>
<p>通过explain命令查看。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/v2-767c9106f588ed86ed775306784db9fe_r.jpg" alt="preview"></p>
<ul>
<li><strong>type</strong>：这是重要的列，显示连接使用了何种类型。从最好到最差的连接类型为<strong>const、eq_reg、ref、range、indexhe和ALL</strong></li>
<li><strong>possible_keys</strong>：显示可能应用在这张表中的索引。</li>
<li><strong>key</strong>： 实际使用的索引。如果为NULL，则没有使用索引。</li>
<li><strong>key_len</strong>：使用的索引的长度。</li>
<li><strong>ref</strong>：显示索引的哪一列被使用了，如果可能的话，是一个常数</li>
<li><strong>rows</strong>：MYSQL认为必须检查的用来返回请求数据的行数</li>
<li><strong>Extra</strong>：关于MYSQL如何解析查询的额外信息。</li>
</ul>
<h3 id="聚集索引与非聚集索引">聚集索引与非聚集索引</h3>
<ul>
<li>聚集索引即索引结构和数据一起存放的索引。主键索引属于聚集索引。</li>
<li>非聚集索引即索引结构和数据分开存放的索引。二级索引属于非聚集索引。</li>
</ul>
<p>主键索引：叶子节点存放的是data。</p>
<p>二级索引/辅助索引：叶子节点存放的是主键。</p>
<h3 id="MySQL回表查询">MySQL回表查询</h3>
<p>回表：<strong>先定位主键值key，再通过主键值找到data，相当于发生了两次查询操作</strong>。非聚集索引和辅助索引都会发生回表操作。</p>
<h3 id="创建索引的注意事项">创建索引的注意事项</h3>
<ol>
<li>选择合适创建索引的字段
<ul>
<li><strong>不为 NULL 的字段</strong> ：索引字段的数据应该尽量不为 NULL，因为对于数据为 NULL 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 NULL，建议使用 0,1,true,false 这样语义较为清晰的短值或短字符作为替代。</li>
<li><strong>被频繁查询的字段</strong> ：我们创建索引的字段应该是查询操作非常频繁的字段。</li>
<li><strong>被作为条件查询的字段</strong> ：被作为 WHERE 条件查询的字段，应该被考虑建立索引。</li>
<li><strong>频繁需要排序的字段</strong> ：索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。</li>
<li><strong>被经常频繁用于连接的字段</strong> ：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。</li>
</ul>
</li>
<li><strong>被频繁更新的字段应该慎重建立索引。</strong></li>
<li>尽可能的考虑建立联合索引而不是单列索引。
<ul>
<li>因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗 B+树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。</li>
</ul>
</li>
<li><strong>注意避免冗余索引</strong> 。</li>
<li><strong>考虑在字符串类型的字段上使用前缀索引代替普通索引。</strong></li>
</ol>
<h3 id="索引失效的情况">索引失效的情况</h3>
<ol>
<li>
<p>where语句中包含or时，可能会导致索引失效。如果or的两边是相同的索引的话，可以命中。</p>
</li>
<li>
<p>where语句中索引列使用了负向查询，可能会导致索引失效。负向查询包括：NOT、!=、&lt;&gt;、!&lt;、!&gt;、NOT IN、NOT LIKE等</p>
</li>
<li>
<p>索引字段可以为null，使用is null或is not null时，可能会导致索引失效</p>
</li>
<li>
<p><strong>在索引列上使用内置函数，一定会导致索引失效</strong></p>
</li>
<li>
<p><strong>对索引列进行运算，一定会导致索引失效</strong>。select<code> </code>* <code>from` ````user``` </code>where<code> </code>age - 1 = 10;</p>
</li>
<li>
<p><strong>like通配符可能会导致索引失效</strong>。可以使用覆盖索引来命中，覆盖索引是指select后加索引字段名。</p>
</li>
<li>
<p><strong>联合索引中，where中索引列违背最左匹配原则，一定会导致索引失效</strong></p>
</li>
<li>
<p><strong>MySQL优化器的最终选择，不走索引</strong></p>
<p>即使完全符合索引生效的场景，考虑到实际数据量等原因，最终是否使用索引还要看MySQL优化器的判断。当然你也可以在sql语句中写明强制走某个索引。</p>
<p>索引优化的建议：</p>
<ul>
<li>禁止在更新十分频繁、区分度不高的属性上建立索引</li>
<li>建立组合索引，必须把区分度高的字段放在前面。</li>
</ul>
</li>
</ol>
<h2 id="Redis数据库">Redis数据库</h2>
<h3 id="基本数据类型-2">基本数据类型</h3>
<p>String、list、set、zset、hash（<strong>特别适合用于存储对象</strong>）</p>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">简介</th>
<th style="text-align:left">特性</th>
<th style="text-align:left">场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">String(字符串)</td>
<td style="text-align:left">二进制安全</td>
<td style="text-align:left">可以包含任何数据,比如jpg图片或者序列化的对象,一个键最大能存储512M</td>
<td style="text-align:left">—</td>
</tr>
<tr>
<td style="text-align:left">Hash(字典)</td>
<td style="text-align:left">键值对集合,即编程语言中的Map类型</td>
<td style="text-align:left">适合存储对象,并且可以像数据库中update一个属性一样只修改某一项属性值(Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去)</td>
<td style="text-align:left">存储、读取、修改用户属性</td>
</tr>
<tr>
<td style="text-align:left">List(列表)</td>
<td style="text-align:left">链表(双向链表)</td>
<td style="text-align:left">增删快,提供了操作某一段元素的API</td>
<td style="text-align:left">1,最新消息排行等功能(比如朋友圈的时间线) 2,消息队列</td>
</tr>
<tr>
<td style="text-align:left">Set(集合)</td>
<td style="text-align:left">哈希表实现,元素不重复</td>
<td style="text-align:left">1、添加、删除,查找的复杂度都是O(1) 2、为集合提供了求交集、并集、差集等操作</td>
<td style="text-align:left">1、共同好友 2、利用唯一性,统计访问网站的所有独立ip 3、好友推荐时,根据tag求交集,大于某个阈值就可以推荐</td>
</tr>
<tr>
<td style="text-align:left">Sorted Set(有序集合)</td>
<td style="text-align:left">将Set中的元素增加一个权重参数score,元素按score有序排列</td>
<td style="text-align:left">数据插入集合时,已经进行天然排序</td>
<td style="text-align:left">1、排行榜 2、带权重的消息队列</td>
</tr>
</tbody>
</table>
<h3 id="Redis删除key的淘汰机制">Redis删除key的淘汰机制</h3>
<ol>
<li><strong>volatile-lru（least recently used）</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li>
<li><strong>volatile-ttl</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li>
<li><strong>volatile-random</strong>：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li>
<li><strong>allkeys-lru（least recently used）</strong>：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）</li>
<li><strong>allkeys-random</strong>：从数据集（server.db[i].dict）中任意选择数据淘汰</li>
<li><strong>no-eviction</strong>：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！</li>
</ol>
<p>4.0 版本后增加以下两种：</p>
<ol start="8">
<li><strong>volatile-lfu（least frequently used）</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选最不经常使用的数据淘汰</li>
<li><strong>allkeys-lfu（least frequently used）</strong>：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key</li>
</ol>
<h3 id="过期的数据的删除策略了解么？">过期的数据的删除策略了解么？</h3>
<ul>
<li><strong>惰性删除</strong> ：只会在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。</li>
<li><strong>定期删除</strong> ： 每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。</li>
</ul>
<h3 id="Redis-持久化机制">Redis 持久化机制</h3>
<p>RDB和AOF。</p>
<p><strong>快照（snapshotting）持久化（RDB）</strong></p>
<p>Redis 可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">save 900 1           #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span><br><span class="line"></span><br><span class="line">save 300 10          #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发BGSAVE命令创建快照。</span><br></pre></td></tr></table></figure>
<p><strong>AOF（append-only file）持久化</strong></p>
<p>与快照持久化相比，AOF 持久化的实时性更好，因此已成为主流的持久化方案。开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到内存缓存 <code>server.aof_buf</code> 中，然后再根据 <code>appendfsync</code> 配置来决定何时将其同步到硬盘中的 AOF 文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">appendfsync always    #每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度</span><br><span class="line">appendfsync everysec  #每秒钟同步一次，显示地将多个写命令同步到硬盘</span><br><span class="line">appendfsync no        #让操作系统决定何时进行同步</span><br></pre></td></tr></table></figure>
<h3 id="Redis-事务">Redis 事务</h3>
<p>Redis 可以通过 <strong><code>MULTI</code>，<code>EXEC</code>，<code>DISCARD</code> 和 <code>WATCH</code></strong> 等命令来实现事务(transaction)功能。</p>
<p>这个过程是这样的：</p>
<ol>
<li>开始事务（<code>MULTI</code>）。</li>
<li>命令入队(批量操作 Redis 的命令，先进先出（FIFO）的顺序执行)。</li>
<li>执行事务(<code>EXEC</code>)。</li>
</ol>
<p>你也可以通过 <a href="https://redis.io/commands/discard"><code>DISCARD</code>  (opens new window)</a> 命令取消一个事务，它会清空事务队列中保存的所有命令。</p>
<p><a href="https://redis.io/commands/watch"><code>WATCH</code> (opens new window)</a>命令用于监听指定的键，当调用 <code>EXEC</code> 命令执行事务时，如果一个被 <code>WATCH</code> 命令监视的键被修改的话，整个事务都不会执行，直接返回失败。</p>
<p><strong>Redis不支持原子性</strong>：<strong>Redis不支持事务回滚机制</strong>(rollback)， 即使事务队列中的某个命令在执行期间出现了错误，整个事务也会继续执行下去，直到将事务队列中的所有命令都执行完毕为止。</p>
<h3 id="缓存穿透和缓存雪崩">缓存穿透和缓存雪崩</h3>
<p><strong>缓存穿透</strong>：缓存穿透说简单点就是大量请求的 key 根本不存在于缓存中，导致请求直接到了数据库上，根本没有经过缓存这一层。</p>
<p>解决方法：</p>
<ol>
<li>布隆过滤器</li>
<li>在前端添加判断语句，防止非法的请求传入。</li>
<li>缓存无效的key</li>
</ol>
<p><strong>缓存雪崩</strong>：</p>
<ul>
<li>场景一：硬件问题，缓存失效。缓存在同一时间大面积的失效，后面的请求都直接落到了数据库上，造成数据库短时间内承受大量请求。</li>
<li>场景二：缓存在同一时间过期。有一些被大量访问数据（热点缓存）在某一时刻大面积失效，导致对应的请求直接落到了数据库上</li>
</ul>
<p>针对场景一：</p>
<ol>
<li>采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。</li>
<li>限流，避免同时处理大量的请求。</li>
</ol>
<p>针对场景二：</p>
<ol>
<li>设置不同的失效时间比如随机设置缓存的失效时间。</li>
<li>缓存永不失效。</li>
</ol>
<h3 id="Redis为什么快">Redis为什么快</h3>
<ol>
<li>
<p>Redis具有缓存功能，缓存就是直接操作内存，内存的读写速度极快。</p>
</li>
<li>
<p>Redis采用单线程,避免了不必要的上下文切换和竞争。</p>
</li>
<li>
<p>Redis使用非阻塞的I/O多路复用技术，可以处理并发的连接。redis使用非阻塞I/O；</p>
<p><code>IO</code>多路复用程序会同时监听多个<code>socket</code>，当被监听的<code>socket</code>准备好执行<code>accept</code>、<code>read</code>、<code>write</code>、<code>close</code>等操作时，与这些操作相对应的文件事件就会产生。<code>IO</code>多路复用程序会把所有产生事件的<code>socket</code>压入一个队列中，然后有序地每次仅一个<code>socket</code>的方式传送给文件事件分派器，文件事件分派器接收到<code>socket</code>之后会根据<code>socket</code>产生的事件类型调用对应的事件处理器进行处理。</p>
</li>
</ol>
<h3 id="Redis集群的三种模式">Redis集群的三种模式</h3>
<ul>
<li><strong>主从复制模式</strong>：主从模式是三种模式中最简单的，在主从复制中，数据库分为两类：主数据库(master)和从数据库(slave)。数据写入到master上，然后复制到slave中。</li>
<li><strong>哨兵模式</strong>：主从模式的弊端就是不具备高可用性，当master挂掉以后，Redis将不能再对外提供写入操作，因此sentinel应运而生。sentinel中文含义为哨兵，顾名思义，它的作用就是监控redis集群的运行状况。当master宕机之后，会自动选举一个slave作为master</li>
<li><strong>集群模式</strong>：sentinel模式基本可以满足一般生产的需求，具备高可用性。但是当数据量过大到一台服务器存放不下的情况时，主从模式或sentinel模式就不能满足需求了，这个时候需要对存储的数据进行分片，将数据存储到多个Redis实例中。cluster模式的出现就是为了解决单机Redis容量有限的问题，将Redis的数据根据一定的规则分配到多台机器。</li>
</ul>
<h3 id="哨兵模式下，slave的选举成master的规则">哨兵模式下，slave的选举成master的规则</h3>
<p>选点的依据依次是：网络连接正常-&gt;5秒内回复过INFO命令-&gt;10*down-after-milliseconds内与主连接过的-&gt;从服务器优先级-&gt;复制偏移量-&gt;运行id较小的。</p>
<p>选出之后通过slaveif no ont将该从服务器升为新master。</p>
<h3 id="redis集群模式下，数据是怎么知道要分配到那个集群上的">redis集群模式下，数据是怎么知道要分配到那个集群上的</h3>
<ol>
<li>
<p>节点取余</p>
<p>假设有三个节点，因为redis中的数据是key-value存放的，所以先计算hash（key），再对其根据节点数取余。</p>
<p>缺点：<strong>不支持扩展，增、删缓存服务器时，缓存失效</strong>。</p>
</li>
<li>
<p>一致性hash法</p>
<p>用Hash算法<strong>根据服务器IP</strong>或hostname得出这三台服务器的<strong>Hash值</strong>。然后把他映射到<strong>0-2的32次方减一</strong>上。</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220217094042065.png" alt="image-20220217094042065"></p>
<p>然后，计算key的hash值，通过顺指针的方式，先指向哪个节点，就存放到哪里。</p>
</li>
<li>
<p>hash槽</p>
<p>Hash槽共有**16384(2的14次方)**个槽，每台服务器分管一部分。先计算数据的hash值，然后通过取余操作，查看其放在哪个Hash槽上，就能知道分配到哪个集群上。</p>
</li>
</ol>
<h2 id="Spring-IOC-AOP">Spring IOC &amp; AOP</h2>
<p><strong>IoC（Inverse of Control:控制反转）</strong> 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spirng 特有，在其他语言中也有应用。 –</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/frc-365faceb5697f04f31399937c059c162.png" alt="img"></p>
<p>AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p>
<p>Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 <strong>JDK Proxy</strong>，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 <strong>Cglib</strong> 生成一个被代理对象的子类来作为代理，如下图所示</p>
<p><img src="https://images.xiaozhuanlan.com/photo/2019/926dfc549b06d280a37397f9fd49bf9d.jpg" alt="SpringAOPProcess"></p>
<h2 id="Spring-bean">Spring bean</h2>
<p>bean 代指的就是那些被 IoC 容器所管理的对象。</p>
<p>bean的作用域，默认是singleton：</p>
<ul>
<li><strong>singleton</strong> : 唯一 bean 实例，Spring 中的 bean 默认都是单例的，对单例设计模式的应用。</li>
<li><strong>prototype</strong> : 每次请求都会创建一个新的 bean 实例。</li>
<li><strong>request</strong> : 每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP request 内有效。</li>
<li><strong>session</strong> : 每一次来自新 session 的 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP session 内有效。</li>
<li><strong>global-session</strong> ： 全局 session 作用域，仅仅在基于 portlet 的 web 应用中才有意义，Spring5 已经没有了。Portlet 是能够生成语义代码(例如：HTML)片段的小型 Java Web 插件。它们基于 portlet 容器，可以像 servlet 一样处理 HTTP 请求。但是，与 servlet 不同，每个 portlet 都有不同的会话。</li>
</ul>
<p>配置作用域：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br></pre></td></tr></table></figure>
<h3 id="单例-bean-的线程安全问题了解吗？">单例 bean 的线程安全问题了解吗？</h3>
<ol>
<li>在 bean 中尽量避免定义可变的成员变量。</li>
<li>在类中定义一个 <code>ThreadLocal</code> 成员变量，将需要的可变成员变量保存在 <code>ThreadLocal</code> 中（推荐的一种方式）</li>
</ol>
<h2 id="SpringMVC-工作原理了解吗">SpringMVC 工作原理了解吗?</h2>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/de6d2b213f112297298f3e223bf08f28.png" alt="img"></p>
<p><strong>流程说明（重要）：</strong></p>
<ol>
<li>客户端（浏览器）发送请求，直接请求到 <code>DispatcherServlet</code>。</li>
<li><code>DispatcherServlet</code> 根据请求信息调用 <code>HandlerMapping</code>，解析请求对应的 <code>Handler</code>。</li>
<li>解析到对应的 <code>Handler</code>（也就是我们平常说的 <code>Controller</code> 控制器）后，开始由 <code>HandlerAdapter</code> 适配器处理。</li>
<li><code>HandlerAdapter</code> 会根据 <code>Handler</code>来调用真正的处理器开处理请求，并处理相应的业务逻辑。</li>
<li>处理器处理完业务后，会返回一个 <code>ModelAndView</code> 对象，<code>Model</code> 是返回的数据对象，<code>View</code> 是个逻辑上的 <code>View</code>。</li>
<li><code>ViewResolver</code> 会根据逻辑 <code>View</code> 查找实际的 <code>View</code>。</li>
<li><code>DispaterServlet</code> 把返回的 <code>Model</code> 传给 <code>View</code>（视图渲染）。</li>
<li>把 <code>View</code> 返回给请求者（浏览器）</li>
</ol>
<h2 id="Spring-管理事务的方式有几种？">Spring 管理事务的方式有几种？</h2>
<ul>
<li><strong>编程式事务</strong> ： 在代码中硬编码(不推荐使用) : 通过 <code>TransactionTemplate</code>或者 <code>TransactionManager</code> 手动管理事务，实际应用中很少使用，但是对于你理解 Spring 事务管理原理有帮助。</li>
<li><strong>声明式事务</strong> ： 在 XML 配置文件中配置或者直接基于注解（推荐使用） : 实际是通过 AOP 实现（基于<code>@Transactional</code> 的全注解方式使用最多）</li>
</ul>
<h2 id="MyBatis中-和-的区别是什么？">MyBatis中#{}和${}的区别是什么？</h2>
<p><code>$&#123;&#125;</code>是 Properties 文件中的变量占位符，它可以用于标签属性值和 sql 内部，属于静态文本替换</p>
<p><code>#&#123;&#125;</code>是 sql 的参数占位符，MyBatis 会将 sql 中的<code>#&#123;&#125;</code>替换为? 号，可以用来解决SQL注入攻击。</p>
<h1>计算机基础</h1>
<h2 id="计算机网络">计算机网络</h2>
<h3 id="计算机网络的结构">计算机网络的结构</h3>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220216171128693.png" alt="image-20220216171128693"></p>
<ol>
<li>应用层(application-layer）的任务是通过应用进程间的交互来完成特定网络应用。在互联网中应用层协议很多，如域名系统 DNS，支持万维网应用的 <strong>HTTP 协议</strong>，支持电子邮件的 <strong>SMTP 协议</strong>等等。</li>
<li>运输层(transport layer)的主要任务就是负责向两台主机进程之间的通信提供通用的数据传输服务。</li>
<li>在计算机网络中进行通信的两个计算机之间可能会经过很多个数据链路，也可能还要经过很多通信子网。网络层的任务就是选择合适的网间路由和交换结点， 确保数据及时传送。 IP协议</li>
<li>数据链路层(data link layer)通常简称为链路层。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层的协议。</li>
<li>物理层(physical layer)的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异</li>
</ol>
<h3 id="TCP-三次握手和四次挥手">TCP 三次握手和四次挥手</h3>
<p>三次握手：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220216171427031.png" alt="image-20220216171427031"></p>
<ul>
<li>客户端–发送带有 SYN 标志的数据包–一次握手–服务端</li>
<li>服务端–发送带有 SYN/ACK 标志的数据包–二次握手–客户端</li>
<li>客户端–发送带有带有 ACK 标志的数据包–三次握手–服务端</li>
</ul>
<p>四次挥手：</p>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220216171538001.png" alt="image-20220216171538001"></p>
<p>断开一个 TCP 连接则需要“四次挥手”：</p>
<ul>
<li>客户端-发送一个 FIN，用来关闭客户端到服务器的数据传送</li>
<li>服务器-收到这个 FIN，它发回一 个 ACK，确认序号为收到的序号加 1 。和 SYN 一样，一个 FIN 将占用一个序号</li>
<li>服务器-关闭与客户端的连接，发送一个 FIN 给客户端</li>
<li>客户端-发回 ACK 报文确认，并将确认序号设置为收到序号加 1</li>
</ul>
<h3 id="TCP-UDP-协议的区别">TCP, UDP 协议的区别</h3>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/tcp-vs-udp.jpg" alt="TCP、UDP协议的区别"></p>
<p>UDP 在传送数据之前不需要先建立连接，远地主机在收到 UDP 报文后，不需要给出任何确认。虽然 UDP 不提供可靠交付，但在某些情况下 UDP 却是一种最有效的工作方式（一般用于即时通信），比如： QQ 语音、 QQ 视频 、直播等等</p>
<p>TCP 提供面向连接的服务。在传送数据之前必须先建立连接，数据传送结束后要释放连接。 TCP 不提供广播或多播服务。由于 TCP 要提供可靠的，面向连接的传输服务（TCP 的可靠体现在 TCP 在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源），这难以避免增加了许多开销，如确认，流量控制，计时器以及连接管理等。这不仅使协议数据单元的首部增大很多，还要占用许多处理机资源。TCP 一般用于文件传输、发送和接收邮件、远程登录等场景。</p>
<h3 id="TCP-协议如何保证可靠传输">TCP 协议如何保证可靠传输</h3>
<ol>
<li>应用数据被分割成 TCP 认为最适合发送的数据块。</li>
<li>TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。</li>
<li><strong>校验和：</strong> TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li>
<li>TCP 的接收端会丢弃重复的数据。</li>
<li><strong>流量控制：</strong> TCP 连接的每一方都有固定大小的缓冲空间，TCP 的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）</li>
<li><strong>拥塞控制：</strong> 当网络拥塞时，减少数据的发送。</li>
<li><strong>ARQ 协议：</strong> 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</li>
<li><strong>超时重传：</strong> 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段</li>
</ol>
<h3 id="在浏览器中输入-url-地址-显示主页的过程">在浏览器中输入 url 地址 -&gt;&gt; 显示主页的过程</h3>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220216172000460.png" alt="image-20220216172000460"></p>
<p>过程：</p>
<ol>
<li>DNS 解析，根据输入的IP地址找到对应的web服务器。</li>
<li>TCP 连接，与web服务器建立连接。</li>
<li>发送 HTTP 请求</li>
<li>服务器处理请求并返回 HTTP 报文</li>
<li>浏览器解析渲染页面</li>
<li>连接结束</li>
</ol>
<h3 id="HTTP状态码">HTTP状态码</h3>
<p><img src="http://r9jy0okua.bkt.clouddn.com/img/image-20220216172255179.png" alt="image-20220216172255179"></p>
<p>HTTP状态码列表:</p>
<table>
<thead>
<tr>
<th style="text-align:left">状态码</th>
<th style="text-align:left">状态码英文名称</th>
<th style="text-align:left">中文描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">100</td>
<td style="text-align:left">Continue</td>
<td style="text-align:left">继续。客户端应继续其请求</td>
</tr>
<tr>
<td style="text-align:left">101</td>
<td style="text-align:left">Switching Protocols</td>
<td style="text-align:left">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">200</td>
<td style="text-align:left">OK</td>
<td style="text-align:left">请求成功。一般用于GET与POST请求</td>
</tr>
<tr>
<td style="text-align:left">201</td>
<td style="text-align:left">Created</td>
<td style="text-align:left">已创建。成功请求并创建了新的资源</td>
</tr>
<tr>
<td style="text-align:left">202</td>
<td style="text-align:left">Accepted</td>
<td style="text-align:left">已接受。已经接受请求，但未处理完成</td>
</tr>
<tr>
<td style="text-align:left">203</td>
<td style="text-align:left">Non-Authoritative Information</td>
<td style="text-align:left">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td>
</tr>
<tr>
<td style="text-align:left">204</td>
<td style="text-align:left">No Content</td>
<td style="text-align:left">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td>
</tr>
<tr>
<td style="text-align:left">205</td>
<td style="text-align:left">Reset Content</td>
<td style="text-align:left">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td>
</tr>
<tr>
<td style="text-align:left">206</td>
<td style="text-align:left">Partial Content</td>
<td style="text-align:left">部分内容。服务器成功处理了部分GET请求</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">300</td>
<td style="text-align:left">Multiple Choices</td>
<td style="text-align:left">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td>
</tr>
<tr>
<td style="text-align:left">301</td>
<td style="text-align:left">Moved Permanently</td>
<td style="text-align:left">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td>
</tr>
<tr>
<td style="text-align:left">302</td>
<td style="text-align:left">Found</td>
<td style="text-align:left">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td>
</tr>
<tr>
<td style="text-align:left">303</td>
<td style="text-align:left">See Other</td>
<td style="text-align:left">查看其它地址。与301类似。使用GET和POST请求查看</td>
</tr>
<tr>
<td style="text-align:left">304</td>
<td style="text-align:left">Not Modified</td>
<td style="text-align:left">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td>
</tr>
<tr>
<td style="text-align:left">305</td>
<td style="text-align:left">Use Proxy</td>
<td style="text-align:left">使用代理。所请求的资源必须通过代理访问</td>
</tr>
<tr>
<td style="text-align:left">306</td>
<td style="text-align:left">Unused</td>
<td style="text-align:left">已经被废弃的HTTP状态码</td>
</tr>
<tr>
<td style="text-align:left">307</td>
<td style="text-align:left">Temporary Redirect</td>
<td style="text-align:left">临时重定向。与302类似。使用GET请求重定向</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">400</td>
<td style="text-align:left">Bad Request</td>
<td style="text-align:left">客户端请求的语法错误，服务器无法理解</td>
</tr>
<tr>
<td style="text-align:left">401</td>
<td style="text-align:left">Unauthorized</td>
<td style="text-align:left">请求要求用户的身份认证</td>
</tr>
<tr>
<td style="text-align:left">402</td>
<td style="text-align:left">Payment Required</td>
<td style="text-align:left">保留，将来使用</td>
</tr>
<tr>
<td style="text-align:left">403</td>
<td style="text-align:left">Forbidden</td>
<td style="text-align:left">服务器理解请求客户端的请求，但是拒绝执行此请求</td>
</tr>
<tr>
<td style="text-align:left">404</td>
<td style="text-align:left">Not Found</td>
<td style="text-align:left">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置&quot;您所请求的资源无法找到&quot;的个性页面</td>
</tr>
<tr>
<td style="text-align:left">405</td>
<td style="text-align:left">Method Not Allowed</td>
<td style="text-align:left">客户端请求中的方法被禁止</td>
</tr>
<tr>
<td style="text-align:left">406</td>
<td style="text-align:left">Not Acceptable</td>
<td style="text-align:left">服务器无法根据客户端请求的内容特性完成请求</td>
</tr>
<tr>
<td style="text-align:left">407</td>
<td style="text-align:left">Proxy Authentication Required</td>
<td style="text-align:left">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td>
</tr>
<tr>
<td style="text-align:left">408</td>
<td style="text-align:left">Request Time-out</td>
<td style="text-align:left">服务器等待客户端发送的请求时间过长，超时</td>
</tr>
<tr>
<td style="text-align:left">409</td>
<td style="text-align:left">Conflict</td>
<td style="text-align:left">服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td>
</tr>
<tr>
<td style="text-align:left">410</td>
<td style="text-align:left">Gone</td>
<td style="text-align:left">客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td>
</tr>
<tr>
<td style="text-align:left">411</td>
<td style="text-align:left">Length Required</td>
<td style="text-align:left">服务器无法处理客户端发送的不带Content-Length的请求信息</td>
</tr>
<tr>
<td style="text-align:left">412</td>
<td style="text-align:left">Precondition Failed</td>
<td style="text-align:left">客户端请求信息的先决条件错误</td>
</tr>
<tr>
<td style="text-align:left">413</td>
<td style="text-align:left">Request Entity Too Large</td>
<td style="text-align:left">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td>
</tr>
<tr>
<td style="text-align:left">414</td>
<td style="text-align:left">Request-URI Too Large</td>
<td style="text-align:left">请求的URI过长（URI通常为网址），服务器无法处理</td>
</tr>
<tr>
<td style="text-align:left">415</td>
<td style="text-align:left">Unsupported Media Type</td>
<td style="text-align:left">服务器无法处理请求附带的媒体格式</td>
</tr>
<tr>
<td style="text-align:left">416</td>
<td style="text-align:left">Requested range not satisfiable</td>
<td style="text-align:left">客户端请求的范围无效</td>
</tr>
<tr>
<td style="text-align:left">417</td>
<td style="text-align:left">Expectation Failed</td>
<td style="text-align:left">服务器无法满足Expect的请求头信息</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">500</td>
<td style="text-align:left">Internal Server Error</td>
<td style="text-align:left">服务器内部错误，无法完成请求</td>
</tr>
<tr>
<td style="text-align:left">501</td>
<td style="text-align:left">Not Implemented</td>
<td style="text-align:left">服务器不支持请求的功能，无法完成请求</td>
</tr>
<tr>
<td style="text-align:left">502</td>
<td style="text-align:left">Bad Gateway</td>
<td style="text-align:left">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td>
</tr>
<tr>
<td style="text-align:left">503</td>
<td style="text-align:left">Service Unavailable</td>
<td style="text-align:left">由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td>
</tr>
<tr>
<td style="text-align:left">504</td>
<td style="text-align:left">Gateway Time-out</td>
<td style="text-align:left">充当网关或代理的服务器，未及时从远端服务器获取请求</td>
</tr>
<tr>
<td style="text-align:left">505</td>
<td style="text-align:left">HTTP Version not supported</td>
<td style="text-align:left">服务器不支持请求的HTTP协议的版本，无法完成处理</td>
</tr>
</tbody>
</table>
<h3 id="HTTP-和-HTTPS-的区别？">HTTP 和 HTTPS 的区别？</h3>
<ol>
<li><strong>端口</strong> ：HTTP 的 URL 由“http://”起始且默认使用端口80，而HTTPS的URL由“https://”起始且默认使用端口443。</li>
<li><strong>安全性和资源消耗：</strong> HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS 是运行在 SSL/TLS 之上的 HTTP 协议，SSL/TLS 运行在 TCP 之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS 高，但是 HTTPS 比 HTTP 耗费更多服务器资源。</li>
</ol>
<p>对称加密与非对称加密：</p>
<ul>
<li>对称加密：密钥只有一个，加密解密为同一个密码，且加解密速度快，典型的对称加密算法有 DES、AES 等；</li>
<li>非对称加密：密钥成对出现（且根据公钥无法推知私钥，根据私钥也无法推知公钥），加密解密使用不同密钥（公钥加密需要私钥解密，私钥加密需要公钥解密），相对对称加密速度较慢，典型的非对称加密算法有 RSA、DSA 等。</li>
</ul>
<h3 id="Https加密的过程">Https加密的过程</h3>
<ul>
<li>客户端请求服务端的证书</li>
<li>服务端给客户端发送证书</li>
<li>客户端生成对称密钥并用公钥发送给服务端</li>
<li>服务端解析出对称密钥并存储</li>
<li>客户端使用对称密钥加密数据发送</li>
<li>服务端使用对称密钥解密数据，并把响应数据用对称密钥加密</li>
</ul>
<h3 id="Http中get和post的区别">Http中get和post的区别</h3>
<ul>
<li>post更安全（不会作为url的一部分，不会被缓存、保存在服务器日志、以及浏览器浏览记录中）</li>
<li>post发送的数据更大（get有url长度限制）</li>
<li>post能发送更多的数据类型（get只能发送ASCII字符）</li>
<li>post比get慢</li>
<li>post用于修改和写入数据，get一般用于搜索排序和筛选之类的操作（淘宝，支付宝的搜索查询都是get提交），目的是资源的获取，读取数据</li>
</ul>
<h3 id="Ping命令">Ping命令</h3>
<p>（1）用来检测网络的连通情况和分析网络速度；</p>
<p>（2）根据域名得到服务器IP；</p>
<p>（3）根据ping返回的TTL值来判断对方所使用的操作系统及数据包经过路由器数量。</p>
<p><strong>原理：</strong></p>
<p>ping 命令是基于 ICMP 协议来工作的，「 ICMP 」全称为 Internet 控制报文协议。</p>
<p>ping 命令会发送一份ICMP回显请求报文给目标主机，并等待目标主机返回ICMP回显应答。因为ICMP协议要求目标主机在收到消息之后，必须返回ICMP应答消息给源主机，如果源主机在一定时间内收到了目标主机的应答，则表明两台主机之间网络是可达的。</p>
<h1>设计模式</h1>
<h2 id="适配器模式">适配器模式</h2>
<h1>容器化</h1>
<h2 id="Docker和k8s">Docker和k8s</h2>
<h3 id="Docker和K8s的区别">Docker和K8s的区别</h3>
<p><strong>概念：</strong></p>
<p>Docker是一个开源的应用<strong>容器</strong>引擎。Doker可以让开发者打包他们的应用以及依赖包导一个轻量级、可移植的容器中，然后发布到任何远程虚拟机中。</p>
<p>Kubernetes（又称k8s，因为k和s中间有8个字母）是一个开源的容器集群管理系统，可以实现容器集群的自动化部署、自动扩缩容、维护等功能。它是一个全面的系统，用于自动化部署、调度和扩展容器化应用，并支持许多容器化工具，如Docker。</p>
<p><strong>区别：</strong></p>
<ul>
<li>Docker是用于构建、分发和运行Docker容器的平台和工具；而Kubernetes不包含用于创建或管理容器镜像的功能，并且它本身并不运行容器。因此两者的主要区别在于Docker在单个节点上运行，而Kubernetes设计为在集群上运行。</li>
<li>Kubernetes和Docker另一个主要区别在于Docker可以在没有Kubernetes的情况下使用，而Kubernetes需要容器运行时才能进行编排。</li>
</ul>
<h1>面试真题</h1>
<p>蔚来：</p>
<ol>
<li>redis缓存穿透和缓存击穿的区别</li>
<li>布隆过滤器</li>
<li>数据库MVCC实现原理</li>
<li>一个公司里有三台电梯，测试功能设计测试用例。</li>
<li>http状态码，200和201的区别。</li>
</ol>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
</search>
